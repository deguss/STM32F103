
ADS1256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c94  08009c94  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009c94  08009c94  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c94  08009c94  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c94  08009c94  00019c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c98  08009c98  00019c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017c8  200001dc  08009e78  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019a4  08009e78  000219a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fcee  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034a9  00000000  00000000  0002ff36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  000333e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2f  00000000  00000000  000341b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af9a  00000000  00000000  00034be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001395a  00000000  00000000  0004fb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008901e  00000000  00000000  000634db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dd4  00000000  00000000  000ec4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000f02d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08009b64 	.word	0x08009b64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08009b64 	.word	0x08009b64

0800014c <readRegister>:
    SPS_15000,
    SPS_30000
};


uint8_t readRegister(uint8_t reg){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t dat;

    uint8_t command[2];
    command[0] = CMD_RREG_BASE | reg;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	b2db      	uxtb	r3, r3
 800015e:	733b      	strb	r3, [r7, #12]
    command[1] = 0; // read (this + 1) registers
 8000160:	2300      	movs	r3, #0
 8000162:	737b      	strb	r3, [r7, #13]

    HAL_SPI_Transmit(&hspi1, command, 2, HAL_MAX_DELAY); // Send register address and data
 8000164:	f107 010c 	add.w	r1, r7, #12
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	2202      	movs	r2, #2
 800016e:	4808      	ldr	r0, [pc, #32]	; (8000190 <readRegister+0x44>)
 8000170:	f003 fc88 	bl	8003a84 <HAL_SPI_Transmit>
    ;
    ;
    ;
    ;
    ;
    HAL_SPI_Receive(&hspi1, &dat, 1, HAL_MAX_DELAY); // read register
 8000174:	f107 010f 	add.w	r1, r7, #15
 8000178:	f04f 33ff 	mov.w	r3, #4294967295
 800017c:	2201      	movs	r2, #1
 800017e:	4804      	ldr	r0, [pc, #16]	; (8000190 <readRegister+0x44>)
 8000180:	f003 fdc3 	bl	8003d0a <HAL_SPI_Receive>
    return dat;
 8000184:	7bfb      	ldrb	r3, [r7, #15]
}
 8000186:	4618      	mov	r0, r3
 8000188:	3710      	adds	r7, #16
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	20000204 	.word	0x20000204

08000194 <sendCommand>:


void sendCommand(uint8_t cmd){
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800019e:	1df9      	adds	r1, r7, #7
 80001a0:	f04f 33ff 	mov.w	r3, #4294967295
 80001a4:	2201      	movs	r2, #1
 80001a6:	4803      	ldr	r0, [pc, #12]	; (80001b4 <sendCommand+0x20>)
 80001a8:	f003 fc6c 	bl	8003a84 <HAL_SPI_Transmit>
    ;
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000204 	.word	0x20000204

080001b8 <writeRegister>:


void writeRegister(uint8_t reg, uint8_t data){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b084      	sub	sp, #16
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	460a      	mov	r2, r1
 80001c2:	71fb      	strb	r3, [r7, #7]
 80001c4:	4613      	mov	r3, r2
 80001c6:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[3];

    txData[0] = CMD_WREG_BASE | reg;
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	733b      	strb	r3, [r7, #12]
    txData[1] = 0;          // (this + 1) registers will be written (0+1=1)
 80001d2:	2300      	movs	r3, #0
 80001d4:	737b      	strb	r3, [r7, #13]
    txData[2] = data;
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	73bb      	strb	r3, [r7, #14]

    HAL_SPI_Transmit(&hspi1, txData, 3, HAL_MAX_DELAY); // Send register address and data
 80001da:	f107 010c 	add.w	r1, r7, #12
 80001de:	f04f 33ff 	mov.w	r3, #4294967295
 80001e2:	2203      	movs	r2, #3
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <writeRegister+0x3c>)
 80001e6:	f003 fc4d 	bl	8003a84 <HAL_SPI_Transmit>
    ;
}
 80001ea:	bf00      	nop
 80001ec:	3710      	adds	r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000204 	.word	0x20000204

080001f8 <setupADS1256>:


// Set up ADS1256 configuration registers
// Initialize SPI communication with ADS1256
// Configure the ADC settings
uint8_t setupADS1256() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0

	HAL_Delay(100);
 80001fe:	2064      	movs	r0, #100	; 0x64
 8000200:	f000 fe20 	bl	8000e44 <HAL_Delay>
	sendCommand(CMD_RESET);
 8000204:	20fe      	movs	r0, #254	; 0xfe
 8000206:	f7ff ffc5 	bl	8000194 <sendCommand>
	HAL_Delay(100);
 800020a:	2064      	movs	r0, #100	; 0x64
 800020c:	f000 fe1a 	bl	8000e44 <HAL_Delay>

    // read the STATUS register
	uint8_t status = readRegister(REG_STATUS);
 8000210:	2000      	movs	r0, #0
 8000212:	f7ff ff9b 	bl	800014c <readRegister>
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
    writeRegister(REG_STATUS, (status & 0xF0) | 0x02); //enable buffer amplifier
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	f023 030f 	bic.w	r3, r3, #15
 8000222:	b25b      	sxtb	r3, r3
 8000224:	f043 0302 	orr.w	r3, r3, #2
 8000228:	b25b      	sxtb	r3, r3
 800022a:	b2db      	uxtb	r3, r3
 800022c:	4619      	mov	r1, r3
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffc2 	bl	80001b8 <writeRegister>
    HAL_Delay(10);	//ths delay is needed, as DRDY line is not immediately pulled high
 8000234:	200a      	movs	r0, #10
 8000236:	f000 fe05 	bl	8000e44 <HAL_Delay>
    while(NOT_DRDY) ;	//wait for calibration to complete
 800023a:	bf00      	nop
 800023c:	2102      	movs	r1, #2
 800023e:	481b      	ldr	r0, [pc, #108]	; (80002ac <setupADS1256+0xb4>)
 8000240:	f001 f8e8 	bl	8001414 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1f8      	bne.n	800023c <setupADS1256+0x44>

    // Configure the DRATE register for desired data rate
    writeRegister(REG_DRATE, SPS_50); // Set data rate to 50Hz
 800024a:	2163      	movs	r1, #99	; 0x63
 800024c:	2003      	movs	r0, #3
 800024e:	f7ff ffb3 	bl	80001b8 <writeRegister>
    HAL_Delay(1);	//ths delay is needed, as DRDY line is not immediately pulled high
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fdf6 	bl	8000e44 <HAL_Delay>
    while(NOT_DRDY) ;	//wait to complete
 8000258:	bf00      	nop
 800025a:	2102      	movs	r1, #2
 800025c:	4813      	ldr	r0, [pc, #76]	; (80002ac <setupADS1256+0xb4>)
 800025e:	f001 f8d9 	bl	8001414 <HAL_GPIO_ReadPin>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1f8      	bne.n	800025a <setupADS1256+0x62>

    // Configure the ADCON register
    writeRegister(REG_ADCON, PGA1 ); // Set PGA gain to 1
 8000268:	2100      	movs	r1, #0
 800026a:	2002      	movs	r0, #2
 800026c:	f7ff ffa4 	bl	80001b8 <writeRegister>
    HAL_Delay(1);	//ths delay is needed, as DRDY line is not immediately pulled high
 8000270:	2001      	movs	r0, #1
 8000272:	f000 fde7 	bl	8000e44 <HAL_Delay>
    while(NOT_DRDY) ;	//wait to complete
 8000276:	bf00      	nop
 8000278:	2102      	movs	r1, #2
 800027a:	480c      	ldr	r0, [pc, #48]	; (80002ac <setupADS1256+0xb4>)
 800027c:	f001 f8ca 	bl	8001414 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1f8      	bne.n	8000278 <setupADS1256+0x80>
    
    sendCommand(CMD_SELFCAL); //start Offset and Gain Self-Calibration
 8000286:	20f0      	movs	r0, #240	; 0xf0
 8000288:	f7ff ff84 	bl	8000194 <sendCommand>
    HAL_Delay(1);	//this delay is needed, as DRDY line is not immediately pulled high
 800028c:	2001      	movs	r0, #1
 800028e:	f000 fdd9 	bl	8000e44 <HAL_Delay>
    //can last up to 2 seconds for low data rates
    while(NOT_DRDY) ;	//wait for calibration to complete
 8000292:	bf00      	nop
 8000294:	2102      	movs	r1, #2
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <setupADS1256+0xb4>)
 8000298:	f001 f8bc 	bl	8001414 <HAL_GPIO_ReadPin>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d1f8      	bne.n	8000294 <setupADS1256+0x9c>


    return status;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <stopSampling>:

void stopSampling(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    while(NOT_DRDY) ;	//wait to complete
 80002b4:	bf00      	nop
 80002b6:	2102      	movs	r1, #2
 80002b8:	4809      	ldr	r0, [pc, #36]	; (80002e0 <stopSampling+0x30>)
 80002ba:	f001 f8ab 	bl	8001414 <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f8      	bne.n	80002b6 <stopSampling+0x6>
    sendCommand(CMD_SDATAC);
 80002c4:	200f      	movs	r0, #15
 80002c6:	f7ff ff65 	bl	8000194 <sendCommand>
    while(NOT_DRDY) ;	//wait to complete
 80002ca:	bf00      	nop
 80002cc:	2102      	movs	r1, #2
 80002ce:	4804      	ldr	r0, [pc, #16]	; (80002e0 <stopSampling+0x30>)
 80002d0:	f001 f8a0 	bl	8001414 <HAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f8      	bne.n	80002cc <stopSampling+0x1c>
    //sendCommand(CMD_RESET);
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40010c00 	.word	0x40010c00

080002e4 <setChannel>:

// Channel Switching for differential mode. Use -1 to set input channel to
// AINCOM
uint8_t setChannel(int8_t AIN_P, int8_t AIN_N) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	4613      	mov	r3, r2
 80002f2:	71bb      	strb	r3, [r7, #6]
	uint8_t MUX_CHANNEL;
	uint8_t MUXP;
	uint8_t MUXN;

	switch (AIN_P) {
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	d82b      	bhi.n	8000354 <setChannel+0x70>
 80002fc:	a201      	add	r2, pc, #4	; (adr r2, 8000304 <setChannel+0x20>)
 80002fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000302:	bf00      	nop
 8000304:	08000325 	.word	0x08000325
 8000308:	0800032b 	.word	0x0800032b
 800030c:	08000331 	.word	0x08000331
 8000310:	08000337 	.word	0x08000337
 8000314:	0800033d 	.word	0x0800033d
 8000318:	08000343 	.word	0x08000343
 800031c:	08000349 	.word	0x08000349
 8000320:	0800034f 	.word	0x0800034f
		case 0:
		  MUXP = MUXP_AIN0;
 8000324:	2300      	movs	r3, #0
 8000326:	73fb      	strb	r3, [r7, #15]
		  break;
 8000328:	e016      	b.n	8000358 <setChannel+0x74>
		case 1:
		  MUXP = MUXP_AIN1;
 800032a:	2310      	movs	r3, #16
 800032c:	73fb      	strb	r3, [r7, #15]
		  break;
 800032e:	e013      	b.n	8000358 <setChannel+0x74>
		case 2:
		  MUXP = MUXP_AIN2;
 8000330:	2320      	movs	r3, #32
 8000332:	73fb      	strb	r3, [r7, #15]
		  break;
 8000334:	e010      	b.n	8000358 <setChannel+0x74>
		case 3:
		  MUXP = MUXP_AIN3;
 8000336:	2330      	movs	r3, #48	; 0x30
 8000338:	73fb      	strb	r3, [r7, #15]
		  break;
 800033a:	e00d      	b.n	8000358 <setChannel+0x74>
		case 4:
		  MUXP = MUXP_AIN4;
 800033c:	2340      	movs	r3, #64	; 0x40
 800033e:	73fb      	strb	r3, [r7, #15]
		  break;
 8000340:	e00a      	b.n	8000358 <setChannel+0x74>
		case 5:
		  MUXP = MUXP_AIN5;
 8000342:	2350      	movs	r3, #80	; 0x50
 8000344:	73fb      	strb	r3, [r7, #15]
		  break;
 8000346:	e007      	b.n	8000358 <setChannel+0x74>
		case 6:
		  MUXP = MUXP_AIN6;
 8000348:	2360      	movs	r3, #96	; 0x60
 800034a:	73fb      	strb	r3, [r7, #15]
		  break;
 800034c:	e004      	b.n	8000358 <setChannel+0x74>
		case 7:
		  MUXP = MUXP_AIN7;
 800034e:	2370      	movs	r3, #112	; 0x70
 8000350:	73fb      	strb	r3, [r7, #15]
		  break;
 8000352:	e001      	b.n	8000358 <setChannel+0x74>
		default:
		  MUXP = MUXP_AINCOM;
 8000354:	2380      	movs	r3, #128	; 0x80
 8000356:	73fb      	strb	r3, [r7, #15]
	}

	switch (AIN_N) {
 8000358:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800035c:	2b07      	cmp	r3, #7
 800035e:	d82b      	bhi.n	80003b8 <setChannel+0xd4>
 8000360:	a201      	add	r2, pc, #4	; (adr r2, 8000368 <setChannel+0x84>)
 8000362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000366:	bf00      	nop
 8000368:	08000389 	.word	0x08000389
 800036c:	0800038f 	.word	0x0800038f
 8000370:	08000395 	.word	0x08000395
 8000374:	0800039b 	.word	0x0800039b
 8000378:	080003a1 	.word	0x080003a1
 800037c:	080003a7 	.word	0x080003a7
 8000380:	080003ad 	.word	0x080003ad
 8000384:	080003b3 	.word	0x080003b3
		case 0:
		  MUXN = MUXN_AIN0;
 8000388:	2300      	movs	r3, #0
 800038a:	73bb      	strb	r3, [r7, #14]
		  break;
 800038c:	e016      	b.n	80003bc <setChannel+0xd8>
		case 1:
		  MUXN = MUXN_AIN1;
 800038e:	2301      	movs	r3, #1
 8000390:	73bb      	strb	r3, [r7, #14]
		  break;
 8000392:	e013      	b.n	80003bc <setChannel+0xd8>
		case 2:
		  MUXN = MUXN_AIN2;
 8000394:	2302      	movs	r3, #2
 8000396:	73bb      	strb	r3, [r7, #14]
		  break;
 8000398:	e010      	b.n	80003bc <setChannel+0xd8>
		case 3:
		  MUXN = MUXN_AIN3;
 800039a:	2303      	movs	r3, #3
 800039c:	73bb      	strb	r3, [r7, #14]
		  break;
 800039e:	e00d      	b.n	80003bc <setChannel+0xd8>
		case 4:
		  MUXN = MUXN_AIN4;
 80003a0:	2304      	movs	r3, #4
 80003a2:	73bb      	strb	r3, [r7, #14]
		  break;
 80003a4:	e00a      	b.n	80003bc <setChannel+0xd8>
		case 5:
		  MUXN = MUXN_AIN5;
 80003a6:	2305      	movs	r3, #5
 80003a8:	73bb      	strb	r3, [r7, #14]
		  break;
 80003aa:	e007      	b.n	80003bc <setChannel+0xd8>
		case 6:
		  MUXN = MUXN_AIN6;
 80003ac:	2306      	movs	r3, #6
 80003ae:	73bb      	strb	r3, [r7, #14]
		  break;
 80003b0:	e004      	b.n	80003bc <setChannel+0xd8>
		case 7:
		  MUXN = MUXN_AIN7;
 80003b2:	2307      	movs	r3, #7
 80003b4:	73bb      	strb	r3, [r7, #14]
		  break;
 80003b6:	e001      	b.n	80003bc <setChannel+0xd8>
		default:
		  MUXN = MUXN_AINCOM;
 80003b8:	2308      	movs	r3, #8
 80003ba:	73bb      	strb	r3, [r7, #14]
	}

	MUX_CHANNEL = MUXP | MUXN;
 80003bc:	7bfa      	ldrb	r2, [r7, #15]
 80003be:	7bbb      	ldrb	r3, [r7, #14]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	737b      	strb	r3, [r7, #13]

    while(NOT_DRDY) ; 	//wait to be ready
 80003c4:	bf00      	nop
 80003c6:	2102      	movs	r1, #2
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <setChannel+0x118>)
 80003ca:	f001 f823 	bl	8001414 <HAL_GPIO_ReadPin>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d1f8      	bne.n	80003c6 <setChannel+0xe2>
    writeRegister(REG_MUX, MUX_CHANNEL);
 80003d4:	7b7b      	ldrb	r3, [r7, #13]
 80003d6:	4619      	mov	r1, r3
 80003d8:	2001      	movs	r0, #1
 80003da:	f7ff feed 	bl	80001b8 <writeRegister>
    if (readRegister(REG_MUX) == MUX_CHANNEL){
 80003de:	2001      	movs	r0, #1
 80003e0:	f7ff feb4 	bl	800014c <readRegister>
 80003e4:	4603      	mov	r3, r0
 80003e6:	461a      	mov	r2, r3
 80003e8:	7b7b      	ldrb	r3, [r7, #13]
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d101      	bne.n	80003f2 <setChannel+0x10e>
    	return 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	e000      	b.n	80003f4 <setChannel+0x110>
    }
    return 1;
 80003f2:	2301      	movs	r3, #1

}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40010c00 	.word	0x40010c00

08000400 <setGain>:

void setGain(uint8_t drate, uint8_t gain) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	460a      	mov	r2, r1
 800040a:	71fb      	strb	r3, [r7, #7]
 800040c:	4613      	mov	r3, r2
 800040e:	71bb      	strb	r3, [r7, #6]
	sendCommand(CMD_SDATAC);  // send out SDATAC command to stop continuous reading mode.
 8000410:	200f      	movs	r0, #15
 8000412:	f7ff febf 	bl	8000194 <sendCommand>

	writeRegister(REG_DRATE, drate);  // write data rate register
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4619      	mov	r1, r3
 800041a:	2003      	movs	r0, #3
 800041c:	f7ff fecc 	bl	80001b8 <writeRegister>
	HAL_Delay(1);	//ths delay is needed, as DRDY line is not immediately pulled high
 8000420:	2001      	movs	r0, #1
 8000422:	f000 fd0f 	bl	8000e44 <HAL_Delay>
	while(NOT_DRDY) ;	//wait to complete
 8000426:	bf00      	nop
 8000428:	2102      	movs	r1, #2
 800042a:	4818      	ldr	r0, [pc, #96]	; (800048c <setGain+0x8c>)
 800042c:	f000 fff2 	bl	8001414 <HAL_GPIO_ReadPin>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1f8      	bne.n	8000428 <setGain+0x28>


	writeRegister(REG_ADCON, 0x07 & gain);
 8000436:	79bb      	ldrb	r3, [r7, #6]
 8000438:	f003 0307 	and.w	r3, r3, #7
 800043c:	b2db      	uxtb	r3, r3
 800043e:	4619      	mov	r1, r3
 8000440:	2002      	movs	r0, #2
 8000442:	f7ff feb9 	bl	80001b8 <writeRegister>
	HAL_Delay(1);	//ths delay is needed, as DRDY line is not immediately pulled high
 8000446:	2001      	movs	r0, #1
 8000448:	f000 fcfc 	bl	8000e44 <HAL_Delay>
	while(NOT_DRDY) ;	//wait to complete
 800044c:	bf00      	nop
 800044e:	2102      	movs	r1, #2
 8000450:	480e      	ldr	r0, [pc, #56]	; (800048c <setGain+0x8c>)
 8000452:	f000 ffdf 	bl	8001414 <HAL_GPIO_ReadPin>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f8      	bne.n	800044e <setGain+0x4e>

    sendCommand(CMD_SELFCAL); //start Offset and Gain Self-Calibration
 800045c:	20f0      	movs	r0, #240	; 0xf0
 800045e:	f7ff fe99 	bl	8000194 <sendCommand>
    HAL_Delay(1);	//ths delay is needed, as DRDY line is not immediately pulled high
 8000462:	2001      	movs	r0, #1
 8000464:	f000 fcee 	bl	8000e44 <HAL_Delay>
    //can last up to 2 seconds for low data rates
    while(NOT_DRDY) ;	//wait to complete
 8000468:	bf00      	nop
 800046a:	2102      	movs	r1, #2
 800046c:	4807      	ldr	r0, [pc, #28]	; (800048c <setGain+0x8c>)
 800046e:	f000 ffd1 	bl	8001414 <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f8      	bne.n	800046a <setGain+0x6a>

    sendCommand(CMD_RDATAC);
 8000478:	2003      	movs	r0, #3
 800047a:	f7ff fe8b 	bl	8000194 <sendCommand>
    HAL_Delay(10);
 800047e:	200a      	movs	r0, #10
 8000480:	f000 fce0 	bl	8000e44 <HAL_Delay>
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010c00 	.word	0x40010c00

08000490 <concatenateToInt32>:

int32_t concatenateToInt32(uint8_t *adcData){
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	uint8_t highbyte = *adcData;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	72fb      	strb	r3, [r7, #11]
	uint8_t midbyte = *(adcData + 1);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	785b      	ldrb	r3, [r3, #1]
 80004a2:	72bb      	strb	r3, [r7, #10]
	uint8_t lowbyte = *(adcData + 2);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	727b      	strb	r3, [r7, #9]

    // Concatenate the bytes in the correct order to form a single integer value
    int adcValue = ((int32_t)highbyte << 16) + ((int32_t)midbyte << 8) + (int32_t)lowbyte;
 80004aa:	7afb      	ldrb	r3, [r7, #11]
 80004ac:	041a      	lsls	r2, r3, #16
 80004ae:	7abb      	ldrb	r3, [r7, #10]
 80004b0:	021b      	lsls	r3, r3, #8
 80004b2:	441a      	add	r2, r3
 80004b4:	7a7b      	ldrb	r3, [r7, #9]
 80004b6:	4413      	add	r3, r2
 80004b8:	60fb      	str	r3, [r7, #12]
    if (adcValue & 0x00800000) {	//transfer sign bit from pos. 23 to pos. 31
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d003      	beq.n	80004cc <concatenateToInt32+0x3c>
    	adcValue |= 0xff000000;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80004ca:	60fb      	str	r3, [r7, #12]
    }
    return adcValue;
 80004cc:	68fb      	ldr	r3, [r7, #12]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <startSampling>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_IWDG_Init(void);


static uint8_t startSampling(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	//configure single ended: AIN0 referred to AINCOM
	// test if communication to ADC works (read by register)
	if (setChannel(0,-1)){	//if not succeeded
 80004dc:	f04f 31ff 	mov.w	r1, #4294967295
 80004e0:	2000      	movs	r0, #0
 80004e2:	f7ff feff 	bl	80002e4 <setChannel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <startSampling+0x18>
		return 1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	e02a      	b.n	8000546 <startSampling+0x6e>
	}
	sps_index = 8;
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <startSampling+0x74>)
 80004f2:	2208      	movs	r2, #8
 80004f4:	701a      	strb	r2, [r3, #0]
	setGain(sps_const[sps_index], PGA1);	//continuous conversation starts here
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <startSampling+0x74>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <startSampling+0x78>)
 80004fe:	5c9b      	ldrb	r3, [r3, r2]
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff7c 	bl	8000400 <setGain>

	adcDataArray.sps = sps[sps_index];
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <startSampling+0x74>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <startSampling+0x7c>)
 8000510:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <startSampling+0x80>)
 8000516:	805a      	strh	r2, [r3, #2]
	adcDataArray.length = bufferSizes[sps_index];
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <startSampling+0x74>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <startSampling+0x84>)
 8000520:	5c9b      	ldrb	r3, [r3, r2]
 8000522:	b29a      	uxth	r2, r3
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <startSampling+0x80>)
 8000526:	801a      	strh	r2, [r3, #0]
	adcDataArray.INP = 0;
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <startSampling+0x80>)
 800052a:	2200      	movs	r2, #0
 800052c:	711a      	strb	r2, [r3, #4]
	adcDataArray.INM = -1;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <startSampling+0x80>)
 8000530:	22ff      	movs	r2, #255	; 0xff
 8000532:	715a      	strb	r2, [r3, #5]

	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 7);
 8000534:	2207      	movs	r2, #7
 8000536:	2105      	movs	r1, #5
 8000538:	2006      	movs	r0, #6
 800053a:	f000 fda2 	bl	8001082 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn); //enable DRDY interrupt
 800053e:	2006      	movs	r0, #6
 8000540:	f000 fdbb 	bl	80010ba <HAL_NVIC_EnableIRQ>
	return 0; //for success
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000001 	.word	0x20000001
 8000550:	08009c1c 	.word	0x08009c1c
 8000554:	08009bfc 	.word	0x08009bfc
 8000558:	20000270 	.word	0x20000270
 800055c:	08009c2c 	.word	0x08009c2c

08000560 <keepBlueLEDFlashing>:


static void keepBlueLEDFlashing(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	// produce a non-blocking 1s OFF and 50ms ON timer (heartbeat signal green LED)
	static bool initialized = false;
	static uint32_t tick_s, tick_r;

	if (!initialized) {
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <keepBlueLEDFlashing+0xa0>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f083 0301 	eor.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00c      	beq.n	800058c <keepBlueLEDFlashing+0x2c>
		tick_s = HAL_GetTick();
 8000572:	f000 fc5d 	bl	8000e30 <HAL_GetTick>
 8000576:	4603      	mov	r3, r0
 8000578:	4a22      	ldr	r2, [pc, #136]	; (8000604 <keepBlueLEDFlashing+0xa4>)
 800057a:	6013      	str	r3, [r2, #0]
		tick_r = HAL_GetTick();
 800057c:	f000 fc58 	bl	8000e30 <HAL_GetTick>
 8000580:	4603      	mov	r3, r0
 8000582:	4a21      	ldr	r2, [pc, #132]	; (8000608 <keepBlueLEDFlashing+0xa8>)
 8000584:	6013      	str	r3, [r2, #0]
		initialized = true;
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <keepBlueLEDFlashing+0xa0>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
	}


	if (HAL_GetTick() - tick_s == 1000  &&  !get_BLED()){
 800058c:	f000 fc50 	bl	8000e30 <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <keepBlueLEDFlashing+0xa4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800059c:	d112      	bne.n	80005c4 <keepBlueLEDFlashing+0x64>
 800059e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <keepBlueLEDFlashing+0xac>)
 80005a4:	f000 fa06 	bl	80009b4 <HAL_GPIO_GetOutputPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00a      	beq.n	80005c4 <keepBlueLEDFlashing+0x64>
		//TODO: tick_s may overflow in 49 days
		tick_r = HAL_GetTick();	//start reset timer
 80005ae:	f000 fc3f 	bl	8000e30 <HAL_GetTick>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <keepBlueLEDFlashing+0xa8>)
 80005b6:	6013      	str	r3, [r2, #0]
		BLED(1)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4813      	ldr	r0, [pc, #76]	; (800060c <keepBlueLEDFlashing+0xac>)
 80005c0:	f000 ff3f 	bl	8001442 <HAL_GPIO_WritePin>
	}
	if (HAL_GetTick() - tick_r == 50 && get_BLED()){
 80005c4:	f000 fc34 	bl	8000e30 <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <keepBlueLEDFlashing+0xa8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	2b32      	cmp	r3, #50	; 0x32
 80005d2:	d112      	bne.n	80005fa <keepBlueLEDFlashing+0x9a>
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <keepBlueLEDFlashing+0xac>)
 80005da:	f000 f9eb 	bl	80009b4 <HAL_GPIO_GetOutputPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10a      	bne.n	80005fa <keepBlueLEDFlashing+0x9a>
		tick_s = HAL_GetTick(); //start set timer
 80005e4:	f000 fc24 	bl	8000e30 <HAL_GetTick>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a06      	ldr	r2, [pc, #24]	; (8000604 <keepBlueLEDFlashing+0xa4>)
 80005ec:	6013      	str	r3, [r2, #0]
		BLED(0)
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <keepBlueLEDFlashing+0xac>)
 80005f6:	f000 ff24 	bl	8001442 <HAL_GPIO_WritePin>
	}

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000025c 	.word	0x2000025c
 8000604:	20000260 	.word	0x20000260
 8000608:	20000264 	.word	0x20000264
 800060c:	40010c00 	.word	0x40010c00

08000610 <main>:


//-----------------------------------------------------------------------------
int main(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	static USBD_StatusTypeDef usb_status=USBD_FAIL;	//initialize with NOK at beginning
	static uint32_t tick_1s;

	HAL_Init();
 8000616:	f000 fbb3 	bl	8000d80 <HAL_Init>
	SystemClock_Config();
 800061a:	f000 f89a 	bl	8000752 <SystemClock_Config>

	MX_GPIO_Init();
 800061e:	f000 f945 	bl	80008ac <MX_GPIO_Init>
	BLED(1) 	// signaling the start of the INIT
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000628:	483a      	ldr	r0, [pc, #232]	; (8000714 <main+0x104>)
 800062a:	f000 ff0a 	bl	8001442 <HAL_GPIO_WritePin>

	MX_IWDG_Init();
 800062e:	f000 f8ed 	bl	800080c <MX_IWDG_Init>
	MX_USB_DEVICE_Init();
 8000632:	f007 fe53 	bl	80082dc <MX_USB_DEVICE_Init>


	MX_SPI1_Init();
 8000636:	f000 f903 	bl	8000840 <MX_SPI1_Init>
	uint8_t status;
	status = setupADS1256();	//should be 0x30 for this particular piece of AD1256 (ID)
 800063a:	f7ff fddd 	bl	80001f8 <setupADS1256>
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]

	BLED(0)	//end INIT
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000648:	4832      	ldr	r0, [pc, #200]	; (8000714 <main+0x104>)
 800064a:	f000 fefa 	bl	8001442 <HAL_GPIO_WritePin>

	tick_1s = HAL_GetTick();	//start 1s timer
 800064e:	f000 fbef 	bl	8000e30 <HAL_GetTick>
 8000652:	4603      	mov	r3, r0
 8000654:	4a30      	ldr	r2, [pc, #192]	; (8000718 <main+0x108>)
 8000656:	6013      	str	r3, [r2, #0]

	while (1){


		if (usb_status ==  USBD_OK){
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <main+0x10c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d124      	bne.n	80006aa <main+0x9a>
			if (!is_REC_ON()) {
 8000660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000664:	482b      	ldr	r0, [pc, #172]	; (8000714 <main+0x104>)
 8000666:	f000 f9a5 	bl	80009b4 <HAL_GPIO_GetOutputPin>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d10a      	bne.n	8000686 <main+0x76>
				if (startSampling() == 0){	//if succeeded starting
 8000670:	f7ff ff32 	bl	80004d8 <startSampling>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d105      	bne.n	8000686 <main+0x76>
					REC_ON()
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	4824      	ldr	r0, [pc, #144]	; (8000714 <main+0x104>)
 8000682:	f000 fede 	bl	8001442 <HAL_GPIO_WritePin>
				}
			}
			if (flagBufferFull){  //ADC receive ring buffer full
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <main+0x110>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00a      	beq.n	80006a4 <main+0x94>
				flagBufferFull = 0;
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <main+0x110>)
 8000690:	2200      	movs	r2, #0
 8000692:	801a      	strh	r2, [r3, #0]
				transmitArrayOverUSB(&adcDataArray);
 8000694:	4823      	ldr	r0, [pc, #140]	; (8000724 <main+0x114>)
 8000696:	f000 f849 	bl	800072c <transmitArrayOverUSB>
				toggle_GLED()
 800069a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069e:	481d      	ldr	r0, [pc, #116]	; (8000714 <main+0x104>)
 80006a0:	f000 fee7 	bl	8001472 <HAL_GPIO_TogglePin>
			}
			keepBlueLEDFlashing();
 80006a4:	f7ff ff5c 	bl	8000560 <keepBlueLEDFlashing>
 80006a8:	e030      	b.n	800070c <main+0xfc>
		}
		else { //if USB status not OK
			if (!is_REC_ON()) {	//and if it was not connected before
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	4819      	ldr	r0, [pc, #100]	; (8000714 <main+0x104>)
 80006b0:	f000 f980 	bl	80009b4 <HAL_GPIO_GetOutputPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d117      	bne.n	80006ea <main+0xda>
				if (HAL_GetTick() - tick_1s > 1000){ //check if 1s ellapsed
 80006ba:	f000 fbb9 	bl	8000e30 <HAL_GetTick>
 80006be:	4602      	mov	r2, r0
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <main+0x108>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006ca:	d919      	bls.n	8000700 <main+0xf0>
					usb_status = CDC_Transmit_FS(&status, 1);	//transmit msg
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f007 fec5 	bl	8008460 <CDC_Transmit_FS>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <main+0x10c>)
 80006dc:	701a      	strb	r2, [r3, #0]
					tick_1s = HAL_GetTick();	//update timer with present value of time
 80006de:	f000 fba7 	bl	8000e30 <HAL_GetTick>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <main+0x108>)
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	e00a      	b.n	8000700 <main+0xf0>
				}
			}
			else {	//but it was recording and lost somehow USB connection
				REC_OFF()
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <main+0x104>)
 80006f2:	f000 fea6 	bl	8001442 <HAL_GPIO_WritePin>
				HAL_NVIC_DisableIRQ(EXTI0_IRQn); //disable DRDY interrupt
 80006f6:	2006      	movs	r0, #6
 80006f8:	f000 fced 	bl	80010d6 <HAL_NVIC_DisableIRQ>
				stopSampling();
 80006fc:	f7ff fdd8 	bl	80002b0 <stopSampling>
			}
			BLED(0)
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <main+0x104>)
 8000708:	f000 fe9b 	bl	8001442 <HAL_GPIO_WritePin>
		}

		HAL_IWDG_Refresh(&hiwdg);
 800070c:	4806      	ldr	r0, [pc, #24]	; (8000728 <main+0x118>)
 800070e:	f000 ff23 	bl	8001558 <HAL_IWDG_Refresh>
		if (usb_status ==  USBD_OK){
 8000712:	e7a1      	b.n	8000658 <main+0x48>
 8000714:	40010c00 	.word	0x40010c00
 8000718:	20000268 	.word	0x20000268
 800071c:	20000000 	.word	0x20000000
 8000720:	20000674 	.word	0x20000674
 8000724:	20000270 	.word	0x20000270
 8000728:	200001f8 	.word	0x200001f8

0800072c <transmitArrayOverUSB>:




// Function to transmit variable length int32_t array over USB CDC
void transmitArrayOverUSB(AdcDataArrayStruct *arr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    int8_t INM;
    int32_t data[ADCBUFLEN];
} AdcDataArrayStruct;*/

    // Calculate the total size of the data to be sent
    size_t totalSize = 2*sizeof(uint16_t) + 2*sizeof(int8_t) + arr->length*sizeof(int32_t);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	3306      	adds	r3, #6
 800073c:	60fb      	str	r3, [r7, #12]

    // Transmit the data over USB CDC
    CDC_Transmit_FS((uint8_t *)arr, totalSize);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	b29b      	uxth	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f007 fe8b 	bl	8008460 <CDC_Transmit_FS>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b094      	sub	sp, #80	; 0x50
 8000756:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000758:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075c:	2228      	movs	r2, #40	; 0x28
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f008 fba2 	bl	8008eaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000782:	2309      	movs	r3, #9
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 fc51 	bl	8003054 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007b8:	f000 f912 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2102      	movs	r1, #2
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 febd 	bl	8003558 <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007e4:	f000 f8fc 	bl	80009e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007e8:	2310      	movs	r3, #16
 80007ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 f80c 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007fe:	f000 f8ef 	bl	80009e0 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	; 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_IWDG_Init+0x2c>)
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <MX_IWDG_Init+0x30>)
 8000814:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_IWDG_Init+0x2c>)
 8000818:	2203      	movs	r2, #3
 800081a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_IWDG_Init+0x2c>)
 800081e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000822:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_IWDG_Init+0x2c>)
 8000826:	f000 fe55 	bl	80014d4 <HAL_IWDG_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000830:	f000 f8d6 	bl	80009e0 <Error_Handler>
  }

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200001f8 	.word	0x200001f8
 800083c:	40003000 	.word	0x40003000

08000840 <MX_SPI1_Init>:
/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

	hspi1.Instance = SPI1;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <MX_SPI1_Init+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_SPI1_Init+0x64>)
 800084c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000850:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000866:	2201      	movs	r2, #1
 8000868:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_SPI1_Init+0x64>)
 800086c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000870:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //1.12MHz
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000874:	2238      	movs	r2, #56	; 0x38
 8000876:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_SPI1_Init+0x64>)
 800088c:	220a      	movs	r2, #10
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK){
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000892:	f003 f873 	bl	800397c <HAL_SPI_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_SPI1_Init+0x60>
		Error_Handler();
 800089c:	f000 f8a0 	bl	80009e0 <Error_Handler>
	}

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000204 	.word	0x20000204
 80008a8:	40013000 	.word	0x40013000

080008ac <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c0:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a37      	ldr	r2, [pc, #220]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0320 	and.w	r3, r3, #32
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a2b      	ldr	r2, [pc, #172]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008f6:	f043 0308 	orr.w	r3, r3, #8
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]



   /*Configure GPIOA pin 4 NSS (chip select) */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000908:	2310      	movs	r3, #16
 800090a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090c:	2312      	movs	r3, #18
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	4822      	ldr	r0, [pc, #136]	; (80009a8 <MX_GPIO_Init+0xfc>)
 8000920:	f000 fbf4 	bl	800110c <HAL_GPIO_Init>

    /*Configure GPIOA pin 6 MISO */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	481b      	ldr	r0, [pc, #108]	; (80009a8 <MX_GPIO_Init+0xfc>)
 800093c:	f000 fbe6 	bl	800110c <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_EXTI0_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0;				//INT0: DRDY
 8000940:	2301      	movs	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_GPIO_Init+0x100>)
 8000946:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4619      	mov	r1, r3
 8000952:	4817      	ldr	r0, [pc, #92]	; (80009b0 <MX_GPIO_Init+0x104>)
 8000954:	f000 fbda 	bl	800110c <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); //B12 blue LED (1: off, 0: on)
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x104>)
 8000960:	f000 fd6f 	bl	8001442 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //B13 red LED
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096a:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_GPIO_Init+0x104>)
 800096c:	f000 fd69 	bl	8001442 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); //B15 green LED
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_GPIO_Init+0x104>)
 8000978:	f000 fd63 	bl	8001442 <HAL_GPIO_WritePin>
	/*Configure GPIO pins : PB13 and PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 800097c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000980:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2302      	movs	r3, #2
 800098c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	4619      	mov	r1, r3
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_GPIO_Init+0x104>)
 8000996:	f000 fbb9 	bl	800110c <HAL_GPIO_Init>

}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010800 	.word	0x40010800
 80009ac:	10210000 	.word	0x10210000
 80009b0:	40010c00 	.word	0x40010c00

080009b4 <HAL_GPIO_GetOutputPin>:

GPIO_PinState HAL_GPIO_GetOutputPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  uint32_t odr = GPIOx->ODR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60fb      	str	r3, [r7, #12]

  return (GPIO_PinState)((odr & GPIO_Pin) != 0);
 80009c6:	887a      	ldrh	r2, [r7, #2]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf14      	ite	ne
 80009d0:	2301      	movne	r3, #1
 80009d2:	2300      	moveq	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_MspInit+0x5c>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <HAL_MspInit+0x5c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_MspInit+0x5c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x5c>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_MspInit+0x5c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x5c>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_MspInit+0x60>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_MspInit+0x60>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010000 	.word	0x40010000

08000a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <HAL_SPI_MspInit+0x88>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d12f      	bne.n	8000ad0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000aa0:	23b0      	movs	r3, #176	; 0xb0
 8000aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000ab4:	f000 fb2a 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000acc:	f000 fb1e 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40013000 	.word	0x40013000
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010800 	.word	0x40010800

08000ae4 <EXTI0_IRQHandler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void EXTI0_IRQHandler(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 fcdb 	bl	80014a4 <HAL_GPIO_EXTI_IRQHandler>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_EXTI_Callback>:

 /* DATA READY INTTERUPT FROM ADS1256 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
	//static int32_t testSignal;
	//will be called on a falling edge of DRDY
	if (GPIO_Pin == GPIO_PIN_0){
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d12d      	bne.n	8000b60 <HAL_GPIO_EXTI_Callback+0x6c>
		HAL_SPI_Receive(&hspi1, adcData, 3, HAL_MAX_DELAY); // Receive 3 bytes of data
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	2203      	movs	r2, #3
 8000b0a:	4917      	ldr	r1, [pc, #92]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b0c:	4817      	ldr	r0, [pc, #92]	; (8000b6c <HAL_GPIO_EXTI_Callback+0x78>)
 8000b0e:	f003 f8fc 	bl	8003d0a <HAL_SPI_Receive>

		//store in a ring buffer
		adcDataArray.data[idx] = concatenateToInt32(adcData);
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b14:	681c      	ldr	r4, [r3, #0]
 8000b16:	4814      	ldr	r0, [pc, #80]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b18:	f7ff fcba 	bl	8000490 <concatenateToInt32>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	4915      	ldr	r1, [pc, #84]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b20:	1ca3      	adds	r3, r4, #2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//adcDataArray.data[idx] = testSignal;
		//testSignal--;

		idx++;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b2e:	6013      	str	r3, [r2, #0]
		if(idx >= bufferSizes[sps_index]){
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x88>)
 8000b38:	5c9b      	ldrb	r3, [r3, r2]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d80d      	bhi.n	8000b60 <HAL_GPIO_EXTI_Callback+0x6c>
			idx=0;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
			adcDataArray.length = bufferSizes[sps_index];
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x88>)
 8000b52:	5c9b      	ldrb	r3, [r3, r2]
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b58:	801a      	strh	r2, [r3, #0]
			flagBufferFull = 1;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	2000026c 	.word	0x2000026c
 8000b6c:	20000204 	.word	0x20000204
 8000b70:	20000670 	.word	0x20000670
 8000b74:	20000270 	.word	0x20000270
 8000b78:	20000001 	.word	0x20000001
 8000b7c:	08009c2c 	.word	0x08009c2c
 8000b80:	20000674 	.word	0x20000674

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f000 f91f 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000bda:	f000 fdf1 	bl	80017c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20001348 	.word	0x20001348

08000be8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e00a      	b.n	8000c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfa:	f3af 8000 	nop.w
 8000bfe:	4601      	mov	r1, r0
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	b2ca      	uxtb	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf0      	blt.n	8000bfa <_read+0x12>
  }

  return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e009      	b.n	8000c48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf1      	blt.n	8000c34 <_write+0x12>
  }
  return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_close>:

int _close(int file)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c80:	605a      	str	r2, [r3, #4]
  return 0;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <_isatty>:

int _isatty(int file)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
	...

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cec:	f008 f92c 	bl	8008f48 <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20005000 	.word	0x20005000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	20000678 	.word	0x20000678
 8000d24:	200019a8 	.word	0x200019a8

08000d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d34:	f7ff fff8 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d3a:	490c      	ldr	r1, [pc, #48]	; (8000d6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d3c:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d50:	4c09      	ldr	r4, [pc, #36]	; (8000d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f008 f8f9 	bl	8008f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d62:	f7ff fc55 	bl	8000610 <main>
  bx lr
 8000d66:	4770      	bx	lr
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000d70:	08009c9c 	.word	0x08009c9c
  ldr r2, =_sbss
 8000d74:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000d78:	200019a4 	.word	0x200019a4

08000d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_2_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x28>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x28>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f96b 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	200f      	movs	r0, #15
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fe26 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f991 	bl	80010f2 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f94b 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000004 	.word	0x20000004
 8000e04:	2000000c 	.word	0x2000000c
 8000e08:	20000008 	.word	0x20000008

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x20>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <HAL_IncTick+0x20>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	2000067c 	.word	0x2000067c

08000e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <HAL_GetTick+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	2000067c 	.word	0x2000067c

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff fff0 	bl	8000e30 <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffe0 	bl	8000e30 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000000c 	.word	0x2000000c

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4906      	ldr	r1, [pc, #24]	; (8000f24 <__NVIC_EnableIRQ+0x34>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db12      	blt.n	8000f60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	490a      	ldr	r1, [pc, #40]	; (8000f6c <__NVIC_DisableIRQ+0x44>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	3320      	adds	r3, #32
 8000f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f54:	f3bf 8f4f 	dsb	sy
}
 8000f58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f5a:	f3bf 8f6f 	isb	sy
}
 8000f5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff90 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff09 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff1e 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff90 	bl	8000fc4 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5f 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff11 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff1f 	bl	8000f28 <__NVIC_DisableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff94 	bl	8001028 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b08b      	sub	sp, #44	; 0x2c
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e169      	b.n	80013f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001120:	2201      	movs	r2, #1
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8158 	bne.w	80013ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a9a      	ldr	r2, [pc, #616]	; (80013ac <HAL_GPIO_Init+0x2a0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d05e      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 8001148:	4a98      	ldr	r2, [pc, #608]	; (80013ac <HAL_GPIO_Init+0x2a0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d875      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 800114e:	4a98      	ldr	r2, [pc, #608]	; (80013b0 <HAL_GPIO_Init+0x2a4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d058      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 8001154:	4a96      	ldr	r2, [pc, #600]	; (80013b0 <HAL_GPIO_Init+0x2a4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d86f      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 800115a:	4a96      	ldr	r2, [pc, #600]	; (80013b4 <HAL_GPIO_Init+0x2a8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d052      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 8001160:	4a94      	ldr	r2, [pc, #592]	; (80013b4 <HAL_GPIO_Init+0x2a8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d869      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 8001166:	4a94      	ldr	r2, [pc, #592]	; (80013b8 <HAL_GPIO_Init+0x2ac>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d04c      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 800116c:	4a92      	ldr	r2, [pc, #584]	; (80013b8 <HAL_GPIO_Init+0x2ac>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d863      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 8001172:	4a92      	ldr	r2, [pc, #584]	; (80013bc <HAL_GPIO_Init+0x2b0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d046      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 8001178:	4a90      	ldr	r2, [pc, #576]	; (80013bc <HAL_GPIO_Init+0x2b0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d85d      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 800117e:	2b12      	cmp	r3, #18
 8001180:	d82a      	bhi.n	80011d8 <HAL_GPIO_Init+0xcc>
 8001182:	2b12      	cmp	r3, #18
 8001184:	d859      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <HAL_GPIO_Init+0x80>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	08001207 	.word	0x08001207
 8001190:	080011e1 	.word	0x080011e1
 8001194:	080011f3 	.word	0x080011f3
 8001198:	08001235 	.word	0x08001235
 800119c:	0800123b 	.word	0x0800123b
 80011a0:	0800123b 	.word	0x0800123b
 80011a4:	0800123b 	.word	0x0800123b
 80011a8:	0800123b 	.word	0x0800123b
 80011ac:	0800123b 	.word	0x0800123b
 80011b0:	0800123b 	.word	0x0800123b
 80011b4:	0800123b 	.word	0x0800123b
 80011b8:	0800123b 	.word	0x0800123b
 80011bc:	0800123b 	.word	0x0800123b
 80011c0:	0800123b 	.word	0x0800123b
 80011c4:	0800123b 	.word	0x0800123b
 80011c8:	0800123b 	.word	0x0800123b
 80011cc:	0800123b 	.word	0x0800123b
 80011d0:	080011e9 	.word	0x080011e9
 80011d4:	080011fd 	.word	0x080011fd
 80011d8:	4a79      	ldr	r2, [pc, #484]	; (80013c0 <HAL_GPIO_Init+0x2b4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011de:	e02c      	b.n	800123a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e029      	b.n	800123c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	3304      	adds	r3, #4
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e024      	b.n	800123c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	3308      	adds	r3, #8
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e01f      	b.n	800123c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	330c      	adds	r3, #12
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e01a      	b.n	800123c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800120e:	2304      	movs	r3, #4
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e013      	b.n	800123c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d105      	bne.n	8001228 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800121c:	2308      	movs	r3, #8
 800121e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	611a      	str	r2, [r3, #16]
          break;
 8001226:	e009      	b.n	800123c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001228:	2308      	movs	r3, #8
 800122a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	615a      	str	r2, [r3, #20]
          break;
 8001232:	e003      	b.n	800123c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x130>
          break;
 800123a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2bff      	cmp	r3, #255	; 0xff
 8001240:	d801      	bhi.n	8001246 <HAL_GPIO_Init+0x13a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	e001      	b.n	800124a <HAL_GPIO_Init+0x13e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3304      	adds	r3, #4
 800124a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2bff      	cmp	r3, #255	; 0xff
 8001250:	d802      	bhi.n	8001258 <HAL_GPIO_Init+0x14c>
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x152>
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	3b08      	subs	r3, #8
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	210f      	movs	r1, #15
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	401a      	ands	r2, r3
 8001270:	6a39      	ldr	r1, [r7, #32]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	431a      	orrs	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 80b1 	beq.w	80013ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_GPIO_Init+0x2b8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_GPIO_Init+0x2b8>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <HAL_GPIO_Init+0x2b8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012a4:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <HAL_GPIO_Init+0x2bc>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a40      	ldr	r2, [pc, #256]	; (80013cc <HAL_GPIO_Init+0x2c0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d013      	beq.n	80012f8 <HAL_GPIO_Init+0x1ec>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3f      	ldr	r2, [pc, #252]	; (80013d0 <HAL_GPIO_Init+0x2c4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d00d      	beq.n	80012f4 <HAL_GPIO_Init+0x1e8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3e      	ldr	r2, [pc, #248]	; (80013d4 <HAL_GPIO_Init+0x2c8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d007      	beq.n	80012f0 <HAL_GPIO_Init+0x1e4>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <HAL_GPIO_Init+0x2cc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d101      	bne.n	80012ec <HAL_GPIO_Init+0x1e0>
 80012e8:	2303      	movs	r3, #3
 80012ea:	e006      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e004      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e002      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012f8:	2300      	movs	r3, #0
 80012fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fc:	f002 0203 	and.w	r2, r2, #3
 8001300:	0092      	lsls	r2, r2, #2
 8001302:	4093      	lsls	r3, r2
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800130a:	492f      	ldr	r1, [pc, #188]	; (80013c8 <HAL_GPIO_Init+0x2bc>)
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	492c      	ldr	r1, [pc, #176]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	43db      	mvns	r3, r3
 800133a:	4928      	ldr	r1, [pc, #160]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	4922      	ldr	r1, [pc, #136]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	60cb      	str	r3, [r1, #12]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	491e      	ldr	r1, [pc, #120]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001364:	4013      	ands	r3, r2
 8001366:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4918      	ldr	r1, [pc, #96]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	43db      	mvns	r3, r3
 800138a:	4914      	ldr	r1, [pc, #80]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800138c:	4013      	ands	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d021      	beq.n	80013e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	490e      	ldr	r1, [pc, #56]	; (80013dc <HAL_GPIO_Init+0x2d0>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
 80013a8:	e021      	b.n	80013ee <HAL_GPIO_Init+0x2e2>
 80013aa:	bf00      	nop
 80013ac:	10320000 	.word	0x10320000
 80013b0:	10310000 	.word	0x10310000
 80013b4:	10220000 	.word	0x10220000
 80013b8:	10210000 	.word	0x10210000
 80013bc:	10120000 	.word	0x10120000
 80013c0:	10110000 	.word	0x10110000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40010800 	.word	0x40010800
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	40011000 	.word	0x40011000
 80013d8:	40011400 	.word	0x40011400
 80013dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_GPIO_Init+0x304>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	4909      	ldr	r1, [pc, #36]	; (8001410 <HAL_GPIO_Init+0x304>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f47f ae8e 	bne.w	8001120 <HAL_GPIO_Init+0x14>
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	372c      	adds	r7, #44	; 0x2c
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	887b      	ldrh	r3, [r7, #2]
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	e001      	b.n	8001436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	807b      	strh	r3, [r7, #2]
 800144e:	4613      	mov	r3, r2
 8001450:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001452:	787b      	ldrb	r3, [r7, #1]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001458:	887a      	ldrh	r2, [r7, #2]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800145e:	e003      	b.n	8001468 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	041a      	lsls	r2, r3, #16
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	611a      	str	r2, [r3, #16]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	041a      	lsls	r2, r3, #16
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43d9      	mvns	r1, r3
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	400b      	ands	r3, r1
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	611a      	str	r2, [r3, #16]
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d006      	beq.n	80014c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fb16 	bl	8000af4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40010400 	.word	0x40010400

080014d4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e034      	b.n	8001550 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80014ee:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f245 5255 	movw	r2, #21845	; 0x5555
 80014f8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6852      	ldr	r2, [r2, #4]
 8001502:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6892      	ldr	r2, [r2, #8]
 800150c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800150e:	f7ff fc8f 	bl	8000e30 <HAL_GetTick>
 8001512:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001514:	e00f      	b.n	8001536 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001516:	f7ff fc8b 	bl	8000e30 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b27      	cmp	r3, #39	; 0x27
 8001522:	d908      	bls.n	8001536 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e00c      	b.n	8001550 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1e8      	bne.n	8001516 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800154c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001568:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001578:	b08b      	sub	sp, #44	; 0x2c
 800157a:	af06      	add	r7, sp, #24
 800157c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0f1      	b.n	800176c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d106      	bne.n	80015a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f007 f893 	bl	80086c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2203      	movs	r2, #3
 80015a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 ff94 	bl	80044dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	687e      	ldr	r6, [r7, #4]
 80015bc:	466d      	mov	r5, sp
 80015be:	f106 0410 	add.w	r4, r6, #16
 80015c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	602b      	str	r3, [r5, #0]
 80015ca:	1d33      	adds	r3, r6, #4
 80015cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ce:	6838      	ldr	r0, [r7, #0]
 80015d0:	f002 ff5e 	bl	8004490 <USB_CoreInit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0c2      	b.n	800176c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 ff8f 	bl	8004510 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e040      	b.n	800167a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	3301      	adds	r3, #1
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	3303      	adds	r3, #3
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	3338      	adds	r3, #56	; 0x38
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	333c      	adds	r3, #60	; 0x3c
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3340      	adds	r3, #64	; 0x40
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	3301      	adds	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	d3b9      	bcc.n	80015f8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e044      	b.n	8001714 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	440b      	add	r3, r1
 8001698:	f203 1369 	addw	r3, r3, #361	; 0x169
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	440b      	add	r3, r1
 80016da:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	3301      	adds	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d3b5      	bcc.n	800168a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	687e      	ldr	r6, [r7, #4]
 8001726:	466d      	mov	r5, sp
 8001728:	f106 0410 	add.w	r4, r6, #16
 800172c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	602b      	str	r3, [r5, #0]
 8001734:	1d33      	adds	r3, r6, #4
 8001736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f002 fef5 	bl	8004528 <USB_DevInit>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e00d      	b.n	800176c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f005 f976 	bl	8006a56 <USB_DevDisconnect>

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001774 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_PCD_Start+0x16>
 8001786:	2302      	movs	r3, #2
 8001788:	e016      	b.n	80017b8 <HAL_PCD_Start+0x44>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fe8a 	bl	80044b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800179c:	2101      	movs	r1, #1
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f007 fa2d 	bl	8008bfe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f005 f94a 	bl	8006a42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f005 f94c 	bl	8006a6a <USB_ReadInterrupts>
 80017d2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fb1b 	bl	8001e1a <PCD_EP_ISR_Handler>

    return;
 80017e4:	e119      	b.n	8001a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001802:	b292      	uxth	r2, r2
 8001804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f007 f800 	bl	800880e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800180e:	2100      	movs	r1, #0
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f905 	bl	8001a20 <HAL_PCD_SetAddress>

    return;
 8001816:	e100      	b.n	8001a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00c      	beq.n	800183c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800182a:	b29a      	uxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001834:	b292      	uxth	r2, r2
 8001836:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800183a:	e0ee      	b.n	8001a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00c      	beq.n	8001860 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184e:	b29a      	uxth	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001858:	b292      	uxth	r2, r2
 800185a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800185e:	e0dc      	b.n	8001a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d027      	beq.n	80018ba <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001872:	b29a      	uxth	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0204 	bic.w	r2, r2, #4
 800187c:	b292      	uxth	r2, r2
 800187e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0208 	bic.w	r2, r2, #8
 8001894:	b292      	uxth	r2, r2
 8001896:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f006 fff0 	bl	8008880 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018b2:	b292      	uxth	r2, r2
 80018b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018b8:	e0af      	b.n	8001a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8083 	beq.w	80019cc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	77fb      	strb	r3, [r7, #31]
 80018ca:	e010      	b.n	80018ee <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	441a      	add	r2, r3
 80018d8:	7ffb      	ldrb	r3, [r7, #31]
 80018da:	8812      	ldrh	r2, [r2, #0]
 80018dc:	b292      	uxth	r2, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	3320      	adds	r3, #32
 80018e2:	443b      	add	r3, r7
 80018e4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	3301      	adds	r3, #1
 80018ec:	77fb      	strb	r3, [r7, #31]
 80018ee:	7ffb      	ldrb	r3, [r7, #31]
 80018f0:	2b07      	cmp	r3, #7
 80018f2:	d9eb      	bls.n	80018cc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	b292      	uxth	r2, r2
 8001908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	b292      	uxth	r2, r2
 8001920:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001924:	bf00      	nop
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800192e:	b29b      	uxth	r3, r3
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f6      	beq.n	8001926 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800194a:	b292      	uxth	r2, r2
 800194c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001950:	2300      	movs	r3, #0
 8001952:	77fb      	strb	r3, [r7, #31]
 8001954:	e00f      	b.n	8001976 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	4611      	mov	r1, r2
 800195e:	7ffa      	ldrb	r2, [r7, #31]
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	440a      	add	r2, r1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	3320      	adds	r3, #32
 8001968:	443b      	add	r3, r7
 800196a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800196e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001970:	7ffb      	ldrb	r3, [r7, #31]
 8001972:	3301      	adds	r3, #1
 8001974:	77fb      	strb	r3, [r7, #31]
 8001976:	7ffb      	ldrb	r3, [r7, #31]
 8001978:	2b07      	cmp	r3, #7
 800197a:	d9ec      	bls.n	8001956 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0208 	orr.w	r2, r2, #8
 800198e:	b292      	uxth	r2, r2
 8001990:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800199c:	b29a      	uxth	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a6:	b292      	uxth	r2, r2
 80019a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0204 	orr.w	r2, r2, #4
 80019be:	b292      	uxth	r2, r2
 80019c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f006 ff41 	bl	800884c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019ca:	e026      	b.n	8001a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00f      	beq.n	80019f6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019e8:	b292      	uxth	r2, r2
 80019ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f006 feff 	bl	80087f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019f4:	e011      	b.n	8001a1a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00c      	beq.n	8001a1a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a12:	b292      	uxth	r2, r2
 8001a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a18:	bf00      	nop
  }
}
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_PCD_SetAddress+0x1a>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e013      	b.n	8001a62 <HAL_PCD_SetAddress+0x42>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 ffe2 	bl	8006a1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	4608      	mov	r0, r1
 8001a74:	4611      	mov	r1, r2
 8001a76:	461a      	mov	r2, r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	70fb      	strb	r3, [r7, #3]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	803b      	strh	r3, [r7, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da0e      	bge.n	8001aae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	705a      	strb	r2, [r3, #1]
 8001aac:	e00e      	b.n	8001acc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	f003 0207 	and.w	r2, r3, #7
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ad8:	883a      	ldrh	r2, [r7, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	78ba      	ldrb	r2, [r7, #2]
 8001ae2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ae4:	78bb      	ldrb	r3, [r7, #2]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d102      	bne.n	8001af0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_PCD_EP_Open+0x94>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e00e      	b.n	8001b1c <HAL_PCD_EP_Open+0xb2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68f9      	ldr	r1, [r7, #12]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fd2b 	bl	8004568 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	da0e      	bge.n	8001b56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	705a      	strb	r2, [r3, #1]
 8001b54:	e00e      	b.n	8001b74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	f003 0207 	and.w	r2, r3, #7
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_PCD_EP_Close+0x6a>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e00e      	b.n	8001bac <HAL_PCD_EP_Close+0x88>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68f9      	ldr	r1, [r7, #12]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 f8a3 	bl	8004ce8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf4:	7afb      	ldrb	r3, [r7, #11]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6979      	ldr	r1, [r7, #20]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fa5a 	bl	80050c0 <USB_EPStartXfer>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	f003 0207 	and.w	r2, r3, #7
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c38:	681b      	ldr	r3, [r3, #0]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	460b      	mov	r3, r1
 8001c52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6979      	ldr	r1, [r7, #20]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fa0c 	bl	80050c0 <USB_EPStartXfer>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 0207 	and.w	r2, r3, #7
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d901      	bls.n	8001cd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04c      	b.n	8001d6a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	da0e      	bge.n	8001cf6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	705a      	strb	r2, [r3, #1]
 8001cf4:	e00c      	b.n	8001d10 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cf6:	78fa      	ldrb	r2, [r7, #3]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_PCD_EP_SetStall+0x7e>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e01c      	b.n	8001d6a <HAL_PCD_EP_SetStall+0xb8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fd6f 	bl	8006822 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d108      	bne.n	8001d60 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f004 fe94 	bl	8006a88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d901      	bls.n	8001d90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e040      	b.n	8001e12 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da0e      	bge.n	8001db6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	705a      	strb	r2, [r3, #1]
 8001db4:	e00e      	b.n	8001dd4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 0207 	and.w	r2, r3, #7
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_PCD_EP_ClrStall+0x82>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e00e      	b.n	8001e12 <HAL_PCD_EP_ClrStall+0xa0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fd5d 	bl	80068c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b096      	sub	sp, #88	; 0x58
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e22:	e3bf      	b.n	80025a4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001e3e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 8179 	bne.w	800213a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d152      	bne.n	8001efa <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e64:	81fb      	strh	r3, [r7, #14]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3328      	adds	r3, #40	; 0x28
 8001e7c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	3302      	adds	r3, #2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	441a      	add	r2, r3
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001eb8:	2100      	movs	r1, #0
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f006 fc7f 	bl	80087be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 836b 	beq.w	80025a4 <PCD_EP_ISR_Handler+0x78a>
 8001ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 8366 	bne.w	80025a4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b292      	uxth	r2, r2
 8001eec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ef8:	e354      	b.n	80025a4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f00:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d034      	beq.n	8001f82 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3306      	adds	r3, #6
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f004 fde6 	bl	8006b28 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f68:	4013      	ands	r3, r2
 8001f6a:	823b      	strh	r3, [r7, #16]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	8a3a      	ldrh	r2, [r7, #16]
 8001f72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f76:	b292      	uxth	r2, r2
 8001f78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f006 fbf2 	bl	8008764 <HAL_PCD_SetupStageCallback>
 8001f80:	e310      	b.n	80025a4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f82:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f280 830c 	bge.w	80025a4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f98:	4013      	ands	r3, r2
 8001f9a:	83fb      	strh	r3, [r7, #30]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	8bfa      	ldrh	r2, [r7, #30]
 8001fa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3306      	adds	r3, #6
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <PCD_EP_ISR_Handler+0x1f8>
 8001fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d015      	beq.n	8002012 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	6959      	ldr	r1, [r3, #20]
 8001fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f004 fd96 	bl	8006b28 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	441a      	add	r2, r3
 8002006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002008:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800200a:	2100      	movs	r1, #0
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f006 fbbb 	bl	8008788 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800201c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 82bd 	bne.w	80025a4 <PCD_EP_ISR_Handler+0x78a>
 800202a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800202e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002036:	f000 82b5 	beq.w	80025a4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	4413      	add	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002064:	b29a      	uxth	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b3e      	cmp	r3, #62	; 0x3e
 8002070:	d91d      	bls.n	80020ae <PCD_EP_ISR_Handler+0x294>
 8002072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	647b      	str	r3, [r7, #68]	; 0x44
 800207a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <PCD_EP_ISR_Handler+0x272>
 8002086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002088:	3b01      	subs	r3, #1
 800208a:	647b      	str	r3, [r7, #68]	; 0x44
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b29a      	uxth	r2, r3
 8002092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002094:	b29b      	uxth	r3, r3
 8002096:	029b      	lsls	r3, r3, #10
 8002098:	b29b      	uxth	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b29b      	uxth	r3, r3
 800209e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	801a      	strh	r2, [r3, #0]
 80020ac:	e026      	b.n	80020fc <PCD_EP_ISR_Handler+0x2e2>
 80020ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <PCD_EP_ISR_Handler+0x2b2>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	801a      	strh	r2, [r3, #0]
 80020ca:	e017      	b.n	80020fc <PCD_EP_ISR_Handler+0x2e2>
 80020cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
 80020d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <PCD_EP_ISR_Handler+0x2cc>
 80020e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e2:	3301      	adds	r3, #1
 80020e4:	647b      	str	r3, [r7, #68]	; 0x44
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	029b      	lsls	r3, r3, #10
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210c:	827b      	strh	r3, [r7, #18]
 800210e:	8a7b      	ldrh	r3, [r7, #18]
 8002110:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002114:	827b      	strh	r3, [r7, #18]
 8002116:	8a7b      	ldrh	r3, [r7, #18]
 8002118:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800211c:	827b      	strh	r3, [r7, #18]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	8a7b      	ldrh	r3, [r7, #18]
 8002124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800212c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	b29b      	uxth	r3, r3
 8002136:	8013      	strh	r3, [r2, #0]
 8002138:	e234      	b.n	80025a4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800214e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002152:	2b00      	cmp	r3, #0
 8002154:	f280 80fc 	bge.w	8002350 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	b29a      	uxth	r2, r3
 800216a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800216e:	4013      	ands	r3, r2
 8002170:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800218a:	b292      	uxth	r2, r2
 800218c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800218e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a6:	7b1b      	ldrb	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d125      	bne.n	80021f8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	3306      	adds	r3, #6
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80021d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8092 	beq.w	8002306 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e8:	6959      	ldr	r1, [r3, #20]
 80021ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ec:	88da      	ldrh	r2, [r3, #6]
 80021ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80021f2:	f004 fc99 	bl	8006b28 <USB_ReadPMA>
 80021f6:	e086      	b.n	8002306 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fa:	78db      	ldrb	r3, [r3, #3]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d10a      	bne.n	8002216 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002200:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002204:	461a      	mov	r2, r3
 8002206:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f9d9 	bl	80025c0 <HAL_PCD_EP_DB_Receive>
 800220e:	4603      	mov	r3, r0
 8002210:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002214:	e077      	b.n	8002306 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800222c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002230:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800224a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800224e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002252:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002256:	b29b      	uxth	r3, r3
 8002258:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d024      	beq.n	80022be <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	3302      	adds	r3, #2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80022a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d02e      	beq.n	8002306 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ae:	6959      	ldr	r1, [r3, #20]
 80022b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b2:	891a      	ldrh	r2, [r3, #8]
 80022b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022b8:	f004 fc36 	bl	8006b28 <USB_ReadPMA>
 80022bc:	e023      	b.n	8002306 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	3306      	adds	r3, #6
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80022ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f8:	6959      	ldr	r1, [r3, #20]
 80022fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fc:	895a      	ldrh	r2, [r3, #10]
 80022fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002302:	f004 fc11 	bl	8006b28 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800230e:	441a      	add	r2, r3
 8002310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002312:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800231c:	441a      	add	r2, r3
 800231e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002320:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <PCD_EP_ISR_Handler+0x51c>
 800232a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800232e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	429a      	cmp	r2, r3
 8002334:	d206      	bcs.n	8002344 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f006 fa23 	bl	8008788 <HAL_PCD_DataOutStageCallback>
 8002342:	e005      	b.n	8002350 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800234a:	4618      	mov	r0, r3
 800234c:	f002 feb8 	bl	80050c0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002350:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8123 	beq.w	80025a4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800235e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80023a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80023ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b0:	78db      	ldrb	r3, [r3, #3]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	f040 80a2 	bne.w	80024fc <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80023b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c0:	7b1b      	ldrb	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8093 	beq.w	80024ee <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d046      	beq.n	8002462 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d6:	785b      	ldrb	r3, [r3, #1]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d126      	bne.n	800242a <PCD_EP_ISR_Handler+0x610>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	4413      	add	r3, r2
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	011a      	lsls	r2, r3, #4
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	4413      	add	r3, r2
 80023fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240e:	b29a      	uxth	r2, r3
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002422:	b29a      	uxth	r2, r3
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	801a      	strh	r2, [r3, #0]
 8002428:	e061      	b.n	80024ee <PCD_EP_ISR_Handler+0x6d4>
 800242a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242c:	785b      	ldrb	r3, [r3, #1]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d15d      	bne.n	80024ee <PCD_EP_ISR_Handler+0x6d4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002440:	b29b      	uxth	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	4413      	add	r3, r2
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	011a      	lsls	r2, r3, #4
 8002450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002452:	4413      	add	r3, r2
 8002454:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	2200      	movs	r2, #0
 800245e:	801a      	strh	r2, [r3, #0]
 8002460:	e045      	b.n	80024ee <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d126      	bne.n	80024be <PCD_EP_ISR_Handler+0x6a4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002484:	4413      	add	r3, r2
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
 8002488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	011a      	lsls	r2, r3, #4
 800248e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002490:	4413      	add	r3, r2
 8002492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	801a      	strh	r2, [r3, #0]
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	e017      	b.n	80024ee <PCD_EP_ISR_Handler+0x6d4>
 80024be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d113      	bne.n	80024ee <PCD_EP_ISR_Handler+0x6d4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d4:	4413      	add	r3, r2
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	011a      	lsls	r2, r3, #4
 80024de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e0:	4413      	add	r3, r2
 80024e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ea:	2200      	movs	r2, #0
 80024ec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f006 f962 	bl	80087be <HAL_PCD_DataInStageCallback>
 80024fa:	e053      	b.n	80025a4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80024fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d146      	bne.n	8002596 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	3302      	adds	r3, #2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002530:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800253c:	429a      	cmp	r2, r3
 800253e:	d907      	bls.n	8002550 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002548:	1ad2      	subs	r2, r2, r3
 800254a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254c:	619a      	str	r2, [r3, #24]
 800254e:	e002      	b.n	8002556 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002552:	2200      	movs	r2, #0
 8002554:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800255e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f006 f92a 	bl	80087be <HAL_PCD_DataInStageCallback>
 800256a:	e01b      	b.n	80025a4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800256c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002574:	441a      	add	r2, r3
 8002576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002578:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800257a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002582:	441a      	add	r2, r3
 8002584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002586:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fd96 	bl	80050c0 <USB_EPStartXfer>
 8002594:	e006      	b.n	80025a4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002596:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800259a:	461a      	mov	r2, r3
 800259c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f91b 	bl	80027da <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	b21b      	sxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f6ff ac37 	blt.w	8001e24 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3758      	adds	r7, #88	; 0x58
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d07e      	beq.n	80026d6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	3302      	adds	r3, #2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002600:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	8b7b      	ldrh	r3, [r7, #26]
 8002608:	429a      	cmp	r2, r3
 800260a:	d306      	bcc.n	800261a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	8b7b      	ldrh	r3, [r7, #26]
 8002612:	1ad2      	subs	r2, r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	619a      	str	r2, [r3, #24]
 8002618:	e002      	b.n	8002620 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d123      	bne.n	8002670 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	833b      	strh	r3, [r7, #24]
 8002644:	8b3b      	ldrh	r3, [r7, #24]
 8002646:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800264a:	833b      	strh	r3, [r7, #24]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	441a      	add	r2, r3
 800265a:	8b3b      	ldrh	r3, [r7, #24]
 800265c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266c:	b29b      	uxth	r3, r3
 800266e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01f      	beq.n	80026ba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	82fb      	strh	r3, [r7, #22]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	441a      	add	r2, r3
 80026a4:	8afb      	ldrh	r3, [r7, #22]
 80026a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026ba:	8b7b      	ldrh	r3, [r7, #26]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8087 	beq.w	80027d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6959      	ldr	r1, [r3, #20]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	891a      	ldrh	r2, [r3, #8]
 80026ce:	8b7b      	ldrh	r3, [r7, #26]
 80026d0:	f004 fa2a 	bl	8006b28 <USB_ReadPMA>
 80026d4:	e07c      	b.n	80027d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	3306      	adds	r3, #6
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	8b7b      	ldrh	r3, [r7, #26]
 8002706:	429a      	cmp	r2, r3
 8002708:	d306      	bcc.n	8002718 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	8b7b      	ldrh	r3, [r7, #26]
 8002710:	1ad2      	subs	r2, r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	619a      	str	r2, [r3, #24]
 8002716:	e002      	b.n	800271e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d123      	bne.n	800276e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800273c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002740:	83fb      	strh	r3, [r7, #30]
 8002742:	8bfb      	ldrh	r3, [r7, #30]
 8002744:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002748:	83fb      	strh	r3, [r7, #30]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	441a      	add	r2, r3
 8002758:	8bfb      	ldrh	r3, [r7, #30]
 800275a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800275e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276a:	b29b      	uxth	r3, r3
 800276c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11f      	bne.n	80027b8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	83bb      	strh	r3, [r7, #28]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	441a      	add	r2, r3
 80027a2:	8bbb      	ldrh	r3, [r7, #28]
 80027a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027b8:	8b7b      	ldrh	r3, [r7, #26]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6959      	ldr	r1, [r3, #20]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	895a      	ldrh	r2, [r3, #10]
 80027ca:	8b7b      	ldrh	r3, [r7, #26]
 80027cc:	f004 f9ac 	bl	8006b28 <USB_ReadPMA>
    }
  }

  return count;
 80027d0:	8b7b      	ldrh	r3, [r7, #26]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b0a4      	sub	sp, #144	; 0x90
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	4613      	mov	r3, r2
 80027e6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 81dd 	beq.w	8002bae <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	3302      	adds	r3, #2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800281c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	699a      	ldr	r2, [r3, #24]
 8002824:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002828:	429a      	cmp	r2, r3
 800282a:	d907      	bls.n	800283c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002834:	1ad2      	subs	r2, r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	619a      	str	r2, [r3, #24]
 800283a:	e002      	b.n	8002842 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 80b9 	bne.w	80029be <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d126      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	4413      	add	r3, r2
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	011a      	lsls	r2, r3, #4
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	4413      	add	r3, r2
 8002876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002886:	b29a      	uxth	r2, r3
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800289a:	b29a      	uxth	r2, r3
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	e01a      	b.n	80028d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d116      	bne.n	80028d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028be:	4413      	add	r3, r2
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	011a      	lsls	r2, r3, #4
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	4413      	add	r3, r2
 80028cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	2200      	movs	r2, #0
 80028d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	785b      	ldrb	r3, [r3, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d126      	bne.n	8002934 <HAL_PCD_EP_DB_Transmit+0x15a>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	011a      	lsls	r2, r3, #4
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002918:	b29a      	uxth	r2, r3
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	801a      	strh	r2, [r3, #0]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800292c:	b29a      	uxth	r2, r3
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	801a      	strh	r2, [r3, #0]
 8002932:	e017      	b.n	8002964 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d113      	bne.n	8002964 <HAL_PCD_EP_DB_Transmit+0x18a>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	4413      	add	r3, r2
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	011a      	lsls	r2, r3, #4
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	4413      	add	r3, r2
 8002958:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2200      	movs	r2, #0
 8002962:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f005 ff27 	bl	80087be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 82fc 	beq.w	8002f74 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	82fb      	strh	r3, [r7, #22]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	8afb      	ldrh	r3, [r7, #22]
 80029a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	8013      	strh	r3, [r2, #0]
 80029bc:	e2da      	b.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d021      	beq.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	441a      	add	r2, r3
 80029f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80029f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f040 82ae 	bne.w	8002f74 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a20:	441a      	add	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a2e:	441a      	add	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	6a1a      	ldr	r2, [r3, #32]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d30b      	bcc.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a50:	1ad2      	subs	r2, r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	621a      	str	r2, [r3, #32]
 8002a56:	e017      	b.n	8002a88 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d108      	bne.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002a60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a70:	e00a      	b.n	8002a88 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d165      	bne.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x382>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa4:	4413      	add	r3, r2
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	011a      	lsls	r2, r3, #4
 8002aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002acc:	2b3e      	cmp	r3, #62	; 0x3e
 8002ace:	d91d      	bls.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x332>
 8002ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <HAL_PCD_EP_DB_Transmit+0x310>
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	e044      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x350>
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	e035      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b40:	3301      	adds	r3, #1
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	4313      	orrs	r3, r2
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	e01c      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d118      	bne.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b78:	4413      	add	r3, r2
 8002b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	011a      	lsls	r2, r3, #4
 8002b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b84:	4413      	add	r3, r2
 8002b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b94:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6959      	ldr	r1, [r3, #20]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	891a      	ldrh	r2, [r3, #8]
 8002ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f003 ff79 	bl	8006a9e <USB_WritePMA>
 8002bac:	e1e2      	b.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3306      	adds	r3, #6
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d307      	bcc.n	8002bf6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bee:	1ad2      	subs	r2, r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	619a      	str	r2, [r3, #24]
 8002bf4:	e002      	b.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 80c0 	bne.w	8002d86 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d126      	bne.n	8002c5c <HAL_PCD_EP_DB_Transmit+0x482>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c22:	4413      	add	r3, r2
 8002c24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	011a      	lsls	r2, r3, #4
 8002c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c2e:	4413      	add	r3, r2
 8002c30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c34:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c44:	801a      	strh	r2, [r3, #0]
 8002c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	e01a      	b.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	785b      	ldrb	r3, [r3, #1]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d116      	bne.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	667b      	str	r3, [r7, #100]	; 0x64
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c78:	4413      	add	r3, r2
 8002c7a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	011a      	lsls	r2, r3, #4
 8002c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c84:	4413      	add	r3, r2
 8002c86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c8e:	2200      	movs	r2, #0
 8002c90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	677b      	str	r3, [r7, #116]	; 0x74
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d12b      	bne.n	8002cf8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	4413      	add	r3, r2
 8002cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	011a      	lsls	r2, r3, #4
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cf4:	801a      	strh	r2, [r3, #0]
 8002cf6:	e017      	b.n	8002d28 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	785b      	ldrb	r3, [r3, #1]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d113      	bne.n	8002d28 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0e:	4413      	add	r3, r2
 8002d10:	677b      	str	r3, [r7, #116]	; 0x74
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	011a      	lsls	r2, r3, #4
 8002d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d20:	673b      	str	r3, [r7, #112]	; 0x70
 8002d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d24:	2200      	movs	r2, #0
 8002d26:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f005 fd45 	bl	80087be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 811a 	bne.w	8002f74 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	441a      	add	r2, r3
 8002d6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	8013      	strh	r3, [r2, #0]
 8002d84:	e0f6      	b.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d121      	bne.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	441a      	add	r2, r3
 8002dbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	f040 80ca 	bne.w	8002f74 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002de8:	441a      	add	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002df6:	441a      	add	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d30b      	bcc.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e18:	1ad2      	subs	r2, r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	621a      	str	r2, [r3, #32]
 8002e1e:	e017      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d108      	bne.n	8002e3a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002e28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e38:	e00a      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	657b      	str	r3, [r7, #84]	; 0x54
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d165      	bne.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x750>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e72:	4413      	add	r3, r2
 8002e74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	011a      	lsls	r2, r3, #4
 8002e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7e:	4413      	add	r3, r2
 8002e80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e84:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9a:	2b3e      	cmp	r3, #62	; 0x3e
 8002e9c:	d91d      	bls.n	8002eda <HAL_PCD_EP_DB_Transmit+0x700>
 8002e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	029b      	lsls	r3, r3, #10
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	e041      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x784>
 8002eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ef4:	801a      	strh	r2, [r3, #0]
 8002ef6:	e032      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x784>
 8002ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x738>
 8002f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0e:	3301      	adds	r3, #1
 8002f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	029b      	lsls	r3, r3, #10
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	e019      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x784>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	785b      	ldrb	r3, [r3, #1]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d115      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x784>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f40:	4413      	add	r3, r2
 8002f42:	657b      	str	r3, [r7, #84]	; 0x54
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	011a      	lsls	r2, r3, #4
 8002f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f52:	653b      	str	r3, [r7, #80]	; 0x50
 8002f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6959      	ldr	r1, [r3, #20]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	895a      	ldrh	r2, [r3, #10]
 8002f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f003 fd95 	bl	8006a9e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8e:	82bb      	strh	r3, [r7, #20]
 8002f90:	8abb      	ldrh	r3, [r7, #20]
 8002f92:	f083 0310 	eor.w	r3, r3, #16
 8002f96:	82bb      	strh	r3, [r7, #20]
 8002f98:	8abb      	ldrh	r3, [r7, #20]
 8002f9a:	f083 0320 	eor.w	r3, r3, #32
 8002f9e:	82bb      	strh	r3, [r7, #20]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	8abb      	ldrh	r3, [r7, #20]
 8002fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3790      	adds	r7, #144	; 0x90
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	817b      	strh	r3, [r7, #10]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fe0:	897b      	ldrh	r3, [r7, #10]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fec:	897b      	ldrh	r3, [r7, #10]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e009      	b.n	8003018 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003004:	897a      	ldrh	r2, [r7, #10]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	b29a      	uxth	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	80da      	strh	r2, [r3, #6]
 800302c:	e00b      	b.n	8003046 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2201      	movs	r2, #1
 8003032:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	b29a      	uxth	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	b29a      	uxth	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
	...

08003054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e272      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8087 	beq.w	8003182 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003074:	4b92      	ldr	r3, [pc, #584]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b04      	cmp	r3, #4
 800307e:	d00c      	beq.n	800309a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003080:	4b8f      	ldr	r3, [pc, #572]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d112      	bne.n	80030b2 <HAL_RCC_OscConfig+0x5e>
 800308c:	4b8c      	ldr	r3, [pc, #560]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d10b      	bne.n	80030b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d06c      	beq.n	8003180 <HAL_RCC_OscConfig+0x12c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d168      	bne.n	8003180 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e24c      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x76>
 80030bc:	4b80      	ldr	r3, [pc, #512]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a7f      	ldr	r2, [pc, #508]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e02e      	b.n	8003128 <HAL_RCC_OscConfig+0xd4>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x98>
 80030d2:	4b7b      	ldr	r3, [pc, #492]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7a      	ldr	r2, [pc, #488]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b78      	ldr	r3, [pc, #480]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a77      	ldr	r2, [pc, #476]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e01d      	b.n	8003128 <HAL_RCC_OscConfig+0xd4>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0xbc>
 80030f6:	4b72      	ldr	r3, [pc, #456]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a71      	ldr	r2, [pc, #452]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b6f      	ldr	r3, [pc, #444]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6e      	ldr	r2, [pc, #440]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0xd4>
 8003110:	4b6b      	ldr	r3, [pc, #428]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6a      	ldr	r2, [pc, #424]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003126:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fd fe7e 	bl	8000e30 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fd fe7a 	bl	8000e30 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e200      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b5d      	ldr	r3, [pc, #372]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0xe4>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fd fe6a 	bl	8000e30 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fd fe66 	bl	8000e30 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1ec      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x10c>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d063      	beq.n	8003256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800318e:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800319a:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d11c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x18c>
 80031a6:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_RCC_OscConfig+0x176>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1c0      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4939      	ldr	r1, [pc, #228]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	e03a      	b.n	8003256 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d020      	beq.n	800322a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fd fe1f 	bl	8000e30 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f6:	f7fd fe1b 	bl	8000e30 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e1a1      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003208:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003214:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4927      	ldr	r1, [pc, #156]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003224:	4313      	orrs	r3, r2
 8003226:	600b      	str	r3, [r1, #0]
 8003228:	e015      	b.n	8003256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fd fdfe 	bl	8000e30 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003238:	f7fd fdfa 	bl	8000e30 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e180      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03a      	beq.n	80032d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d019      	beq.n	800329e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326a:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800326c:	2201      	movs	r2, #1
 800326e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003270:	f7fd fdde 	bl	8000e30 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003278:	f7fd fdda 	bl	8000e30 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e160      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003296:	2001      	movs	r0, #1
 8003298:	f000 fa9c 	bl	80037d4 <RCC_Delay>
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a4:	f7fd fdc4 	bl	8000e30 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032aa:	e00f      	b.n	80032cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fd fdc0 	bl	8000e30 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d908      	bls.n	80032cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e146      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	42420000 	.word	0x42420000
 80032c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	4b92      	ldr	r3, [pc, #584]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e9      	bne.n	80032ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80a6 	beq.w	8003432 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b8b      	ldr	r3, [pc, #556]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4a87      	ldr	r2, [pc, #540]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003300:	61d3      	str	r3, [r2, #28]
 8003302:	4b85      	ldr	r3, [pc, #532]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003312:	4b82      	ldr	r3, [pc, #520]	; (800351c <HAL_RCC_OscConfig+0x4c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d118      	bne.n	8003350 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331e:	4b7f      	ldr	r3, [pc, #508]	; (800351c <HAL_RCC_OscConfig+0x4c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7e      	ldr	r2, [pc, #504]	; (800351c <HAL_RCC_OscConfig+0x4c8>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332a:	f7fd fd81 	bl	8000e30 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003332:	f7fd fd7d 	bl	8000e30 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b64      	cmp	r3, #100	; 0x64
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e103      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	4b75      	ldr	r3, [pc, #468]	; (800351c <HAL_RCC_OscConfig+0x4c8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x312>
 8003358:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4a6e      	ldr	r2, [pc, #440]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6213      	str	r3, [r2, #32]
 8003364:	e02d      	b.n	80033c2 <HAL_RCC_OscConfig+0x36e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x334>
 800336e:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4a69      	ldr	r2, [pc, #420]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6213      	str	r3, [r2, #32]
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4a66      	ldr	r2, [pc, #408]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	6213      	str	r3, [r2, #32]
 8003386:	e01c      	b.n	80033c2 <HAL_RCC_OscConfig+0x36e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_OscConfig+0x356>
 8003390:	4b61      	ldr	r3, [pc, #388]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4a60      	ldr	r2, [pc, #384]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6213      	str	r3, [r2, #32]
 800339c:	4b5e      	ldr	r3, [pc, #376]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4a5d      	ldr	r2, [pc, #372]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6213      	str	r3, [r2, #32]
 80033a8:	e00b      	b.n	80033c2 <HAL_RCC_OscConfig+0x36e>
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a5a      	ldr	r2, [pc, #360]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	4b58      	ldr	r3, [pc, #352]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a57      	ldr	r2, [pc, #348]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d015      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ca:	f7fd fd31 	bl	8000e30 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fd fd2d 	bl	8000e30 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0b1      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ee      	beq.n	80033d2 <HAL_RCC_OscConfig+0x37e>
 80033f4:	e014      	b.n	8003420 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7fd fd1b 	bl	8000e30 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fd fd17 	bl	8000e30 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e09b      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	4b40      	ldr	r3, [pc, #256]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ee      	bne.n	80033fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4a3b      	ldr	r2, [pc, #236]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003430:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8087 	beq.w	800354a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343c:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d061      	beq.n	800350c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d146      	bne.n	80034de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b33      	ldr	r3, [pc, #204]	; (8003520 <HAL_RCC_OscConfig+0x4cc>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7fd fceb 	bl	8000e30 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7fd fce7 	bl	8000e30 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e06d      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003470:	4b29      	ldr	r3, [pc, #164]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003484:	d108      	bne.n	8003498 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4921      	ldr	r1, [pc, #132]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a19      	ldr	r1, [r3, #32]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	430b      	orrs	r3, r1
 80034aa:	491b      	ldr	r1, [pc, #108]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_RCC_OscConfig+0x4cc>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fd fcbb 	bl	8000e30 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034be:	f7fd fcb7 	bl	8000e30 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e03d      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x46a>
 80034dc:	e035      	b.n	800354a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_OscConfig+0x4cc>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd fca4 	bl	8000e30 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fca0 	bl	8000e30 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e026      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x498>
 800350a:	e01e      	b.n	800354a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d107      	bne.n	8003524 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e019      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_OscConfig+0x500>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	429a      	cmp	r2, r3
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d001      	beq.n	800354a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000

08003558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0d0      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b6a      	ldr	r3, [pc, #424]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d910      	bls.n	800359c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b67      	ldr	r3, [pc, #412]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 0207 	bic.w	r2, r3, #7
 8003582:	4965      	ldr	r1, [pc, #404]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b63      	ldr	r3, [pc, #396]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0b8      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d020      	beq.n	80035ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b4:	4b59      	ldr	r3, [pc, #356]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a58      	ldr	r2, [pc, #352]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035cc:	4b53      	ldr	r3, [pc, #332]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a52      	ldr	r2, [pc, #328]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d8:	4b50      	ldr	r3, [pc, #320]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	494d      	ldr	r1, [pc, #308]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d040      	beq.n	8003678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d115      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e07f      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e073      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e06b      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f023 0203 	bic.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4936      	ldr	r1, [pc, #216]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003648:	f7fd fbf2 	bl	8000e30 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fd fbee 	bl	8000e30 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e053      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b2d      	ldr	r3, [pc, #180]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d210      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 0207 	bic.w	r2, r3, #7
 800368e:	4922      	ldr	r1, [pc, #136]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e032      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4916      	ldr	r1, [pc, #88]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	490e      	ldr	r1, [pc, #56]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036e6:	f000 f821 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	490a      	ldr	r1, [pc, #40]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	5ccb      	ldrb	r3, [r1, r3]
 80036fa:	fa22 f303 	lsr.w	r3, r2, r3
 80036fe:	4a09      	ldr	r2, [pc, #36]	; (8003724 <HAL_RCC_ClockConfig+0x1cc>)
 8003700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_ClockConfig+0x1d0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fb50 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40022000 	.word	0x40022000
 800371c:	40021000 	.word	0x40021000
 8003720:	08009c3c 	.word	0x08009c3c
 8003724:	20000004 	.word	0x20000004
 8003728:	20000008 	.word	0x20000008

0800372c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d002      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x30>
 8003756:	2b08      	cmp	r3, #8
 8003758:	d003      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x36>
 800375a:	e027      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800375e:	613b      	str	r3, [r7, #16]
      break;
 8003760:	e027      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	0c9b      	lsrs	r3, r3, #18
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800376c:	5cd3      	ldrb	r3, [r2, r3]
 800376e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d010      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	0c5b      	lsrs	r3, r3, #17
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	4a11      	ldr	r2, [pc, #68]	; (80037cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003786:	5cd3      	ldrb	r3, [r2, r3]
 8003788:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a0d      	ldr	r2, [pc, #52]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800378e:	fb03 f202 	mul.w	r2, r3, r2
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e004      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	613b      	str	r3, [r7, #16]
      break;
 80037aa:	e002      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ae:	613b      	str	r3, [r7, #16]
      break;
 80037b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b2:	693b      	ldr	r3, [r7, #16]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	007a1200 	.word	0x007a1200
 80037c8:	08009c4c 	.word	0x08009c4c
 80037cc:	08009c5c 	.word	0x08009c5c
 80037d0:	003d0900 	.word	0x003d0900

080037d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <RCC_Delay+0x34>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <RCC_Delay+0x38>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0a5b      	lsrs	r3, r3, #9
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037f0:	bf00      	nop
  }
  while (Delay --);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	60fa      	str	r2, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f9      	bne.n	80037f0 <RCC_Delay+0x1c>
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	20000004 	.word	0x20000004
 800380c:	10624dd3 	.word	0x10624dd3

08003810 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d07d      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800382c:	2300      	movs	r3, #0
 800382e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003830:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383c:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4a4b      	ldr	r2, [pc, #300]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003846:	61d3      	str	r3, [r2, #28]
 8003848:	4b49      	ldr	r3, [pc, #292]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003858:	4b46      	ldr	r3, [pc, #280]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d118      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003864:	4b43      	ldr	r3, [pc, #268]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a42      	ldr	r2, [pc, #264]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800386a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003870:	f7fd fade 	bl	8000e30 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003876:	e008      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003878:	f7fd fada 	bl	8000e30 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e06d      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388a:	4b3a      	ldr	r3, [pc, #232]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02e      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d027      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038c4:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038ca:	4a29      	ldr	r2, [pc, #164]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d014      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fd faa9 	bl	8000e30 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fd faa5 	bl	8000e30 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e036      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ee      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4917      	ldr	r1, [pc, #92]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	4313      	orrs	r3, r2
 8003914:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d105      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	4a13      	ldr	r2, [pc, #76]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003926:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	490b      	ldr	r1, [pc, #44]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4904      	ldr	r1, [pc, #16]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	40007000 	.word	0x40007000
 8003978:	42420440 	.word	0x42420440

0800397c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e076      	b.n	8003a7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d108      	bne.n	80039a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399e:	d009      	beq.n	80039b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	61da      	str	r2, [r3, #28]
 80039a6:	e005      	b.n	80039b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd f83e 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	ea42 0103 	orr.w	r1, r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	0c1a      	lsrs	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f002 0204 	and.w	r2, r2, #4
 8003a5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_SPI_Transmit+0x22>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e12d      	b.n	8003d02 <HAL_SPI_Transmit+0x27e>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aae:	f7fd f9bf 	bl	8000e30 <HAL_GetTick>
 8003ab2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d002      	beq.n	8003aca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ac8:	e116      	b.n	8003cf8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_SPI_Transmit+0x52>
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ada:	e10d      	b.n	8003cf8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	88fa      	ldrh	r2, [r7, #6]
 8003af4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d10f      	bne.n	8003b44 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d007      	beq.n	8003b62 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b6a:	d14f      	bne.n	8003c0c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_SPI_Transmit+0xf6>
 8003b74:	8afb      	ldrh	r3, [r7, #22]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d142      	bne.n	8003c00 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	881a      	ldrh	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	1c9a      	adds	r2, r3, #2
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b9e:	e02f      	b.n	8003c00 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d112      	bne.n	8003bd4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	1c9a      	adds	r2, r3, #2
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bd2:	e015      	b.n	8003c00 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bd4:	f7fd f92c 	bl	8000e30 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d803      	bhi.n	8003bec <HAL_SPI_Transmit+0x168>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d102      	bne.n	8003bf2 <HAL_SPI_Transmit+0x16e>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003bfe:	e07b      	b.n	8003cf8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ca      	bne.n	8003ba0 <HAL_SPI_Transmit+0x11c>
 8003c0a:	e050      	b.n	8003cae <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_SPI_Transmit+0x196>
 8003c14:	8afb      	ldrh	r3, [r7, #22]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d144      	bne.n	8003ca4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c40:	e030      	b.n	8003ca4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d113      	bne.n	8003c78 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c76:	e015      	b.n	8003ca4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c78:	f7fd f8da 	bl	8000e30 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d803      	bhi.n	8003c90 <HAL_SPI_Transmit+0x20c>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8e:	d102      	bne.n	8003c96 <HAL_SPI_Transmit+0x212>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ca2:	e029      	b.n	8003cf8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1c9      	bne.n	8003c42 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fbce 	bl	8004454 <SPI_EndRxTxTransaction>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e003      	b.n	8003cf8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b08a      	sub	sp, #40	; 0x28
 8003d0e:	af02      	add	r7, sp, #8
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	77fb      	strb	r3, [r7, #31]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d002      	beq.n	8003d30 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2e:	e0fe      	b.n	8003f2e <HAL_SPI_Receive+0x224>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d38:	d115      	bne.n	8003d66 <HAL_SPI_Receive+0x5c>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d111      	bne.n	8003d66 <HAL_SPI_Receive+0x5c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2204      	movs	r2, #4
 8003d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    uint8_t tx_while_rx = 0x03;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	75fb      	strb	r3, [r7, #23]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, &tx_while_rx, pData, Size, Timeout);
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	f107 0117 	add.w	r1, r7, #23
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f8ef 	bl	8003f40 <HAL_SPI_TransmitReceive>
 8003d62:	4603      	mov	r3, r0
 8003d64:	e0e8      	b.n	8003f38 <HAL_SPI_Receive+0x22e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_SPI_Receive+0x6a>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e0e1      	b.n	8003f38 <HAL_SPI_Receive+0x22e>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7c:	f7fd f858 	bl	8000e30 <HAL_GetTick>
 8003d80:	61b8      	str	r0, [r7, #24]

  if ((pData == NULL) || (Size == 0U))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_SPI_Receive+0x84>
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_SPI_Receive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d92:	e0cc      	b.n	8003f2e <HAL_SPI_Receive+0x224>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2204      	movs	r2, #4
 8003d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	88fa      	ldrh	r2, [r7, #6]
 8003db2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dda:	d10f      	bne.n	8003dfc <HAL_SPI_Receive+0xf2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d007      	beq.n	8003e1a <HAL_SPI_Receive+0x110>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d16a      	bne.n	8003ef8 <HAL_SPI_Receive+0x1ee>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e22:	e032      	b.n	8003e8a <HAL_SPI_Receive+0x180>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d115      	bne.n	8003e5e <HAL_SPI_Receive+0x154>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f103 020c 	add.w	r2, r3, #12
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e5c:	e015      	b.n	8003e8a <HAL_SPI_Receive+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5e:	f7fc ffe7 	bl	8000e30 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d803      	bhi.n	8003e76 <HAL_SPI_Receive+0x16c>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d102      	bne.n	8003e7c <HAL_SPI_Receive+0x172>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_SPI_Receive+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e88:	e051      	b.n	8003f2e <HAL_SPI_Receive+0x224>
    while (hspi->RxXferCount > 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1c7      	bne.n	8003e24 <HAL_SPI_Receive+0x11a>
 8003e94:	e035      	b.n	8003f02 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d113      	bne.n	8003ecc <HAL_SPI_Receive+0x1c2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eca:	e015      	b.n	8003ef8 <HAL_SPI_Receive+0x1ee>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ecc:	f7fc ffb0 	bl	8000e30 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d803      	bhi.n	8003ee4 <HAL_SPI_Receive+0x1da>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d102      	bne.n	8003eea <HAL_SPI_Receive+0x1e0>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_SPI_Receive+0x1ee>
        {
          errorcode = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ef6:	e01a      	b.n	8003f2e <HAL_SPI_Receive+0x224>
    while (hspi->RxXferCount > 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1c9      	bne.n	8003e96 <HAL_SPI_Receive+0x18c>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fa52 	bl	80043b0 <SPI_EndRxTransaction>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_SPI_Receive+0x20e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_Receive+0x21c>
  {
    errorcode = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e003      	b.n	8003f2e <HAL_SPI_Receive+0x224>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f36:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x26>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e198      	b.n	8004298 <HAL_SPI_TransmitReceive+0x358>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f6e:	f7fc ff5f 	bl	8000e30 <HAL_GetTick>
 8003f72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d00f      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x70>
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f96:	d107      	bne.n	8003fa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d103      	bne.n	8003fa8 <HAL_SPI_TransmitReceive+0x68>
 8003fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d003      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fae:	e16d      	b.n	800428c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_SPI_TransmitReceive+0x82>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_SPI_TransmitReceive+0x82>
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fc8:	e160      	b.n	800428c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d003      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2205      	movs	r2, #5
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	887a      	ldrh	r2, [r7, #2]
 8003fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	887a      	ldrh	r2, [r7, #2]
 8003ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	887a      	ldrh	r2, [r7, #2]
 8004000:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	887a      	ldrh	r2, [r7, #2]
 8004006:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d007      	beq.n	8004032 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004030:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403a:	d17c      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_SPI_TransmitReceive+0x10a>
 8004044:	8b7b      	ldrh	r3, [r7, #26]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d16a      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	881a      	ldrh	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	1c9a      	adds	r2, r3, #2
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406e:	e057      	b.n	8004120 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b02      	cmp	r3, #2
 800407c:	d11b      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x176>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d016      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x176>
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d113      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d119      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x1b8>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d014      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	b292      	uxth	r2, r2
 80040da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f4:	2301      	movs	r3, #1
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040f8:	f7fc fe9a 	bl	8000e30 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004104:	429a      	cmp	r2, r3
 8004106:	d80b      	bhi.n	8004120 <HAL_SPI_TransmitReceive+0x1e0>
 8004108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d007      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800411e:	e0b5      	b.n	800428c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1a2      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x130>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d19d      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x130>
 8004134:	e080      	b.n	8004238 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x204>
 800413e:	8b7b      	ldrh	r3, [r7, #26]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d16f      	bne.n	8004224 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	7812      	ldrb	r2, [r2, #0]
 8004150:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416a:	e05b      	b.n	8004224 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b02      	cmp	r3, #2
 8004178:	d11c      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x274>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d017      	beq.n	80041b4 <HAL_SPI_TransmitReceive+0x274>
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	2b01      	cmp	r3, #1
 8004188:	d114      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	7812      	ldrb	r2, [r2, #0]
 8004196:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d119      	bne.n	80041f6 <HAL_SPI_TransmitReceive+0x2b6>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d014      	beq.n	80041f6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041f2:	2301      	movs	r3, #1
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041f6:	f7fc fe1b 	bl	8000e30 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004202:	429a      	cmp	r2, r3
 8004204:	d803      	bhi.n	800420e <HAL_SPI_TransmitReceive+0x2ce>
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d102      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x2d4>
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004222:	e033      	b.n	800428c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d19e      	bne.n	800416c <HAL_SPI_TransmitReceive+0x22c>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d199      	bne.n	800416c <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f909 	bl	8004454 <SPI_EndRxTxTransaction>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d006      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004254:	e01a      	b.n	800428c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004282:	e003      	b.n	800428c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004294:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004298:	4618      	mov	r0, r3
 800429a:	3730      	adds	r7, #48	; 0x30
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042b0:	f7fc fdbe 	bl	8000e30 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042c0:	f7fc fdb6 	bl	8000e30 <HAL_GetTick>
 80042c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042c6:	4b39      	ldr	r3, [pc, #228]	; (80043ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	015b      	lsls	r3, r3, #5
 80042cc:	0d1b      	lsrs	r3, r3, #20
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	fb02 f303 	mul.w	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042d6:	e054      	b.n	8004382 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d050      	beq.n	8004382 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042e0:	f7fc fda6 	bl	8000e30 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d902      	bls.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d13d      	bne.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004304:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800430e:	d111      	bne.n	8004334 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004318:	d004      	beq.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d107      	bne.n	8004334 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004332:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433c:	d10f      	bne.n	800435e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800435c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e017      	b.n	80043a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	3b01      	subs	r3, #1
 8004380:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4013      	ands	r3, r2
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	429a      	cmp	r2, r3
 8004390:	bf0c      	ite	eq
 8004392:	2301      	moveq	r3, #1
 8004394:	2300      	movne	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	429a      	cmp	r2, r3
 800439e:	d19b      	bne.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000004 	.word	0x20000004

080043b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c4:	d111      	bne.n	80043ea <SPI_EndRxTransaction+0x3a>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d004      	beq.n	80043da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d107      	bne.n	80043ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f2:	d117      	bne.n	8004424 <SPI_EndRxTransaction+0x74>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fc:	d112      	bne.n	8004424 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2200      	movs	r2, #0
 8004406:	2101      	movs	r1, #1
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff ff49 	bl	80042a0 <SPI_WaitFlagStateUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01a      	beq.n	800444a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e013      	b.n	800444c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	2180      	movs	r1, #128	; 0x80
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7ff ff36 	bl	80042a0 <SPI_WaitFlagStateUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e000      	b.n	800444c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ff18 	bl	80042a0 <SPI_WaitFlagStateUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e000      	b.n	8004488 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004490:	b084      	sub	sp, #16
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	f107 0014 	add.w	r0, r7, #20
 800449e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	b004      	add	sp, #16
 80044ae:	4770      	bx	lr

080044b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	4013      	ands	r3, r2
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004528:	b084      	sub	sp, #16
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	f107 0014 	add.w	r0, r7, #20
 8004536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	b004      	add	sp, #16
 8004566:	4770      	bx	lr

08004568 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004568:	b480      	push	{r7}
 800456a:	b09d      	sub	sp, #116	; 0x74
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	78db      	ldrb	r3, [r3, #3]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d81f      	bhi.n	80045da <USB_ActivateEndpoint+0x72>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <USB_ActivateEndpoint+0x38>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045cd 	.word	0x080045cd
 80045a8:	080045e3 	.word	0x080045e3
 80045ac:	080045bf 	.word	0x080045bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045bc:	e012      	b.n	80045e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045ca:	e00b      	b.n	80045e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045d8:	e004      	b.n	80045e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80045e0:	e000      	b.n	80045e4 <USB_ActivateEndpoint+0x7c>
      break;
 80045e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	b29b      	uxth	r3, r3
 8004604:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	b29a      	uxth	r2, r3
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	4313      	orrs	r3, r2
 8004626:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004648:	b29b      	uxth	r3, r3
 800464a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	7b1b      	ldrb	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f040 8178 	bne.w	8004946 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8084 	beq.w	8004768 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	4413      	add	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	011a      	lsls	r2, r3, #4
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	88db      	ldrh	r3, [r3, #6]
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	b29b      	uxth	r3, r3
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	827b      	strh	r3, [r7, #18]
 80046a2:	8a7b      	ldrh	r3, [r7, #18]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01b      	beq.n	80046e4 <USB_ActivateEndpoint+0x17c>
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	823b      	strh	r3, [r7, #16]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	441a      	add	r2, r3
 80046ce:	8a3b      	ldrh	r3, [r7, #16]
 80046d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	78db      	ldrb	r3, [r3, #3]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d020      	beq.n	800472e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004702:	81bb      	strh	r3, [r7, #12]
 8004704:	89bb      	ldrh	r3, [r7, #12]
 8004706:	f083 0320 	eor.w	r3, r3, #32
 800470a:	81bb      	strh	r3, [r7, #12]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	89bb      	ldrh	r3, [r7, #12]
 8004718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]
 800472c:	e2d5      	b.n	8004cda <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004744:	81fb      	strh	r3, [r7, #14]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	441a      	add	r2, r3
 8004750:	89fb      	ldrh	r3, [r7, #14]
 8004752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	b29b      	uxth	r3, r3
 8004764:	8013      	strh	r3, [r2, #0]
 8004766:	e2b8      	b.n	8004cda <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	633b      	str	r3, [r7, #48]	; 0x30
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004772:	b29b      	uxth	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	4413      	add	r3, r2
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	011a      	lsls	r2, r3, #4
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	4413      	add	r3, r2
 8004786:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	88db      	ldrh	r3, [r3, #6]
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	b29b      	uxth	r3, r3
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	4413      	add	r3, r2
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	011a      	lsls	r2, r3, #4
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	4413      	add	r3, r2
 80047ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b3e      	cmp	r3, #62	; 0x3e
 80047d6:	d91d      	bls.n	8004814 <USB_ActivateEndpoint+0x2ac>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <USB_ActivateEndpoint+0x28a>
 80047ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ee:	3b01      	subs	r3, #1
 80047f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	029b      	lsls	r3, r3, #10
 80047fe:	b29b      	uxth	r3, r3
 8004800:	4313      	orrs	r3, r2
 8004802:	b29b      	uxth	r3, r3
 8004804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480c:	b29a      	uxth	r2, r3
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	e026      	b.n	8004862 <USB_ActivateEndpoint+0x2fa>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <USB_ActivateEndpoint+0x2ca>
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800482a:	b29a      	uxth	r2, r3
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	801a      	strh	r2, [r3, #0]
 8004830:	e017      	b.n	8004862 <USB_ActivateEndpoint+0x2fa>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	66bb      	str	r3, [r7, #104]	; 0x68
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <USB_ActivateEndpoint+0x2e4>
 8004846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004848:	3301      	adds	r3, #1
 800484a:	66bb      	str	r3, [r7, #104]	; 0x68
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29a      	uxth	r2, r3
 8004852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004854:	b29b      	uxth	r3, r3
 8004856:	029b      	lsls	r3, r3, #10
 8004858:	b29b      	uxth	r3, r3
 800485a:	4313      	orrs	r3, r2
 800485c:	b29a      	uxth	r2, r3
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01b      	beq.n	80048b2 <USB_ActivateEndpoint+0x34a>
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004890:	843b      	strh	r3, [r7, #32]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	441a      	add	r2, r3
 800489c:	8c3b      	ldrh	r3, [r7, #32]
 800489e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d124      	bne.n	8004904 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	83bb      	strh	r3, [r7, #28]
 80048d2:	8bbb      	ldrh	r3, [r7, #28]
 80048d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048d8:	83bb      	strh	r3, [r7, #28]
 80048da:	8bbb      	ldrh	r3, [r7, #28]
 80048dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048e0:	83bb      	strh	r3, [r7, #28]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	8bbb      	ldrh	r3, [r7, #28]
 80048ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fe:	b29b      	uxth	r3, r3
 8004900:	8013      	strh	r3, [r2, #0]
 8004902:	e1ea      	b.n	8004cda <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	83fb      	strh	r3, [r7, #30]
 800491c:	8bfb      	ldrh	r3, [r7, #30]
 800491e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004922:	83fb      	strh	r3, [r7, #30]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	441a      	add	r2, r3
 800492e:	8bfb      	ldrh	r3, [r7, #30]
 8004930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004940:	b29b      	uxth	r3, r3
 8004942:	8013      	strh	r3, [r2, #0]
 8004944:	e1c9      	b.n	8004cda <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	78db      	ldrb	r3, [r3, #3]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d11e      	bne.n	800498c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004964:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004986:	b29b      	uxth	r3, r3
 8004988:	8013      	strh	r3, [r2, #0]
 800498a:	e01d      	b.n	80049c8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	441a      	add	r2, r3
 80049b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d8:	4413      	add	r3, r2
 80049da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	011a      	lsls	r2, r3, #4
 80049e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	891b      	ldrh	r3, [r3, #8]
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0c:	4413      	add	r3, r2
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	011a      	lsls	r2, r3, #4
 8004a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	895b      	ldrh	r3, [r3, #10]
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 8093 	bne.w	8004b60 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01b      	beq.n	8004a8e <USB_ActivateEndpoint+0x526>
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01b      	beq.n	8004ade <USB_ActivateEndpoint+0x576>
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af4:	873b      	strh	r3, [r7, #56]	; 0x38
 8004af6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004af8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004afc:	873b      	strh	r3, [r7, #56]	; 0x38
 8004afe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b04:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	8013      	strh	r3, [r2, #0]
 8004b5e:	e0bc      	b.n	8004cda <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01d      	beq.n	8004bb8 <USB_ActivateEndpoint+0x650>
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01d      	beq.n	8004c10 <USB_ActivateEndpoint+0x6a8>
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	441a      	add	r2, r3
 8004bf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	78db      	ldrb	r3, [r3, #3]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d024      	beq.n	8004c62 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c36:	f083 0320 	eor.w	r3, r3, #32
 8004c3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	441a      	add	r2, r3
 8004c48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8013      	strh	r3, [r2, #0]
 8004c60:	e01d      	b.n	8004c9e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	441a      	add	r2, r3
 8004c86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004cda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3774      	adds	r7, #116	; 0x74
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b08d      	sub	sp, #52	; 0x34
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	7b1b      	ldrb	r3, [r3, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f040 808e 	bne.w	8004e18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d044      	beq.n	8004d8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	81bb      	strh	r3, [r7, #12]
 8004d12:	89bb      	ldrh	r3, [r7, #12]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01b      	beq.n	8004d54 <USB_DeactivateEndpoint+0x6c>
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	817b      	strh	r3, [r7, #10]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	897b      	ldrh	r3, [r7, #10]
 8004d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6a:	813b      	strh	r3, [r7, #8]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	893b      	ldrh	r3, [r7, #8]
 8004d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	8013      	strh	r3, [r2, #0]
 8004d8c:	e192      	b.n	80050b4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	827b      	strh	r3, [r7, #18]
 8004d9c:	8a7b      	ldrh	r3, [r7, #18]
 8004d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01b      	beq.n	8004dde <USB_DeactivateEndpoint+0xf6>
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbc:	823b      	strh	r3, [r7, #16]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	8a3b      	ldrh	r3, [r7, #16]
 8004dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df4:	81fb      	strh	r3, [r7, #14]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	441a      	add	r2, r3
 8004e00:	89fb      	ldrh	r3, [r7, #14]
 8004e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	8013      	strh	r3, [r2, #0]
 8004e16:	e14d      	b.n	80050b4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f040 80a5 	bne.w	8004f6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	843b      	strh	r3, [r7, #32]
 8004e30:	8c3b      	ldrh	r3, [r7, #32]
 8004e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01b      	beq.n	8004e72 <USB_DeactivateEndpoint+0x18a>
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e50:	83fb      	strh	r3, [r7, #30]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	441a      	add	r2, r3
 8004e5c:	8bfb      	ldrh	r3, [r7, #30]
 8004e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	83bb      	strh	r3, [r7, #28]
 8004e80:	8bbb      	ldrh	r3, [r7, #28]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01b      	beq.n	8004ec2 <USB_DeactivateEndpoint+0x1da>
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	837b      	strh	r3, [r7, #26]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	8b7b      	ldrh	r3, [r7, #26]
 8004eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed8:	833b      	strh	r3, [r7, #24]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	441a      	add	r2, r3
 8004ee4:	8b3b      	ldrh	r3, [r7, #24]
 8004ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f10:	82fb      	strh	r3, [r7, #22]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	8afb      	ldrh	r3, [r7, #22]
 8004f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f48:	82bb      	strh	r3, [r7, #20]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	8abb      	ldrh	r3, [r7, #20]
 8004f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]
 8004f6a:	e0a3      	b.n	80050b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <USB_DeactivateEndpoint+0x2d4>
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004fca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01b      	beq.n	800500c <USB_DeactivateEndpoint+0x324>
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005004:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005008:	b29b      	uxth	r3, r3
 800500a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	441a      	add	r2, r3
 800502e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	441a      	add	r2, r3
 8005066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005078:	b29b      	uxth	r3, r3
 800507a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	847b      	strh	r3, [r7, #34]	; 0x22
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	441a      	add	r2, r3
 800509e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3734      	adds	r7, #52	; 0x34
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr

080050c0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b0c2      	sub	sp, #264	; 0x108
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ce:	6018      	str	r0, [r3, #0]
 80050d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	f040 86b7 	bne.w	8005e5a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d908      	bls.n	800511a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005118:	e007      	b.n	800512a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800511a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800512a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	7b1b      	ldrb	r3, [r3, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d13a      	bne.n	80051b0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800513a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6959      	ldr	r1, [r3, #20]
 8005146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	88da      	ldrh	r2, [r3, #6]
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005156:	b29b      	uxth	r3, r3
 8005158:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800515c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005160:	6800      	ldr	r0, [r0, #0]
 8005162:	f001 fc9c 	bl	8006a9e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005180:	b29b      	uxth	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	011a      	lsls	r2, r3, #4
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4413      	add	r3, r2
 800519c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	f000 be1f 	b.w	8005dee <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	78db      	ldrb	r3, [r3, #3]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	f040 8462 	bne.w	8005a86 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6a1a      	ldr	r2, [r3, #32]
 80051ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	429a      	cmp	r2, r3
 80051dc:	f240 83df 	bls.w	800599e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800520a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	441a      	add	r2, r3
 8005224:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005230:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005238:	b29b      	uxth	r3, r3
 800523a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800523c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a1a      	ldr	r2, [r3, #32]
 8005248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524c:	1ad2      	subs	r2, r2, r3
 800524e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800525a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 81c7 	beq.w	8005610 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	633b      	str	r3, [r7, #48]	; 0x30
 800528e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d177      	bne.n	800538e <USB_EPStartXfer+0x2ce>
 800529e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	4413      	add	r3, r2
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	011a      	lsls	r2, r3, #4
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	4413      	add	r3, r2
 80052d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ee:	2b3e      	cmp	r3, #62	; 0x3e
 80052f0:	d921      	bls.n	8005336 <USB_EPStartXfer+0x276>
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <USB_EPStartXfer+0x252>
 8005308:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800530c:	3b01      	subs	r3, #1
 800530e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29a      	uxth	r2, r3
 8005318:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800531c:	b29b      	uxth	r3, r3
 800531e:	029b      	lsls	r3, r3, #10
 8005320:	b29b      	uxth	r3, r3
 8005322:	4313      	orrs	r3, r2
 8005324:	b29b      	uxth	r3, r3
 8005326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532e:	b29a      	uxth	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	e050      	b.n	80053d8 <USB_EPStartXfer+0x318>
 8005336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <USB_EPStartXfer+0x294>
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534c:	b29a      	uxth	r2, r3
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	e041      	b.n	80053d8 <USB_EPStartXfer+0x318>
 8005354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005358:	085b      	lsrs	r3, r3, #1
 800535a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <USB_EPStartXfer+0x2b4>
 800536a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800536e:	3301      	adds	r3, #1
 8005370:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29a      	uxth	r2, r3
 800537a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800537e:	b29b      	uxth	r3, r3
 8005380:	029b      	lsls	r3, r3, #10
 8005382:	b29b      	uxth	r3, r3
 8005384:	4313      	orrs	r3, r2
 8005386:	b29a      	uxth	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e024      	b.n	80053d8 <USB_EPStartXfer+0x318>
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d11c      	bne.n	80053d8 <USB_EPStartXfer+0x318>
 800539e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	4413      	add	r3, r2
 80053b4:	633b      	str	r3, [r7, #48]	; 0x30
 80053b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	011a      	lsls	r2, r3, #4
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	4413      	add	r3, r2
 80053c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	895b      	ldrh	r3, [r3, #10]
 80053e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6959      	ldr	r1, [r3, #20]
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005402:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005406:	6800      	ldr	r0, [r0, #0]
 8005408:	f001 fb49 	bl	8006a9e <USB_WritePMA>
            ep->xfer_buff += len;
 800540c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541c:	441a      	add	r2, r3
 800541e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800542a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800543a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	d90f      	bls.n	8005466 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6a1a      	ldr	r2, [r3, #32]
 8005452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	621a      	str	r2, [r3, #32]
 8005464:	e00e      	b.n	8005484 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2200      	movs	r2, #0
 8005482:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d177      	bne.n	8005584 <USB_EPStartXfer+0x4c4>
 8005494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	4413      	add	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	011a      	lsls	r2, r3, #4
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	4413      	add	r3, r2
 80054ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054da:	b29a      	uxth	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e4:	2b3e      	cmp	r3, #62	; 0x3e
 80054e6:	d921      	bls.n	800552c <USB_EPStartXfer+0x46c>
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <USB_EPStartXfer+0x448>
 80054fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005502:	3b01      	subs	r3, #1
 8005504:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29a      	uxth	r2, r3
 800550e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005512:	b29b      	uxth	r3, r3
 8005514:	029b      	lsls	r3, r3, #10
 8005516:	b29b      	uxth	r3, r3
 8005518:	4313      	orrs	r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005524:	b29a      	uxth	r2, r3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	e056      	b.n	80055da <USB_EPStartXfer+0x51a>
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <USB_EPStartXfer+0x48a>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800553e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005542:	b29a      	uxth	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	e047      	b.n	80055da <USB_EPStartXfer+0x51a>
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d004      	beq.n	800556a <USB_EPStartXfer+0x4aa>
 8005560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005564:	3301      	adds	r3, #1
 8005566:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29a      	uxth	r2, r3
 8005570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005574:	b29b      	uxth	r3, r3
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	b29b      	uxth	r3, r3
 800557a:	4313      	orrs	r3, r2
 800557c:	b29a      	uxth	r2, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	e02a      	b.n	80055da <USB_EPStartXfer+0x51a>
 8005584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d122      	bne.n	80055da <USB_EPStartXfer+0x51a>
 8005594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	4413      	add	r3, r2
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	011a      	lsls	r2, r3, #4
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	891b      	ldrh	r3, [r3, #8]
 80055e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6959      	ldr	r1, [r3, #20]
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005600:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005604:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005608:	6800      	ldr	r0, [r0, #0]
 800560a:	f001 fa48 	bl	8006a9e <USB_WritePMA>
 800560e:	e3ee      	b.n	8005dee <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	785b      	ldrb	r3, [r3, #1]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d177      	bne.n	8005710 <USB_EPStartXfer+0x650>
 8005620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
 800562c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005640:	4413      	add	r3, r2
 8005642:	64bb      	str	r3, [r7, #72]	; 0x48
 8005644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	011a      	lsls	r2, r3, #4
 8005652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005654:	4413      	add	r3, r2
 8005656:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800565a:	647b      	str	r3, [r7, #68]	; 0x44
 800565c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005666:	b29a      	uxth	r2, r3
 8005668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566a:	801a      	strh	r2, [r3, #0]
 800566c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005670:	2b3e      	cmp	r3, #62	; 0x3e
 8005672:	d921      	bls.n	80056b8 <USB_EPStartXfer+0x5f8>
 8005674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800567e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <USB_EPStartXfer+0x5d4>
 800568a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800568e:	3b01      	subs	r3, #1
 8005690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29a      	uxth	r2, r3
 800569a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800569e:	b29b      	uxth	r3, r3
 80056a0:	029b      	lsls	r3, r3, #10
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	4313      	orrs	r3, r2
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	e056      	b.n	8005766 <USB_EPStartXfer+0x6a6>
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <USB_EPStartXfer+0x616>
 80056c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d2:	801a      	strh	r2, [r3, #0]
 80056d4:	e047      	b.n	8005766 <USB_EPStartXfer+0x6a6>
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <USB_EPStartXfer+0x636>
 80056ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056f0:	3301      	adds	r3, #1
 80056f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005700:	b29b      	uxth	r3, r3
 8005702:	029b      	lsls	r3, r3, #10
 8005704:	b29b      	uxth	r3, r3
 8005706:	4313      	orrs	r3, r2
 8005708:	b29a      	uxth	r2, r3
 800570a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	e02a      	b.n	8005766 <USB_EPStartXfer+0x6a6>
 8005710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d122      	bne.n	8005766 <USB_EPStartXfer+0x6a6>
 8005720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	653b      	str	r3, [r7, #80]	; 0x50
 800572c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005740:	4413      	add	r3, r2
 8005742:	653b      	str	r3, [r7, #80]	; 0x50
 8005744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	011a      	lsls	r2, r3, #4
 8005752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005754:	4413      	add	r3, r2
 8005756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800575a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005760:	b29a      	uxth	r2, r3
 8005762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005764:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	891b      	ldrh	r3, [r3, #8]
 8005772:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6959      	ldr	r1, [r3, #20]
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005786:	b29b      	uxth	r3, r3
 8005788:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800578c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005790:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005794:	6800      	ldr	r0, [r0, #0]
 8005796:	f001 f982 	bl	8006a9e <USB_WritePMA>
            ep->xfer_buff += len;
 800579a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057aa:	441a      	add	r2, r3
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d90f      	bls.n	80057f4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a1a      	ldr	r2, [r3, #32]
 80057e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e4:	1ad2      	subs	r2, r2, r3
 80057e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	621a      	str	r2, [r3, #32]
 80057f2:	e00e      	b.n	8005812 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80057f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	643b      	str	r3, [r7, #64]	; 0x40
 800581e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d177      	bne.n	800591e <USB_EPStartXfer+0x85e>
 800582e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	63bb      	str	r3, [r7, #56]	; 0x38
 800583a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	4413      	add	r3, r2
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38
 8005852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	011a      	lsls	r2, r3, #4
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	4413      	add	r3, r2
 8005864:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005874:	b29a      	uxth	r2, r3
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800587e:	2b3e      	cmp	r3, #62	; 0x3e
 8005880:	d921      	bls.n	80058c6 <USB_EPStartXfer+0x806>
 8005882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800588c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2b00      	cmp	r3, #0
 8005896:	d104      	bne.n	80058a2 <USB_EPStartXfer+0x7e2>
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	3b01      	subs	r3, #1
 800589e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	029b      	lsls	r3, r3, #10
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058be:	b29a      	uxth	r2, r3
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e050      	b.n	8005968 <USB_EPStartXfer+0x8a8>
 80058c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <USB_EPStartXfer+0x824>
 80058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058dc:	b29a      	uxth	r2, r3
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	e041      	b.n	8005968 <USB_EPStartXfer+0x8a8>
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d004      	beq.n	8005904 <USB_EPStartXfer+0x844>
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fe:	3301      	adds	r3, #1
 8005900:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29a      	uxth	r2, r3
 800590a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590e:	b29b      	uxth	r3, r3
 8005910:	029b      	lsls	r3, r3, #10
 8005912:	b29b      	uxth	r3, r3
 8005914:	4313      	orrs	r3, r2
 8005916:	b29a      	uxth	r2, r3
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	801a      	strh	r2, [r3, #0]
 800591c:	e024      	b.n	8005968 <USB_EPStartXfer+0x8a8>
 800591e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d11c      	bne.n	8005968 <USB_EPStartXfer+0x8a8>
 800592e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593c:	b29b      	uxth	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005942:	4413      	add	r3, r2
 8005944:	643b      	str	r3, [r7, #64]	; 0x40
 8005946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	011a      	lsls	r2, r3, #4
 8005954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005956:	4413      	add	r3, r2
 8005958:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005962:	b29a      	uxth	r2, r3
 8005964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005966:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	895b      	ldrh	r3, [r3, #10]
 8005974:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6959      	ldr	r1, [r3, #20]
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005988:	b29b      	uxth	r3, r3
 800598a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800598e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005992:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005996:	6800      	ldr	r0, [r0, #0]
 8005998:	f001 f881 	bl	8006a9e <USB_WritePMA>
 800599c:	e227      	b.n	8005dee <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800599e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a2a:	4413      	add	r3, r2
 8005a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	011a      	lsls	r2, r3, #4
 8005a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3e:	4413      	add	r3, r2
 8005a40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	891b      	ldrh	r3, [r3, #8]
 8005a5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6959      	ldr	r1, [r3, #20]
 8005a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a7e:	6800      	ldr	r0, [r0, #0]
 8005a80:	f001 f80d 	bl	8006a9e <USB_WritePMA>
 8005a84:	e1b3      	b.n	8005dee <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a1a      	ldr	r2, [r3, #32]
 8005a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a96:	1ad2      	subs	r2, r2, r3
 8005a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80c6 	beq.w	8005c58 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d177      	bne.n	8005bd8 <USB_EPStartXfer+0xb18>
 8005ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b08:	4413      	add	r3, r2
 8005b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	011a      	lsls	r2, r3, #4
 8005b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b22:	667b      	str	r3, [r7, #100]	; 0x64
 8005b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b38:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3a:	d921      	bls.n	8005b80 <USB_EPStartXfer+0xac0>
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <USB_EPStartXfer+0xa9c>
 8005b52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b56:	3b01      	subs	r3, #1
 8005b58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	029b      	lsls	r3, r3, #10
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e050      	b.n	8005c22 <USB_EPStartXfer+0xb62>
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <USB_EPStartXfer+0xade>
 8005b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	e041      	b.n	8005c22 <USB_EPStartXfer+0xb62>
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <USB_EPStartXfer+0xafe>
 8005bb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bb8:	3301      	adds	r3, #1
 8005bba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	029b      	lsls	r3, r3, #10
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e024      	b.n	8005c22 <USB_EPStartXfer+0xb62>
 8005bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d11c      	bne.n	8005c22 <USB_EPStartXfer+0xb62>
 8005be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bfc:	4413      	add	r3, r2
 8005bfe:	673b      	str	r3, [r7, #112]	; 0x70
 8005c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	011a      	lsls	r2, r3, #4
 8005c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c10:	4413      	add	r3, r2
 8005c12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	895b      	ldrh	r3, [r3, #10]
 8005c2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6959      	ldr	r1, [r3, #20]
 8005c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c50:	6800      	ldr	r0, [r0, #0]
 8005c52:	f000 ff24 	bl	8006a9e <USB_WritePMA>
 8005c56:	e0ca      	b.n	8005dee <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d177      	bne.n	8005d58 <USB_EPStartXfer+0xc98>
 8005c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c88:	4413      	add	r3, r2
 8005c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	011a      	lsls	r2, r3, #4
 8005c9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005cba:	d921      	bls.n	8005d00 <USB_EPStartXfer+0xc40>
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d104      	bne.n	8005cdc <USB_EPStartXfer+0xc1c>
 8005cd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	4313      	orrs	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	e05c      	b.n	8005dba <USB_EPStartXfer+0xcfa>
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <USB_EPStartXfer+0xc5e>
 8005d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e04d      	b.n	8005dba <USB_EPStartXfer+0xcfa>
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <USB_EPStartXfer+0xc7e>
 8005d34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d38:	3301      	adds	r3, #1
 8005d3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e030      	b.n	8005dba <USB_EPStartXfer+0xcfa>
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d128      	bne.n	8005dba <USB_EPStartXfer+0xcfa>
 8005d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	011a      	lsls	r2, r3, #4
 8005da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005da4:	4413      	add	r3, r2
 8005da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005daa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005db8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	891b      	ldrh	r3, [r3, #8]
 8005dc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6959      	ldr	r1, [r3, #20]
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005de0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005de4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005de8:	6800      	ldr	r0, [r0, #0]
 8005dea:	f000 fe58 	bl	8006a9e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e14:	817b      	strh	r3, [r7, #10]
 8005e16:	897b      	ldrh	r3, [r7, #10]
 8005e18:	f083 0310 	eor.w	r3, r3, #16
 8005e1c:	817b      	strh	r3, [r7, #10]
 8005e1e:	897b      	ldrh	r3, [r7, #10]
 8005e20:	f083 0320 	eor.w	r3, r3, #32
 8005e24:	817b      	strh	r3, [r7, #10]
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	897b      	ldrh	r3, [r7, #10]
 8005e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	8013      	strh	r3, [r2, #0]
 8005e56:	f000 bcde 	b.w	8006816 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	7b1b      	ldrb	r3, [r3, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 80bb 	bne.w	8005fe2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d917      	bls.n	8005eb8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699a      	ldr	r2, [r3, #24]
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea8:	1ad2      	subs	r2, r2, r3
 8005eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	619a      	str	r2, [r3, #24]
 8005eb6:	e00e      	b.n	8005ed6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005efa:	4413      	add	r3, r2
 8005efc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	011a      	lsls	r2, r3, #4
 8005f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f12:	4413      	add	r3, r2
 8005f14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f34:	2b3e      	cmp	r3, #62	; 0x3e
 8005f36:	d924      	bls.n	8005f82 <USB_EPStartXfer+0xec2>
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <USB_EPStartXfer+0xe98>
 8005f4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f52:	3b01      	subs	r3, #1
 8005f54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	f000 bc10 	b.w	80067a2 <USB_EPStartXfer+0x16e2>
 8005f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10c      	bne.n	8005fa4 <USB_EPStartXfer+0xee4>
 8005f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	e3fe      	b.n	80067a2 <USB_EPStartXfer+0x16e2>
 8005fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <USB_EPStartXfer+0xf04>
 8005fba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	029b      	lsls	r3, r3, #10
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	e3df      	b.n	80067a2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	78db      	ldrb	r3, [r3, #3]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	f040 8218 	bne.w	8006424 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 809d 	bne.w	8006140 <USB_EPStartXfer+0x1080>
 8006006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006022:	b29b      	uxth	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800602a:	4413      	add	r3, r2
 800602c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	011a      	lsls	r2, r3, #4
 800603e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006042:	4413      	add	r3, r2
 8006044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800604c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006058:	b29a      	uxth	r2, r3
 800605a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b3e      	cmp	r3, #62	; 0x3e
 800606e:	d92b      	bls.n	80060c8 <USB_EPStartXfer+0x1008>
 8006070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <USB_EPStartXfer+0xfe0>
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609a:	3b01      	subs	r3, #1
 800609c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	029b      	lsls	r3, r3, #10
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060be:	b29a      	uxth	r2, r3
 80060c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060c4:	801a      	strh	r2, [r3, #0]
 80060c6:	e070      	b.n	80061aa <USB_EPStartXfer+0x10ea>
 80060c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10c      	bne.n	80060f2 <USB_EPStartXfer+0x1032>
 80060d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	e05b      	b.n	80061aa <USB_EPStartXfer+0x10ea>
 80060f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <USB_EPStartXfer+0x1062>
 8006118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611c:	3301      	adds	r3, #1
 800611e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29a      	uxth	r2, r3
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	b29b      	uxth	r3, r3
 8006130:	029b      	lsls	r3, r3, #10
 8006132:	b29b      	uxth	r3, r3
 8006134:	4313      	orrs	r3, r2
 8006136:	b29a      	uxth	r2, r3
 8006138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800613c:	801a      	strh	r2, [r3, #0]
 800613e:	e034      	b.n	80061aa <USB_EPStartXfer+0x10ea>
 8006140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d12c      	bne.n	80061aa <USB_EPStartXfer+0x10ea>
 8006150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616c:	b29b      	uxth	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006174:	4413      	add	r3, r2
 8006176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800617a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	011a      	lsls	r2, r3, #4
 8006188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800618c:	4413      	add	r3, r2
 800618e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f040 809d 	bne.w	8006304 <USB_EPStartXfer+0x1244>
 80061ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ee:	4413      	add	r3, r2
 80061f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	011a      	lsls	r2, r3, #4
 8006202:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006206:	4413      	add	r3, r2
 8006208:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800620c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800621c:	b29a      	uxth	r2, r3
 800621e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b3e      	cmp	r3, #62	; 0x3e
 8006232:	d92b      	bls.n	800628c <USB_EPStartXfer+0x11cc>
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	2b00      	cmp	r3, #0
 8006258:	d104      	bne.n	8006264 <USB_EPStartXfer+0x11a4>
 800625a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625e:	3b01      	subs	r3, #1
 8006260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29a      	uxth	r2, r3
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006270:	b29b      	uxth	r3, r3
 8006272:	029b      	lsls	r3, r3, #10
 8006274:	b29b      	uxth	r3, r3
 8006276:	4313      	orrs	r3, r2
 8006278:	b29b      	uxth	r3, r3
 800627a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	e069      	b.n	8006360 <USB_EPStartXfer+0x12a0>
 800628c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10c      	bne.n	80062b6 <USB_EPStartXfer+0x11f6>
 800629c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	e054      	b.n	8006360 <USB_EPStartXfer+0x12a0>
 80062b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <USB_EPStartXfer+0x1226>
 80062dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e0:	3301      	adds	r3, #1
 80062e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006300:	801a      	strh	r2, [r3, #0]
 8006302:	e02d      	b.n	8006360 <USB_EPStartXfer+0x12a0>
 8006304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d125      	bne.n	8006360 <USB_EPStartXfer+0x12a0>
 8006314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006322:	b29b      	uxth	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800632a:	4413      	add	r3, r2
 800632c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	011a      	lsls	r2, r3, #4
 800633e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006342:	4413      	add	r3, r2
 8006344:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006348:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800634c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	b29a      	uxth	r2, r3
 800635a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800635e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8218 	beq.w	80067a2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006392:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <USB_EPStartXfer+0x12ea>
 800639e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f040 81f5 	bne.w	80067a2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 81ee 	bne.w	80067a2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80063f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	441a      	add	r2, r3
 800640a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]
 8006422:	e1be      	b.n	80067a2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	78db      	ldrb	r3, [r3, #3]
 8006430:	2b01      	cmp	r3, #1
 8006432:	f040 81b4 	bne.w	800679e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d917      	bls.n	8006482 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006472:	1ad2      	subs	r2, r2, r3
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	619a      	str	r2, [r3, #24]
 8006480:	e00e      	b.n	80064a0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	785b      	ldrb	r3, [r3, #1]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 8085 	bne.w	80065bc <USB_EPStartXfer+0x14fc>
 80064b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064d6:	4413      	add	r3, r2
 80064d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	011a      	lsls	r2, r3, #4
 80064ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064ee:	4413      	add	r3, r2
 80064f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006504:	b29a      	uxth	r2, r3
 8006506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800650a:	801a      	strh	r2, [r3, #0]
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006510:	2b3e      	cmp	r3, #62	; 0x3e
 8006512:	d923      	bls.n	800655c <USB_EPStartXfer+0x149c>
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <USB_EPStartXfer+0x1474>
 800652a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800652e:	3b01      	subs	r3, #1
 8006530:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29a      	uxth	r2, r3
 800653c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006540:	b29b      	uxth	r3, r3
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	b29b      	uxth	r3, r3
 8006546:	4313      	orrs	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006552:	b29a      	uxth	r2, r3
 8006554:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	e060      	b.n	800661e <USB_EPStartXfer+0x155e>
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10c      	bne.n	800657e <USB_EPStartXfer+0x14be>
 8006564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006574:	b29a      	uxth	r2, r3
 8006576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	e04f      	b.n	800661e <USB_EPStartXfer+0x155e>
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006582:	085b      	lsrs	r3, r3, #1
 8006584:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <USB_EPStartXfer+0x14de>
 8006594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006598:	3301      	adds	r3, #1
 800659a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800659e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	029b      	lsls	r3, r3, #10
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	4313      	orrs	r3, r2
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	e030      	b.n	800661e <USB_EPStartXfer+0x155e>
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d128      	bne.n	800661e <USB_EPStartXfer+0x155e>
 80065cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065f0:	4413      	add	r3, r2
 80065f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	011a      	lsls	r2, r3, #4
 8006604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006608:	4413      	add	r3, r2
 800660a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800660e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800662c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	785b      	ldrb	r3, [r3, #1]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f040 8085 	bne.w	8006748 <USB_EPStartXfer+0x1688>
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006662:	4413      	add	r3, r2
 8006664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	011a      	lsls	r2, r3, #4
 8006676:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800667a:	4413      	add	r3, r2
 800667c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006684:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006690:	b29a      	uxth	r2, r3
 8006692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669c:	2b3e      	cmp	r3, #62	; 0x3e
 800669e:	d923      	bls.n	80066e8 <USB_EPStartXfer+0x1628>
 80066a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d104      	bne.n	80066c0 <USB_EPStartXfer+0x1600>
 80066b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ba:	3b01      	subs	r3, #1
 80066bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	029b      	lsls	r3, r3, #10
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4313      	orrs	r3, r2
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066de:	b29a      	uxth	r2, r3
 80066e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066e4:	801a      	strh	r2, [r3, #0]
 80066e6:	e05c      	b.n	80067a2 <USB_EPStartXfer+0x16e2>
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10c      	bne.n	800670a <USB_EPStartXfer+0x164a>
 80066f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006700:	b29a      	uxth	r2, r3
 8006702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	e04b      	b.n	80067a2 <USB_EPStartXfer+0x16e2>
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <USB_EPStartXfer+0x166a>
 8006720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006724:	3301      	adds	r3, #1
 8006726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800672a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29a      	uxth	r2, r3
 8006732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006736:	b29b      	uxth	r3, r3
 8006738:	029b      	lsls	r3, r3, #10
 800673a:	b29b      	uxth	r3, r3
 800673c:	4313      	orrs	r3, r2
 800673e:	b29a      	uxth	r2, r3
 8006740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	e02c      	b.n	80067a2 <USB_EPStartXfer+0x16e2>
 8006748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d124      	bne.n	80067a2 <USB_EPStartXfer+0x16e2>
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800676e:	4413      	add	r3, r2
 8006770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	011a      	lsls	r2, r3, #4
 8006782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006786:	4413      	add	r3, r2
 8006788:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800678c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006794:	b29a      	uxth	r2, r3
 8006796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	e001      	b.n	80067a2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e03a      	b.n	8006818 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006812:	b29b      	uxth	r3, r3
 8006814:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d020      	beq.n	8006876 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800684a:	81bb      	strh	r3, [r7, #12]
 800684c:	89bb      	ldrh	r3, [r7, #12]
 800684e:	f083 0310 	eor.w	r3, r3, #16
 8006852:	81bb      	strh	r3, [r7, #12]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	89bb      	ldrh	r3, [r7, #12]
 8006860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]
 8006874:	e01f      	b.n	80068b6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688c:	81fb      	strh	r3, [r7, #14]
 800688e:	89fb      	ldrh	r3, [r7, #14]
 8006890:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006894:	81fb      	strh	r3, [r7, #14]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	89fb      	ldrh	r3, [r7, #14]
 80068a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc80      	pop	{r7}
 80068c0:	4770      	bx	lr

080068c2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b087      	sub	sp, #28
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	7b1b      	ldrb	r3, [r3, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f040 809d 	bne.w	8006a10 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d04c      	beq.n	8006978 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	823b      	strh	r3, [r7, #16]
 80068ec:	8a3b      	ldrh	r3, [r7, #16]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01b      	beq.n	800692e <USB_EPClearStall+0x6c>
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690c:	81fb      	strh	r3, [r7, #14]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	89fb      	ldrh	r3, [r7, #14]
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	78db      	ldrb	r3, [r3, #3]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d06c      	beq.n	8006a10 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800694c:	81bb      	strh	r3, [r7, #12]
 800694e:	89bb      	ldrh	r3, [r7, #12]
 8006950:	f083 0320 	eor.w	r3, r3, #32
 8006954:	81bb      	strh	r3, [r7, #12]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	89bb      	ldrh	r3, [r7, #12]
 8006962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006972:	b29b      	uxth	r3, r3
 8006974:	8013      	strh	r3, [r2, #0]
 8006976:	e04b      	b.n	8006a10 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	82fb      	strh	r3, [r7, #22]
 8006986:	8afb      	ldrh	r3, [r7, #22]
 8006988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01b      	beq.n	80069c8 <USB_EPClearStall+0x106>
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	82bb      	strh	r3, [r7, #20]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	8abb      	ldrh	r3, [r7, #20]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069de:	827b      	strh	r3, [r7, #18]
 80069e0:	8a7b      	ldrh	r3, [r7, #18]
 80069e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069e6:	827b      	strh	r3, [r7, #18]
 80069e8:	8a7b      	ldrh	r3, [r7, #18]
 80069ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ee:	827b      	strh	r3, [r7, #18]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	8a7b      	ldrh	r3, [r7, #18]
 80069fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2280      	movs	r2, #128	; 0x80
 8006a32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr

08006a42 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr

08006a6a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b08b      	sub	sp, #44	; 0x2c
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	461a      	mov	r2, r3
 8006aac:	460b      	mov	r3, r1
 8006aae:	80fb      	strh	r3, [r7, #6]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ab4:	88bb      	ldrh	r3, [r7, #4]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	005a      	lsls	r2, r3, #1
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad6:	e01e      	b.n	8006b16 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	b21a      	sxth	r2, r3
 8006ae8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	b21b      	sxth	r3, r3
 8006af0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	8a7a      	ldrh	r2, [r7, #18]
 8006af6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	3302      	adds	r3, #2
 8006afc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	3302      	adds	r3, #2
 8006b02:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	3301      	adds	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	3b01      	subs	r3, #1
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1dd      	bne.n	8006ad8 <USB_WritePMA+0x3a>
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	372c      	adds	r7, #44	; 0x2c
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr

08006b28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b08b      	sub	sp, #44	; 0x2c
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4611      	mov	r1, r2
 8006b34:	461a      	mov	r2, r3
 8006b36:	460b      	mov	r3, r1
 8006b38:	80fb      	strh	r3, [r7, #6]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b3e:	88bb      	ldrh	r3, [r7, #4]
 8006b40:	085b      	lsrs	r3, r3, #1
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	005a      	lsls	r2, r3, #1
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b5a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b60:	e01b      	b.n	8006b9a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	0a1b      	lsrs	r3, r3, #8
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	3302      	adds	r3, #2
 8006b92:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	3b01      	subs	r3, #1
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e0      	bne.n	8006b62 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006ba0:	88bb      	ldrh	r3, [r7, #4]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	701a      	strb	r2, [r3, #0]
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	372c      	adds	r7, #44	; 0x2c
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	7c1b      	ldrb	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d115      	bne.n	8006c0a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be2:	2202      	movs	r2, #2
 8006be4:	2181      	movs	r1, #129	; 0x81
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fecd 	bl	8008986 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fec3 	bl	8008986 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c08:	e012      	b.n	8006c30 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c0a:	2340      	movs	r3, #64	; 0x40
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	2181      	movs	r1, #129	; 0x81
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 feb8 	bl	8008986 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	2202      	movs	r2, #2
 8006c20:	2101      	movs	r1, #1
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 feaf 	bl	8008986 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c30:	2308      	movs	r3, #8
 8006c32:	2203      	movs	r2, #3
 8006c34:	2182      	movs	r1, #130	; 0x82
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fea5 	bl	8008986 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c42:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c46:	f001 ffc5 	bl	8008bd4 <USBD_static_malloc>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
 8006c60:	e026      	b.n	8006cb0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7c1b      	ldrb	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c96:	2101      	movs	r1, #1
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 ff65 	bl	8008b68 <USBD_LL_PrepareReceive>
 8006c9e:	e007      	b.n	8006cb0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ca6:	2340      	movs	r3, #64	; 0x40
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 ff5c 	bl	8008b68 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cca:	2181      	movs	r1, #129	; 0x81
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fe80 	bl	80089d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cd8:	2101      	movs	r1, #1
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 fe79 	bl	80089d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ce8:	2182      	movs	r1, #130	; 0x82
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fe71 	bl	80089d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00e      	beq.n	8006d1e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 ff6b 	bl	8008bec <USBD_static_free>
    pdev->pClassData = NULL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d38:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d039      	beq.n	8006dc6 <USBD_CDC_Setup+0x9e>
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d17f      	bne.n	8006e56 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	88db      	ldrh	r3, [r3, #6]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d029      	beq.n	8006db2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	da11      	bge.n	8006d8c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	88d2      	ldrh	r2, [r2, #6]
 8006d7a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d7c:	6939      	ldr	r1, [r7, #16]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	88db      	ldrh	r3, [r3, #6]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 fa24 	bl	80081d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006d8a:	e06b      	b.n	8006e64 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	785a      	ldrb	r2, [r3, #1]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	88db      	ldrh	r3, [r3, #6]
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006da2:	6939      	ldr	r1, [r7, #16]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	88db      	ldrh	r3, [r3, #6]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 fa3f 	bl	800822e <USBD_CtlPrepareRx>
      break;
 8006db0:	e058      	b.n	8006e64 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	7850      	ldrb	r0, [r2, #1]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	4798      	blx	r3
      break;
 8006dc4:	e04e      	b.n	8006e64 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	2b0b      	cmp	r3, #11
 8006dcc:	d02e      	beq.n	8006e2c <USBD_CDC_Setup+0x104>
 8006dce:	2b0b      	cmp	r3, #11
 8006dd0:	dc38      	bgt.n	8006e44 <USBD_CDC_Setup+0x11c>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <USBD_CDC_Setup+0xb4>
 8006dd6:	2b0a      	cmp	r3, #10
 8006dd8:	d014      	beq.n	8006e04 <USBD_CDC_Setup+0xdc>
 8006dda:	e033      	b.n	8006e44 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d107      	bne.n	8006df6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006de6:	f107 030c 	add.w	r3, r7, #12
 8006dea:	2202      	movs	r2, #2
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 f9ef 	bl	80081d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006df4:	e02e      	b.n	8006e54 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 f980 	bl	80080fe <USBD_CtlError>
            ret = USBD_FAIL;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	75fb      	strb	r3, [r7, #23]
          break;
 8006e02:	e027      	b.n	8006e54 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d107      	bne.n	8006e1e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e0e:	f107 030f 	add.w	r3, r7, #15
 8006e12:	2201      	movs	r2, #1
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f9db 	bl	80081d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e1c:	e01a      	b.n	8006e54 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 f96c 	bl	80080fe <USBD_CtlError>
            ret = USBD_FAIL;
 8006e26:	2302      	movs	r3, #2
 8006e28:	75fb      	strb	r3, [r7, #23]
          break;
 8006e2a:	e013      	b.n	8006e54 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d00d      	beq.n	8006e52 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f960 	bl	80080fe <USBD_CtlError>
            ret = USBD_FAIL;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e42:	e006      	b.n	8006e52 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 f959 	bl	80080fe <USBD_CtlError>
          ret = USBD_FAIL;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e50:	e000      	b.n	8006e54 <USBD_CDC_Setup+0x12c>
          break;
 8006e52:	bf00      	nop
      }
      break;
 8006e54:	e006      	b.n	8006e64 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 f950 	bl	80080fe <USBD_CtlError>
      ret = USBD_FAIL;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	75fb      	strb	r3, [r7, #23]
      break;
 8006e62:	bf00      	nop
  }

  return ret;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e80:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e88:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d03a      	beq.n	8006f0a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	331c      	adds	r3, #28
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d029      	beq.n	8006efe <USBD_CDC_DataIn+0x90>
 8006eaa:	78fa      	ldrb	r2, [r7, #3]
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	331c      	adds	r3, #28
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	78f9      	ldrb	r1, [r7, #3]
 8006ebe:	68b8      	ldr	r0, [r7, #8]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4403      	add	r3, r0
 8006eca:	3338      	adds	r3, #56	; 0x38
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ed2:	fb01 f303 	mul.w	r3, r1, r3
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d110      	bne.n	8006efe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	331c      	adds	r3, #28
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ef0:	78f9      	ldrb	r1, [r7, #3]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 fe13 	bl	8008b22 <USBD_LL_Transmit>
 8006efc:	e003      	b.n	8006f06 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e000      	b.n	8006f0c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fe3e 	bl	8008bae <USBD_LL_GetRxDataSize>
 8006f32:	4602      	mov	r2, r0
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00d      	beq.n	8006f60 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4798      	blx	r3

    return USBD_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e000      	b.n	8006f62 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f60:	2302      	movs	r3, #2
  }
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f78:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d015      	beq.n	8006fb0 <USBD_CDC_EP0_RxReady+0x46>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f8a:	2bff      	cmp	r3, #255	; 0xff
 8006f8c:	d010      	beq.n	8006fb0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fa4:	b292      	uxth	r2, r2
 8006fa6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	22ff      	movs	r2, #255	; 0xff
 8006fac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2243      	movs	r2, #67	; 0x43
 8006fc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006fca:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000098 	.word	0x20000098

08006fdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2243      	movs	r2, #67	; 0x43
 8006fe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006fea:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	20000054 	.word	0x20000054

08006ffc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2243      	movs	r2, #67	; 0x43
 8007008:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800700a:	4b03      	ldr	r3, [pc, #12]	; (8007018 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	200000dc 	.word	0x200000dc

0800701c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	220a      	movs	r2, #10
 8007028:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800702a:	4b03      	ldr	r3, [pc, #12]	; (8007038 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000010 	.word	0x20000010

0800703c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007046:	2302      	movs	r3, #2
 8007048:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007086:	88fa      	ldrh	r2, [r7, #6]
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr

0800709a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070aa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr

080070c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01c      	beq.n	8007114 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d115      	bne.n	8007110 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007102:	b29b      	uxth	r3, r3
 8007104:	2181      	movs	r1, #129	; 0x81
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fd0b 	bl	8008b22 <USBD_LL_Transmit>

      return USBD_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e002      	b.n	8007116 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007114:	2302      	movs	r3, #2
  }
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d017      	beq.n	8007168 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	7c1b      	ldrb	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d109      	bne.n	8007154 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800714a:	2101      	movs	r1, #1
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 fd0b 	bl	8008b68 <USBD_LL_PrepareReceive>
 8007152:	e007      	b.n	8007164 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800715a:	2340      	movs	r3, #64	; 0x40
 800715c:	2101      	movs	r1, #1
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 fd02 	bl	8008b68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	e000      	b.n	800716a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007168:	2302      	movs	r3, #2
  }
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	4613      	mov	r3, r2
 8007180:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007188:	4814      	ldr	r0, [pc, #80]	; (80071dc <USBD_Init+0x68>)
 800718a:	f001 fe31 	bl	8008df0 <iprintf>
 800718e:	4814      	ldr	r0, [pc, #80]	; (80071e0 <USBD_Init+0x6c>)
 8007190:	f001 fe2e 	bl	8008df0 <iprintf>
 8007194:	200a      	movs	r0, #10
 8007196:	f001 fe3d 	bl	8008e14 <putchar>
#endif
    return USBD_FAIL;
 800719a:	2302      	movs	r3, #2
 800719c:	e01a      	b.n	80071d4 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	79fa      	ldrb	r2, [r7, #7]
 80071ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f001 fb65 	bl	800889c <USBD_LL_Init>

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	08009b7c 	.word	0x08009b7c
 80071e0:	08009b84 	.word	0x08009b84

080071e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
 8007204:	e00a      	b.n	800721c <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007206:	4808      	ldr	r0, [pc, #32]	; (8007228 <USBD_RegisterClass+0x44>)
 8007208:	f001 fdf2 	bl	8008df0 <iprintf>
 800720c:	4807      	ldr	r0, [pc, #28]	; (800722c <USBD_RegisterClass+0x48>)
 800720e:	f001 fdef 	bl	8008df0 <iprintf>
 8007212:	200a      	movs	r0, #10
 8007214:	f001 fdfe 	bl	8008e14 <putchar>
#endif
    status = USBD_FAIL;
 8007218:	2302      	movs	r3, #2
 800721a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	08009b7c 	.word	0x08009b7c
 800722c:	08009b9c 	.word	0x08009b9c

08007230 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 fb89 	bl	8008950 <USBD_LL_Start>

  return USBD_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr

0800725c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007268:	2302      	movs	r3, #2
 800726a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00c      	beq.n	8007290 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	78fa      	ldrb	r2, [r7, #3]
 8007280:	4611      	mov	r1, r2
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	4798      	blx	r3
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	4611      	mov	r1, r2
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fed7 	bl	8008086 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d016      	beq.n	800732a <USBD_LL_SetupStage+0x6a>
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d81c      	bhi.n	800733a <USBD_LL_SetupStage+0x7a>
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <USBD_LL_SetupStage+0x4a>
 8007304:	2b01      	cmp	r3, #1
 8007306:	d008      	beq.n	800731a <USBD_LL_SetupStage+0x5a>
 8007308:	e017      	b.n	800733a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9ca 	bl	80076ac <USBD_StdDevReq>
      break;
 8007318:	e01a      	b.n	8007350 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa2c 	bl	8007780 <USBD_StdItfReq>
      break;
 8007328:	e012      	b.n	8007350 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa6c 	bl	8007810 <USBD_StdEPReq>
      break;
 8007338:	e00a      	b.n	8007350 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007344:	b2db      	uxtb	r3, r3
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 fb61 	bl	8008a10 <USBD_LL_StallEP>
      break;
 800734e:	bf00      	nop
  }

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b086      	sub	sp, #24
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	460b      	mov	r3, r1
 8007364:	607a      	str	r2, [r7, #4]
 8007366:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007368:	7afb      	ldrb	r3, [r7, #11]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d14b      	bne.n	8007406 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007374:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800737c:	2b03      	cmp	r3, #3
 800737e:	d134      	bne.n	80073ea <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	429a      	cmp	r2, r3
 800738a:	d919      	bls.n	80073c0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	1ad2      	subs	r2, r2, r3
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d203      	bcs.n	80073ae <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	e002      	b.n	80073b4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 ff56 	bl	800826a <USBD_CtlContinueRx>
 80073be:	e038      	b.n	8007432 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d105      	bne.n	80073e2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 ff53 	bl	800828e <USBD_CtlSendStatus>
 80073e8:	e023      	b.n	8007432 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073f0:	2b05      	cmp	r3, #5
 80073f2:	d11e      	bne.n	8007432 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80073fc:	2100      	movs	r1, #0
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f001 fb06 	bl	8008a10 <USBD_LL_StallEP>
 8007404:	e015      	b.n	8007432 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00d      	beq.n	800742e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007418:	2b03      	cmp	r3, #3
 800741a:	d108      	bne.n	800742e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	7afa      	ldrb	r2, [r7, #11]
 8007426:	4611      	mov	r1, r2
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	4798      	blx	r3
 800742c:	e001      	b.n	8007432 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800742e:	2302      	movs	r3, #2
 8007430:	e000      	b.n	8007434 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	460b      	mov	r3, r1
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800744a:	7afb      	ldrb	r3, [r7, #11]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d17f      	bne.n	8007550 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3314      	adds	r3, #20
 8007454:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800745c:	2b02      	cmp	r3, #2
 800745e:	d15c      	bne.n	800751a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	429a      	cmp	r2, r3
 800746a:	d915      	bls.n	8007498 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	1ad2      	subs	r2, r2, r3
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	b29b      	uxth	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fec0 	bl	800820a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800748a:	2300      	movs	r3, #0
 800748c:	2200      	movs	r2, #0
 800748e:	2100      	movs	r1, #0
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f001 fb69 	bl	8008b68 <USBD_LL_PrepareReceive>
 8007496:	e04e      	b.n	8007536 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	6912      	ldr	r2, [r2, #16]
 80074a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80074a4:	fb01 f202 	mul.w	r2, r1, r2
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d11c      	bne.n	80074e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d316      	bcc.n	80074e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d20f      	bcs.n	80074e8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074c8:	2200      	movs	r2, #0
 80074ca:	2100      	movs	r1, #0
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 fe9c 	bl	800820a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074da:	2300      	movs	r3, #0
 80074dc:	2200      	movs	r2, #0
 80074de:	2100      	movs	r1, #0
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f001 fb41 	bl	8008b68 <USBD_LL_PrepareReceive>
 80074e6:	e026      	b.n	8007536 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d105      	bne.n	800750a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800750a:	2180      	movs	r1, #128	; 0x80
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f001 fa7f 	bl	8008a10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fece 	bl	80082b4 <USBD_CtlReceiveStatus>
 8007518:	e00d      	b.n	8007536 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007520:	2b04      	cmp	r3, #4
 8007522:	d004      	beq.n	800752e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800752a:	2b00      	cmp	r3, #0
 800752c:	d103      	bne.n	8007536 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f001 fa6d 	bl	8008a10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800753c:	2b01      	cmp	r3, #1
 800753e:	d11d      	bne.n	800757c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fe81 	bl	8007248 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800754e:	e015      	b.n	800757c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00d      	beq.n	8007578 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007562:	2b03      	cmp	r3, #3
 8007564:	d108      	bne.n	8007578 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	7afa      	ldrb	r2, [r7, #11]
 8007570:	4611      	mov	r1, r2
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	4798      	blx	r3
 8007576:	e001      	b.n	800757c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007578:	2302      	movs	r3, #2
 800757a:	e000      	b.n	800757e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800758e:	2340      	movs	r3, #64	; 0x40
 8007590:	2200      	movs	r2, #0
 8007592:	2100      	movs	r1, #0
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 f9f6 	bl	8008986 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2240      	movs	r2, #64	; 0x40
 80075a6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075aa:	2340      	movs	r3, #64	; 0x40
 80075ac:	2200      	movs	r2, #0
 80075ae:	2180      	movs	r1, #128	; 0x80
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 f9e8 	bl	8008986 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2240      	movs	r2, #64	; 0x40
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d009      	beq.n	80075fe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6852      	ldr	r2, [r2, #4]
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	4611      	mov	r1, r2
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
  }

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr

08007626 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2204      	movs	r2, #4
 800763e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr

0800764e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765c:	2b04      	cmp	r3, #4
 800765e:	d105      	bne.n	800766c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr

08007678 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007686:	2b03      	cmp	r3, #3
 8007688:	d10b      	bne.n	80076a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d005      	beq.n	80076a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d005      	beq.n	80076d2 <USBD_StdDevReq+0x26>
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	d84f      	bhi.n	800776a <USBD_StdDevReq+0xbe>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d009      	beq.n	80076e2 <USBD_StdDevReq+0x36>
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d14b      	bne.n	800776a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
      break;
 80076e0:	e048      	b.n	8007774 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b09      	cmp	r3, #9
 80076e8:	d839      	bhi.n	800775e <USBD_StdDevReq+0xb2>
 80076ea:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <USBD_StdDevReq+0x44>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007741 	.word	0x08007741
 80076f4:	08007755 	.word	0x08007755
 80076f8:	0800775f 	.word	0x0800775f
 80076fc:	0800774b 	.word	0x0800774b
 8007700:	0800775f 	.word	0x0800775f
 8007704:	08007723 	.word	0x08007723
 8007708:	08007719 	.word	0x08007719
 800770c:	0800775f 	.word	0x0800775f
 8007710:	08007737 	.word	0x08007737
 8007714:	0800772d 	.word	0x0800772d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f9dc 	bl	8007ad8 <USBD_GetDescriptor>
          break;
 8007720:	e022      	b.n	8007768 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fb3f 	bl	8007da8 <USBD_SetAddress>
          break;
 800772a:	e01d      	b.n	8007768 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fb7e 	bl	8007e30 <USBD_SetConfig>
          break;
 8007734:	e018      	b.n	8007768 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fc07 	bl	8007f4c <USBD_GetConfig>
          break;
 800773e:	e013      	b.n	8007768 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fc37 	bl	8007fb6 <USBD_GetStatus>
          break;
 8007748:	e00e      	b.n	8007768 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc65 	bl	800801c <USBD_SetFeature>
          break;
 8007752:	e009      	b.n	8007768 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fc74 	bl	8008044 <USBD_ClrFeature>
          break;
 800775c:	e004      	b.n	8007768 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fccc 	bl	80080fe <USBD_CtlError>
          break;
 8007766:	bf00      	nop
      }
      break;
 8007768:	e004      	b.n	8007774 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fcc6 	bl	80080fe <USBD_CtlError>
      break;
 8007772:	bf00      	nop
  }

  return ret;
 8007774:	7bfb      	ldrb	r3, [r7, #15]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop

08007780 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d005      	beq.n	80077a6 <USBD_StdItfReq+0x26>
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d82e      	bhi.n	80077fc <USBD_StdItfReq+0x7c>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <USBD_StdItfReq+0x26>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d12a      	bne.n	80077fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ac:	3b01      	subs	r3, #1
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d81d      	bhi.n	80077ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	889b      	ldrh	r3, [r3, #4]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d813      	bhi.n	80077e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4798      	blx	r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	88db      	ldrh	r3, [r3, #6]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d110      	bne.n	80077f8 <USBD_StdItfReq+0x78>
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10d      	bne.n	80077f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fd56 	bl	800828e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077e2:	e009      	b.n	80077f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fc89 	bl	80080fe <USBD_CtlError>
          break;
 80077ec:	e004      	b.n	80077f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc84 	bl	80080fe <USBD_CtlError>
          break;
 80077f6:	e000      	b.n	80077fa <USBD_StdItfReq+0x7a>
          break;
 80077f8:	bf00      	nop
      }
      break;
 80077fa:	e004      	b.n	8007806 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fc7d 	bl	80080fe <USBD_CtlError>
      break;
 8007804:	bf00      	nop
  }

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	889b      	ldrh	r3, [r3, #4]
 8007822:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800782c:	2b40      	cmp	r3, #64	; 0x40
 800782e:	d007      	beq.n	8007840 <USBD_StdEPReq+0x30>
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	f200 8146 	bhi.w	8007ac2 <USBD_StdEPReq+0x2b2>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <USBD_StdEPReq+0x40>
 800783a:	2b20      	cmp	r3, #32
 800783c:	f040 8141 	bne.w	8007ac2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
      break;
 800784e:	e13d      	b.n	8007acc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007858:	2b20      	cmp	r3, #32
 800785a:	d10a      	bne.n	8007872 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
 800786a:	4603      	mov	r3, r0
 800786c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	e12d      	b.n	8007ace <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b03      	cmp	r3, #3
 8007878:	d007      	beq.n	800788a <USBD_StdEPReq+0x7a>
 800787a:	2b03      	cmp	r3, #3
 800787c:	f300 811b 	bgt.w	8007ab6 <USBD_StdEPReq+0x2a6>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d072      	beq.n	800796a <USBD_StdEPReq+0x15a>
 8007884:	2b01      	cmp	r3, #1
 8007886:	d03a      	beq.n	80078fe <USBD_StdEPReq+0xee>
 8007888:	e115      	b.n	8007ab6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007890:	2b02      	cmp	r3, #2
 8007892:	d002      	beq.n	800789a <USBD_StdEPReq+0x8a>
 8007894:	2b03      	cmp	r3, #3
 8007896:	d015      	beq.n	80078c4 <USBD_StdEPReq+0xb4>
 8007898:	e02b      	b.n	80078f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00c      	beq.n	80078ba <USBD_StdEPReq+0xaa>
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b80      	cmp	r3, #128	; 0x80
 80078a4:	d009      	beq.n	80078ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 f8b0 	bl	8008a10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078b0:	2180      	movs	r1, #128	; 0x80
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 f8ac 	bl	8008a10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078b8:	e020      	b.n	80078fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc1e 	bl	80080fe <USBD_CtlError>
              break;
 80078c2:	e01b      	b.n	80078fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	885b      	ldrh	r3, [r3, #2]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10e      	bne.n	80078ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <USBD_StdEPReq+0xda>
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b80      	cmp	r3, #128	; 0x80
 80078d6:	d008      	beq.n	80078ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	88db      	ldrh	r3, [r3, #6]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d104      	bne.n	80078ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 f893 	bl	8008a10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fccf 	bl	800828e <USBD_CtlSendStatus>

              break;
 80078f0:	e004      	b.n	80078fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fc02 	bl	80080fe <USBD_CtlError>
              break;
 80078fa:	bf00      	nop
          }
          break;
 80078fc:	e0e0      	b.n	8007ac0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007904:	2b02      	cmp	r3, #2
 8007906:	d002      	beq.n	800790e <USBD_StdEPReq+0xfe>
 8007908:	2b03      	cmp	r3, #3
 800790a:	d015      	beq.n	8007938 <USBD_StdEPReq+0x128>
 800790c:	e026      	b.n	800795c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00c      	beq.n	800792e <USBD_StdEPReq+0x11e>
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b80      	cmp	r3, #128	; 0x80
 8007918:	d009      	beq.n	800792e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 f876 	bl	8008a10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007924:	2180      	movs	r1, #128	; 0x80
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 f872 	bl	8008a10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800792c:	e01c      	b.n	8007968 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fbe4 	bl	80080fe <USBD_CtlError>
              break;
 8007936:	e017      	b.n	8007968 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	885b      	ldrh	r3, [r3, #2]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d112      	bne.n	8007966 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 f87d 	bl	8008a4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fc9a 	bl	800828e <USBD_CtlSendStatus>
              }
              break;
 800795a:	e004      	b.n	8007966 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fbcd 	bl	80080fe <USBD_CtlError>
              break;
 8007964:	e000      	b.n	8007968 <USBD_StdEPReq+0x158>
              break;
 8007966:	bf00      	nop
          }
          break;
 8007968:	e0aa      	b.n	8007ac0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007970:	2b02      	cmp	r3, #2
 8007972:	d002      	beq.n	800797a <USBD_StdEPReq+0x16a>
 8007974:	2b03      	cmp	r3, #3
 8007976:	d032      	beq.n	80079de <USBD_StdEPReq+0x1ce>
 8007978:	e097      	b.n	8007aaa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <USBD_StdEPReq+0x180>
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d004      	beq.n	8007990 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fbb8 	bl	80080fe <USBD_CtlError>
                break;
 800798e:	e091      	b.n	8007ab4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007994:	2b00      	cmp	r3, #0
 8007996:	da0b      	bge.n	80079b0 <USBD_StdEPReq+0x1a0>
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	3310      	adds	r3, #16
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	4413      	add	r3, r2
 80079ac:	3304      	adds	r3, #4
 80079ae:	e00b      	b.n	80079c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4413      	add	r3, r2
 80079c6:	3304      	adds	r3, #4
 80079c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2202      	movs	r2, #2
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fbfb 	bl	80081d2 <USBD_CtlSendData>
              break;
 80079dc:	e06a      	b.n	8007ab4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da11      	bge.n	8007a0a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	3318      	adds	r3, #24
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d117      	bne.n	8007a30 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fb7b 	bl	80080fe <USBD_CtlError>
                  break;
 8007a08:	e054      	b.n	8007ab4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	f003 020f 	and.w	r2, r3, #15
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fb68 	bl	80080fe <USBD_CtlError>
                  break;
 8007a2e:	e041      	b.n	8007ab4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da0b      	bge.n	8007a50 <USBD_StdEPReq+0x240>
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	3310      	adds	r3, #16
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	e00b      	b.n	8007a68 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <USBD_StdEPReq+0x266>
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d103      	bne.n	8007a7e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	e00e      	b.n	8007a9c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 f802 	bl	8008a8c <USBD_LL_IsStallEP>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	e002      	b.n	8007a9c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fb95 	bl	80081d2 <USBD_CtlSendData>
              break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb26 	bl	80080fe <USBD_CtlError>
              break;
 8007ab2:	bf00      	nop
          }
          break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb20 	bl	80080fe <USBD_CtlError>
          break;
 8007abe:	bf00      	nop
      }
      break;
 8007ac0:	e004      	b.n	8007acc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fb1a 	bl	80080fe <USBD_CtlError>
      break;
 8007aca:	bf00      	nop
  }

  return ret;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	885b      	ldrh	r3, [r3, #2]
 8007af2:	0a1b      	lsrs	r3, r3, #8
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	2b06      	cmp	r3, #6
 8007afa:	f200 8128 	bhi.w	8007d4e <USBD_GetDescriptor+0x276>
 8007afe:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <USBD_GetDescriptor+0x2c>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007b21 	.word	0x08007b21
 8007b08:	08007b39 	.word	0x08007b39
 8007b0c:	08007b79 	.word	0x08007b79
 8007b10:	08007d4f 	.word	0x08007d4f
 8007b14:	08007d4f 	.word	0x08007d4f
 8007b18:	08007cef 	.word	0x08007cef
 8007b1c:	08007d1b 	.word	0x08007d1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7c12      	ldrb	r2, [r2, #16]
 8007b2c:	f107 0108 	add.w	r1, r7, #8
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
 8007b34:	60f8      	str	r0, [r7, #12]
      break;
 8007b36:	e112      	b.n	8007d5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	7c1b      	ldrb	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10d      	bne.n	8007b5c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	f107 0208 	add.w	r2, r7, #8
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
 8007b50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	2202      	movs	r2, #2
 8007b58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b5a:	e100      	b.n	8007d5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	f107 0208 	add.w	r2, r7, #8
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3301      	adds	r3, #1
 8007b72:	2202      	movs	r2, #2
 8007b74:	701a      	strb	r2, [r3, #0]
      break;
 8007b76:	e0f2      	b.n	8007d5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	885b      	ldrh	r3, [r3, #2]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b05      	cmp	r3, #5
 8007b80:	f200 80ac 	bhi.w	8007cdc <USBD_GetDescriptor+0x204>
 8007b84:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <USBD_GetDescriptor+0xb4>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007ba5 	.word	0x08007ba5
 8007b90:	08007bd9 	.word	0x08007bd9
 8007b94:	08007c0d 	.word	0x08007c0d
 8007b98:	08007c41 	.word	0x08007c41
 8007b9c:	08007c75 	.word	0x08007c75
 8007ba0:	08007ca9 	.word	0x08007ca9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	7c12      	ldrb	r2, [r2, #16]
 8007bbc:	f107 0108 	add.w	r1, r7, #8
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bc6:	e091      	b.n	8007cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa97 	bl	80080fe <USBD_CtlError>
            err++;
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bd6:	e089      	b.n	8007cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7c12      	ldrb	r2, [r2, #16]
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfa:	e077      	b.n	8007cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa7d 	bl	80080fe <USBD_CtlError>
            err++;
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	3301      	adds	r3, #1
 8007c08:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0a:	e06f      	b.n	8007cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	7c12      	ldrb	r2, [r2, #16]
 8007c24:	f107 0108 	add.w	r1, r7, #8
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c2e:	e05d      	b.n	8007cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa63 	bl	80080fe <USBD_CtlError>
            err++;
 8007c38:	7afb      	ldrb	r3, [r7, #11]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c3e:	e055      	b.n	8007cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	7c12      	ldrb	r2, [r2, #16]
 8007c58:	f107 0108 	add.w	r1, r7, #8
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c62:	e043      	b.n	8007cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa49 	bl	80080fe <USBD_CtlError>
            err++;
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	72fb      	strb	r3, [r7, #11]
          break;
 8007c72:	e03b      	b.n	8007cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7c12      	ldrb	r2, [r2, #16]
 8007c8c:	f107 0108 	add.w	r1, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c96:	e029      	b.n	8007cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa2f 	bl	80080fe <USBD_CtlError>
            err++;
 8007ca0:	7afb      	ldrb	r3, [r7, #11]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ca6:	e021      	b.n	8007cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7c12      	ldrb	r2, [r2, #16]
 8007cc0:	f107 0108 	add.w	r1, r7, #8
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cca:	e00f      	b.n	8007cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa15 	bl	80080fe <USBD_CtlError>
            err++;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cda:	e007      	b.n	8007cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa0d 	bl	80080fe <USBD_CtlError>
          err++;
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007cea:	e038      	b.n	8007d5e <USBD_GetDescriptor+0x286>
 8007cec:	e037      	b.n	8007d5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	7c1b      	ldrb	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d109      	bne.n	8007d0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfe:	f107 0208 	add.w	r2, r7, #8
 8007d02:	4610      	mov	r0, r2
 8007d04:	4798      	blx	r3
 8007d06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d08:	e029      	b.n	8007d5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f9f6 	bl	80080fe <USBD_CtlError>
        err++;
 8007d12:	7afb      	ldrb	r3, [r7, #11]
 8007d14:	3301      	adds	r3, #1
 8007d16:	72fb      	strb	r3, [r7, #11]
      break;
 8007d18:	e021      	b.n	8007d5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7c1b      	ldrb	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10d      	bne.n	8007d3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2a:	f107 0208 	add.w	r2, r7, #8
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4798      	blx	r3
 8007d32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3301      	adds	r3, #1
 8007d38:	2207      	movs	r2, #7
 8007d3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d3c:	e00f      	b.n	8007d5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f9dc 	bl	80080fe <USBD_CtlError>
        err++;
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d4c:	e007      	b.n	8007d5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9d4 	bl	80080fe <USBD_CtlError>
      err++;
 8007d56:	7afb      	ldrb	r3, [r7, #11]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d5c:	bf00      	nop
  }

  if (err != 0U)
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d11c      	bne.n	8007d9e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d64:	893b      	ldrh	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d011      	beq.n	8007d8e <USBD_GetDescriptor+0x2b6>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	88db      	ldrh	r3, [r3, #6]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00d      	beq.n	8007d8e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	88da      	ldrh	r2, [r3, #6]
 8007d76:	893b      	ldrh	r3, [r7, #8]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	bf28      	it	cs
 8007d7c:	4613      	movcs	r3, r2
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d82:	893b      	ldrh	r3, [r7, #8]
 8007d84:	461a      	mov	r2, r3
 8007d86:	68f9      	ldr	r1, [r7, #12]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fa22 	bl	80081d2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	88db      	ldrh	r3, [r3, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d104      	bne.n	8007da0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa79 	bl	800828e <USBD_CtlSendStatus>
 8007d9c:	e000      	b.n	8007da0 <USBD_GetDescriptor+0x2c8>
    return;
 8007d9e:	bf00      	nop
    }
  }
}
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop

08007da8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	889b      	ldrh	r3, [r3, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d130      	bne.n	8007e1c <USBD_SetAddress+0x74>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88db      	ldrh	r3, [r3, #6]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d12c      	bne.n	8007e1c <USBD_SetAddress+0x74>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc8:	d828      	bhi.n	8007e1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	885b      	ldrh	r3, [r3, #2]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d104      	bne.n	8007dea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f98b 	bl	80080fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de8:	e01d      	b.n	8007e26 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7bfa      	ldrb	r2, [r7, #15]
 8007dee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fe74 	bl	8008ae4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa46 	bl	800828e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e10:	e009      	b.n	8007e26 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1a:	e004      	b.n	8007e26 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f96d 	bl	80080fe <USBD_CtlError>
  }
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
	...

08007e30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	885b      	ldrh	r3, [r3, #2]
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	4b41      	ldr	r3, [pc, #260]	; (8007f48 <USBD_SetConfig+0x118>)
 8007e42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e44:	4b40      	ldr	r3, [pc, #256]	; (8007f48 <USBD_SetConfig+0x118>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d904      	bls.n	8007e56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f955 	bl	80080fe <USBD_CtlError>
 8007e54:	e075      	b.n	8007f42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d002      	beq.n	8007e66 <USBD_SetConfig+0x36>
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d023      	beq.n	8007eac <USBD_SetConfig+0x7c>
 8007e64:	e062      	b.n	8007f2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e66:	4b38      	ldr	r3, [pc, #224]	; (8007f48 <USBD_SetConfig+0x118>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01a      	beq.n	8007ea4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e6e:	4b36      	ldr	r3, [pc, #216]	; (8007f48 <USBD_SetConfig+0x118>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e80:	4b31      	ldr	r3, [pc, #196]	; (8007f48 <USBD_SetConfig+0x118>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff f9e8 	bl	800725c <USBD_SetClassConfig>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d104      	bne.n	8007e9c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f932 	bl	80080fe <USBD_CtlError>
            return;
 8007e9a:	e052      	b.n	8007f42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f9f6 	bl	800828e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ea2:	e04e      	b.n	8007f42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f9f2 	bl	800828e <USBD_CtlSendStatus>
        break;
 8007eaa:	e04a      	b.n	8007f42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007eac:	4b26      	ldr	r3, [pc, #152]	; (8007f48 <USBD_SetConfig+0x118>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d112      	bne.n	8007eda <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ebc:	4b22      	ldr	r3, [pc, #136]	; (8007f48 <USBD_SetConfig+0x118>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ec6:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <USBD_SetConfig+0x118>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff f9e4 	bl	800729a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f9db 	bl	800828e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ed8:	e033      	b.n	8007f42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007eda:	4b1b      	ldr	r3, [pc, #108]	; (8007f48 <USBD_SetConfig+0x118>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d01d      	beq.n	8007f24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff f9d2 	bl	800729a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <USBD_SetConfig+0x118>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f00:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <USBD_SetConfig+0x118>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff f9a8 	bl	800725c <USBD_SetClassConfig>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d104      	bne.n	8007f1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f8f2 	bl	80080fe <USBD_CtlError>
            return;
 8007f1a:	e012      	b.n	8007f42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f9b6 	bl	800828e <USBD_CtlSendStatus>
        break;
 8007f22:	e00e      	b.n	8007f42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f9b2 	bl	800828e <USBD_CtlSendStatus>
        break;
 8007f2a:	e00a      	b.n	8007f42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f8e5 	bl	80080fe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f34:	4b04      	ldr	r3, [pc, #16]	; (8007f48 <USBD_SetConfig+0x118>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff f9ad 	bl	800729a <USBD_ClrClassConfig>
        break;
 8007f40:	bf00      	nop
    }
  }
}
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20000680 	.word	0x20000680

08007f4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	88db      	ldrh	r3, [r3, #6]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d004      	beq.n	8007f68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f8cc 	bl	80080fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f66:	e022      	b.n	8007fae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	dc02      	bgt.n	8007f78 <USBD_GetConfig+0x2c>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	dc03      	bgt.n	8007f7e <USBD_GetConfig+0x32>
 8007f76:	e015      	b.n	8007fa4 <USBD_GetConfig+0x58>
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d00b      	beq.n	8007f94 <USBD_GetConfig+0x48>
 8007f7c:	e012      	b.n	8007fa4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3308      	adds	r3, #8
 8007f88:	2201      	movs	r2, #1
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f920 	bl	80081d2 <USBD_CtlSendData>
        break;
 8007f92:	e00c      	b.n	8007fae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	2201      	movs	r2, #1
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f918 	bl	80081d2 <USBD_CtlSendData>
        break;
 8007fa2:	e004      	b.n	8007fae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f8a9 	bl	80080fe <USBD_CtlError>
        break;
 8007fac:	bf00      	nop
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b082      	sub	sp, #8
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d81e      	bhi.n	800800a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	88db      	ldrh	r3, [r3, #6]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d004      	beq.n	8007fde <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f891 	bl	80080fe <USBD_CtlError>
        break;
 8007fdc:	e01a      	b.n	8008014 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d005      	beq.n	8007ffa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f043 0202 	orr.w	r2, r3, #2
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	2202      	movs	r2, #2
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f8e5 	bl	80081d2 <USBD_CtlSendData>
      break;
 8008008:	e004      	b.n	8008014 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f876 	bl	80080fe <USBD_CtlError>
      break;
 8008012:	bf00      	nop
  }
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	885b      	ldrh	r3, [r3, #2]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d106      	bne.n	800803c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f929 	bl	800828e <USBD_CtlSendStatus>
  }
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008054:	3b01      	subs	r3, #1
 8008056:	2b02      	cmp	r3, #2
 8008058:	d80b      	bhi.n	8008072 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d10c      	bne.n	800807c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f90f 	bl	800828e <USBD_CtlSendStatus>
      }
      break;
 8008070:	e004      	b.n	800807c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f842 	bl	80080fe <USBD_CtlError>
      break;
 800807a:	e000      	b.n	800807e <USBD_ClrFeature+0x3a>
      break;
 800807c:	bf00      	nop
  }
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	785a      	ldrb	r2, [r3, #1]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	3302      	adds	r3, #2
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	3303      	adds	r3, #3
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4413      	add	r3, r2
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	3304      	adds	r3, #4
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	3305      	adds	r3, #5
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	4413      	add	r3, r2
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	3306      	adds	r3, #6
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b29a      	uxth	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	3307      	adds	r3, #7
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	4413      	add	r3, r2
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	80da      	strh	r2, [r3, #6]

}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008108:	2180      	movs	r1, #128	; 0x80
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fc80 	bl	8008a10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008110:	2100      	movs	r1, #0
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fc7c 	bl	8008a10 <USBD_LL_StallEP>
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d032      	beq.n	800819c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 f834 	bl	80081a4 <USBD_GetLen>
 800813c:	4603      	mov	r3, r0
 800813e:	3301      	adds	r3, #1
 8008140:	b29b      	uxth	r3, r3
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	75fa      	strb	r2, [r7, #23]
 8008150:	461a      	mov	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4413      	add	r3, r2
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	7812      	ldrb	r2, [r2, #0]
 800815a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	75fa      	strb	r2, [r7, #23]
 8008162:	461a      	mov	r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	4413      	add	r3, r2
 8008168:	2203      	movs	r2, #3
 800816a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800816c:	e012      	b.n	8008194 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	60fa      	str	r2, [r7, #12]
 8008174:	7dfa      	ldrb	r2, [r7, #23]
 8008176:	1c51      	adds	r1, r2, #1
 8008178:	75f9      	strb	r1, [r7, #23]
 800817a:	4611      	mov	r1, r2
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	440a      	add	r2, r1
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	75fa      	strb	r2, [r7, #23]
 800818a:	461a      	mov	r2, r3
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4413      	add	r3, r2
 8008190:	2200      	movs	r2, #0
 8008192:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e8      	bne.n	800816e <USBD_GetString+0x4e>
    }
  }
}
 800819c:	bf00      	nop
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081b0:	e005      	b.n	80081be <USBD_GetLen+0x1a>
  {
    len++;
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	3301      	adds	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3301      	adds	r3, #1
 80081bc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1f5      	bne.n	80081b2 <USBD_GetLen+0xe>
  }

  return len;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr

080081d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	4613      	mov	r3, r2
 80081de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081e8:	88fa      	ldrh	r2, [r7, #6]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80081ee:	88fa      	ldrh	r2, [r7, #6]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081f4:	88fb      	ldrh	r3, [r7, #6]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	2100      	movs	r1, #0
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 fc91 	bl	8008b22 <USBD_LL_Transmit>

  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	4613      	mov	r3, r2
 8008216:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008218:	88fb      	ldrh	r3, [r7, #6]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	2100      	movs	r1, #0
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fc7f 	bl	8008b22 <USBD_LL_Transmit>

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	4613      	mov	r3, r2
 800823a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2203      	movs	r2, #3
 8008240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008244:	88fa      	ldrh	r2, [r7, #6]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800824c:	88fa      	ldrh	r2, [r7, #6]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	2100      	movs	r1, #0
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fc84 	bl	8008b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	4613      	mov	r3, r2
 8008276:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	2100      	movs	r1, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fc72 	bl	8008b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2204      	movs	r2, #4
 800829a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800829e:	2300      	movs	r3, #0
 80082a0:	2200      	movs	r2, #0
 80082a2:	2100      	movs	r1, #0
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fc3c 	bl	8008b22 <USBD_LL_Transmit>

  return USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2205      	movs	r2, #5
 80082c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082c4:	2300      	movs	r3, #0
 80082c6:	2200      	movs	r2, #0
 80082c8:	2100      	movs	r1, #0
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fc4c 	bl	8008b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0

	/* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK){
 80082e0:	2200      	movs	r2, #0
 80082e2:	4914      	ldr	r1, [pc, #80]	; (8008334 <MX_USB_DEVICE_Init+0x58>)
 80082e4:	4814      	ldr	r0, [pc, #80]	; (8008338 <MX_USB_DEVICE_Init+0x5c>)
 80082e6:	f7fe ff45 	bl	8007174 <USBD_Init>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <MX_USB_DEVICE_Init+0x18>
		Error_Handler();
 80082f0:	f7f8 fb76 	bl	80009e0 <Error_Handler>
	}

	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK){
 80082f4:	4911      	ldr	r1, [pc, #68]	; (800833c <MX_USB_DEVICE_Init+0x60>)
 80082f6:	4810      	ldr	r0, [pc, #64]	; (8008338 <MX_USB_DEVICE_Init+0x5c>)
 80082f8:	f7fe ff74 	bl	80071e4 <USBD_RegisterClass>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <MX_USB_DEVICE_Init+0x2a>
		Error_Handler();
 8008302:	f7f8 fb6d 	bl	80009e0 <Error_Handler>
	}

	if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK){
 8008306:	490e      	ldr	r1, [pc, #56]	; (8008340 <MX_USB_DEVICE_Init+0x64>)
 8008308:	480b      	ldr	r0, [pc, #44]	; (8008338 <MX_USB_DEVICE_Init+0x5c>)
 800830a:	f7fe fe97 	bl	800703c <USBD_CDC_RegisterInterface>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <MX_USB_DEVICE_Init+0x3c>
		Error_Handler();
 8008314:	f7f8 fb64 	bl	80009e0 <Error_Handler>
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK){
 8008318:	4807      	ldr	r0, [pc, #28]	; (8008338 <MX_USB_DEVICE_Init+0x5c>)
 800831a:	f7fe ff89 	bl	8007230 <USBD_Start>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <MX_USB_DEVICE_Init+0x4c>
		Error_Handler();
 8008324:	f7f8 fb5c 	bl	80009e0 <Error_Handler>
	}

	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	HAL_Delay(1000);
 8008328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800832c:	f7f8 fd8a 	bl	8000e44 <HAL_Delay>
	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008330:	bf00      	nop
 8008332:	bd80      	pop	{r7, pc}
 8008334:	20000130 	.word	0x20000130
 8008338:	20000684 	.word	0x20000684
 800833c:	2000001c 	.word	0x2000001c
 8008340:	20000120 	.word	0x20000120

08008344 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008348:	2200      	movs	r2, #0
 800834a:	4905      	ldr	r1, [pc, #20]	; (8008360 <CDC_Init_FS+0x1c>)
 800834c:	4805      	ldr	r0, [pc, #20]	; (8008364 <CDC_Init_FS+0x20>)
 800834e:	f7fe fe8b 	bl	8007068 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008352:	4905      	ldr	r1, [pc, #20]	; (8008368 <CDC_Init_FS+0x24>)
 8008354:	4803      	ldr	r0, [pc, #12]	; (8008364 <CDC_Init_FS+0x20>)
 8008356:	f7fe fea0 	bl	800709a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800835a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800835c:	4618      	mov	r0, r3
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000d48 	.word	0x20000d48
 8008364:	20000684 	.word	0x20000684
 8008368:	20000948 	.word	0x20000948

0800836c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008370:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008372:	4618      	mov	r0, r3
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr
	...

0800837c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
 8008388:	4613      	mov	r3, r2
 800838a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b23      	cmp	r3, #35	; 0x23
 8008390:	d84a      	bhi.n	8008428 <CDC_Control_FS+0xac>
 8008392:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <CDC_Control_FS+0x1c>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	08008429 	.word	0x08008429
 800839c:	08008429 	.word	0x08008429
 80083a0:	08008429 	.word	0x08008429
 80083a4:	08008429 	.word	0x08008429
 80083a8:	08008429 	.word	0x08008429
 80083ac:	08008429 	.word	0x08008429
 80083b0:	08008429 	.word	0x08008429
 80083b4:	08008429 	.word	0x08008429
 80083b8:	08008429 	.word	0x08008429
 80083bc:	08008429 	.word	0x08008429
 80083c0:	08008429 	.word	0x08008429
 80083c4:	08008429 	.word	0x08008429
 80083c8:	08008429 	.word	0x08008429
 80083cc:	08008429 	.word	0x08008429
 80083d0:	08008429 	.word	0x08008429
 80083d4:	08008429 	.word	0x08008429
 80083d8:	08008429 	.word	0x08008429
 80083dc:	08008429 	.word	0x08008429
 80083e0:	08008429 	.word	0x08008429
 80083e4:	08008429 	.word	0x08008429
 80083e8:	08008429 	.word	0x08008429
 80083ec:	08008429 	.word	0x08008429
 80083f0:	08008429 	.word	0x08008429
 80083f4:	08008429 	.word	0x08008429
 80083f8:	08008429 	.word	0x08008429
 80083fc:	08008429 	.word	0x08008429
 8008400:	08008429 	.word	0x08008429
 8008404:	08008429 	.word	0x08008429
 8008408:	08008429 	.word	0x08008429
 800840c:	08008429 	.word	0x08008429
 8008410:	08008429 	.word	0x08008429
 8008414:	08008429 	.word	0x08008429
 8008418:	08008429 	.word	0x08008429
 800841c:	08008429 	.word	0x08008429
 8008420:	08008429 	.word	0x08008429
 8008424:	08008429 	.word	0x08008429
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008428:	bf00      	nop
  }

  return (USBD_OK);
 800842a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	bc80      	pop	{r7}
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop

08008438 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008442:	6879      	ldr	r1, [r7, #4]
 8008444:	4805      	ldr	r0, [pc, #20]	; (800845c <CDC_Receive_FS+0x24>)
 8008446:	f7fe fe28 	bl	800709a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800844a:	4804      	ldr	r0, [pc, #16]	; (800845c <CDC_Receive_FS+0x24>)
 800844c:	f7fe fe67 	bl	800711e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008450:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20000684 	.word	0x20000684

08008460 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <CDC_Transmit_FS+0x48>)
 8008472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008476:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008482:	2301      	movs	r3, #1
 8008484:	e00b      	b.n	800849e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008486:	887b      	ldrh	r3, [r7, #2]
 8008488:	461a      	mov	r2, r3
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4806      	ldr	r0, [pc, #24]	; (80084a8 <CDC_Transmit_FS+0x48>)
 800848e:	f7fe fdeb 	bl	8007068 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008492:	4805      	ldr	r0, [pc, #20]	; (80084a8 <CDC_Transmit_FS+0x48>)
 8008494:	f7fe fe14 	bl	80070c0 <USBD_CDC_TransmitPacket>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000684 	.word	0x20000684

080084ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	6039      	str	r1, [r7, #0]
 80084b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2212      	movs	r2, #18
 80084bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084be:	4b03      	ldr	r3, [pc, #12]	; (80084cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	2000014c 	.word	0x2000014c

080084d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	6039      	str	r1, [r7, #0]
 80084da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2204      	movs	r2, #4
 80084e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084e2:	4b03      	ldr	r3, [pc, #12]	; (80084f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bc80      	pop	{r7}
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	20000160 	.word	0x20000160

080084f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	6039      	str	r1, [r7, #0]
 80084fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d105      	bne.n	8008512 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4907      	ldr	r1, [pc, #28]	; (8008528 <USBD_FS_ProductStrDescriptor+0x34>)
 800850a:	4808      	ldr	r0, [pc, #32]	; (800852c <USBD_FS_ProductStrDescriptor+0x38>)
 800850c:	f7ff fe08 	bl	8008120 <USBD_GetString>
 8008510:	e004      	b.n	800851c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	4904      	ldr	r1, [pc, #16]	; (8008528 <USBD_FS_ProductStrDescriptor+0x34>)
 8008516:	4805      	ldr	r0, [pc, #20]	; (800852c <USBD_FS_ProductStrDescriptor+0x38>)
 8008518:	f7ff fe02 	bl	8008120 <USBD_GetString>
  }
  return USBD_StrDesc;
 800851c:	4b02      	ldr	r3, [pc, #8]	; (8008528 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20001148 	.word	0x20001148
 800852c:	08009bb4 	.word	0x08009bb4

08008530 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	6039      	str	r1, [r7, #0]
 800853a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	4904      	ldr	r1, [pc, #16]	; (8008550 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008540:	4804      	ldr	r0, [pc, #16]	; (8008554 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008542:	f7ff fded 	bl	8008120 <USBD_GetString>
  return USBD_StrDesc;
 8008546:	4b02      	ldr	r3, [pc, #8]	; (8008550 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20001148 	.word	0x20001148
 8008554:	08009bcc 	.word	0x08009bcc

08008558 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	6039      	str	r1, [r7, #0]
 8008562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	221a      	movs	r2, #26
 8008568:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800856a:	f000 f843 	bl	80085f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800856e:	4b02      	ldr	r3, [pc, #8]	; (8008578 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20000164 	.word	0x20000164

0800857c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	6039      	str	r1, [r7, #0]
 8008586:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d105      	bne.n	800859a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	4907      	ldr	r1, [pc, #28]	; (80085b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008592:	4808      	ldr	r0, [pc, #32]	; (80085b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008594:	f7ff fdc4 	bl	8008120 <USBD_GetString>
 8008598:	e004      	b.n	80085a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	4904      	ldr	r1, [pc, #16]	; (80085b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800859e:	4805      	ldr	r0, [pc, #20]	; (80085b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085a0:	f7ff fdbe 	bl	8008120 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085a4:	4b02      	ldr	r3, [pc, #8]	; (80085b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20001148 	.word	0x20001148
 80085b4:	08009be0 	.word	0x08009be0

080085b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	6039      	str	r1, [r7, #0]
 80085c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4907      	ldr	r1, [pc, #28]	; (80085ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085ce:	4808      	ldr	r0, [pc, #32]	; (80085f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085d0:	f7ff fda6 	bl	8008120 <USBD_GetString>
 80085d4:	e004      	b.n	80085e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	4904      	ldr	r1, [pc, #16]	; (80085ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085da:	4805      	ldr	r0, [pc, #20]	; (80085f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085dc:	f7ff fda0 	bl	8008120 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20001148 	.word	0x20001148
 80085f0:	08009bec 	.word	0x08009bec

080085f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085fa:	4b0f      	ldr	r3, [pc, #60]	; (8008638 <Get_SerialNum+0x44>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008600:	4b0e      	ldr	r3, [pc, #56]	; (800863c <Get_SerialNum+0x48>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008606:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <Get_SerialNum+0x4c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4413      	add	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d009      	beq.n	800862e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800861a:	2208      	movs	r2, #8
 800861c:	4909      	ldr	r1, [pc, #36]	; (8008644 <Get_SerialNum+0x50>)
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 f814 	bl	800864c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008624:	2204      	movs	r2, #4
 8008626:	4908      	ldr	r1, [pc, #32]	; (8008648 <Get_SerialNum+0x54>)
 8008628:	68b8      	ldr	r0, [r7, #8]
 800862a:	f000 f80f 	bl	800864c <IntToUnicode>
  }
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	1ffff7e8 	.word	0x1ffff7e8
 800863c:	1ffff7ec 	.word	0x1ffff7ec
 8008640:	1ffff7f0 	.word	0x1ffff7f0
 8008644:	20000166 	.word	0x20000166
 8008648:	20000176 	.word	0x20000176

0800864c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800865e:	2300      	movs	r3, #0
 8008660:	75fb      	strb	r3, [r7, #23]
 8008662:	e027      	b.n	80086b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	0f1b      	lsrs	r3, r3, #28
 8008668:	2b09      	cmp	r3, #9
 800866a:	d80b      	bhi.n	8008684 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	0f1b      	lsrs	r3, r3, #28
 8008670:	b2da      	uxtb	r2, r3
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	4619      	mov	r1, r3
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	440b      	add	r3, r1
 800867c:	3230      	adds	r2, #48	; 0x30
 800867e:	b2d2      	uxtb	r2, r2
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	e00a      	b.n	800869a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	0f1b      	lsrs	r3, r3, #28
 8008688:	b2da      	uxtb	r2, r3
 800868a:	7dfb      	ldrb	r3, [r7, #23]
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	4619      	mov	r1, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	440b      	add	r3, r1
 8008694:	3237      	adds	r2, #55	; 0x37
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	3301      	adds	r3, #1
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	4413      	add	r3, r2
 80086aa:	2200      	movs	r2, #0
 80086ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	3301      	adds	r3, #1
 80086b2:	75fb      	strb	r3, [r7, #23]
 80086b4:	7dfa      	ldrb	r2, [r7, #23]
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d3d3      	bcc.n	8008664 <IntToUnicode+0x18>
  }
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr

080086c8 <HAL_PCD_MspInit>:
  }
}
*/

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a20      	ldr	r2, [pc, #128]	; (8008758 <HAL_PCD_MspInit+0x90>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d13a      	bne.n	8008750 <HAL_PCD_MspInit+0x88>
  {
  // PD: we have to actively drive D+ low to signal host the disconnection!

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80086da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086e0:	2301      	movs	r3, #1
 80086e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086e8:	2303      	movs	r3, #3
 80086ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086ec:	f107 0310 	add.w	r3, r7, #16
 80086f0:	4619      	mov	r1, r3
 80086f2:	481a      	ldr	r0, [pc, #104]	; (800875c <HAL_PCD_MspInit+0x94>)
 80086f4:	f7f8 fd0a 	bl	800110c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80086f8:	2200      	movs	r2, #0
 80086fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086fe:	4817      	ldr	r0, [pc, #92]	; (800875c <HAL_PCD_MspInit+0x94>)
 8008700:	f7f8 fe9f 	bl	8001442 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8008704:	2005      	movs	r0, #5
 8008706:	f7f8 fb9d 	bl	8000e44 <HAL_Delay>

    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800870a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800870e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008710:	2302      	movs	r3, #2
 8008712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008714:	2300      	movs	r3, #0
 8008716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008718:	2303      	movs	r3, #3
 800871a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800871c:	f107 0310 	add.w	r3, r7, #16
 8008720:	4619      	mov	r1, r3
 8008722:	480e      	ldr	r0, [pc, #56]	; (800875c <HAL_PCD_MspInit+0x94>)
 8008724:	f7f8 fcf2 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008728:	4b0d      	ldr	r3, [pc, #52]	; (8008760 <HAL_PCD_MspInit+0x98>)
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	4a0c      	ldr	r2, [pc, #48]	; (8008760 <HAL_PCD_MspInit+0x98>)
 800872e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008732:	61d3      	str	r3, [r2, #28]
 8008734:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <HAL_PCD_MspInit+0x98>)
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8008740:	2200      	movs	r2, #0
 8008742:	2105      	movs	r1, #5
 8008744:	2014      	movs	r0, #20
 8008746:	f7f8 fc9c 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800874a:	2014      	movs	r0, #20
 800874c:	f7f8 fcb5 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008750:	bf00      	nop
 8008752:	3720      	adds	r7, #32
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40005c00 	.word	0x40005c00
 800875c:	40010800 	.word	0x40010800
 8008760:	40021000 	.word	0x40021000

08008764 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe fda0 	bl	80072c0 <USBD_LL_SetupStage>
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	440b      	add	r3, r1
 80087a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	78fb      	ldrb	r3, [r7, #3]
 80087b0:	4619      	mov	r1, r3
 80087b2:	f7fe fdd2 	bl	800735a <USBD_LL_DataOutStage>
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	440b      	add	r3, r1
 80087de:	333c      	adds	r3, #60	; 0x3c
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	4619      	mov	r1, r3
 80087e6:	f7fe fe29 	bl	800743c <USBD_LL_DataInStage>
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008800:	4618      	mov	r0, r3
 8008802:	f7fe ff39 	bl	8007678 <USBD_LL_SOF>
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008816:	2301      	movs	r3, #1
 8008818:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d001      	beq.n	8008826 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008822:	f7f8 f8dd 	bl	80009e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800882c:	7bfa      	ldrb	r2, [r7, #15]
 800882e:	4611      	mov	r1, r2
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fee9 	bl	8007608 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800883c:	4618      	mov	r0, r3
 800883e:	f7fe fea2 	bl	8007586 <USBD_LL_Reset>
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fee3 	bl	8007626 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008868:	4b04      	ldr	r3, [pc, #16]	; (800887c <HAL_PCD_SuspendCallback+0x30>)
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	4a03      	ldr	r2, [pc, #12]	; (800887c <HAL_PCD_SuspendCallback+0x30>)
 800886e:	f043 0306 	orr.w	r3, r3, #6
 8008872:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	e000ed00 	.word	0xe000ed00

08008880 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fedd 	bl	800764e <USBD_LL_Resume>
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088a4:	4a28      	ldr	r2, [pc, #160]	; (8008948 <USBD_LL_Init+0xac>)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a26      	ldr	r2, [pc, #152]	; (8008948 <USBD_LL_Init+0xac>)
 80088b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80088b4:	4b24      	ldr	r3, [pc, #144]	; (8008948 <USBD_LL_Init+0xac>)
 80088b6:	4a25      	ldr	r2, [pc, #148]	; (800894c <USBD_LL_Init+0xb0>)
 80088b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80088ba:	4b23      	ldr	r3, [pc, #140]	; (8008948 <USBD_LL_Init+0xac>)
 80088bc:	2208      	movs	r2, #8
 80088be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80088c0:	4b21      	ldr	r3, [pc, #132]	; (8008948 <USBD_LL_Init+0xac>)
 80088c2:	2202      	movs	r2, #2
 80088c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80088c6:	4b20      	ldr	r3, [pc, #128]	; (8008948 <USBD_LL_Init+0xac>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80088cc:	4b1e      	ldr	r3, [pc, #120]	; (8008948 <USBD_LL_Init+0xac>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80088d2:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <USBD_LL_Init+0xac>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80088d8:	481b      	ldr	r0, [pc, #108]	; (8008948 <USBD_LL_Init+0xac>)
 80088da:	f7f8 fe4c 	bl	8001576 <HAL_PCD_Init>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80088e4:	f7f8 f87c 	bl	80009e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088ee:	2318      	movs	r3, #24
 80088f0:	2200      	movs	r2, #0
 80088f2:	2100      	movs	r1, #0
 80088f4:	f7fa fb6b 	bl	8002fce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088fe:	2358      	movs	r3, #88	; 0x58
 8008900:	2200      	movs	r2, #0
 8008902:	2180      	movs	r1, #128	; 0x80
 8008904:	f7fa fb63 	bl	8002fce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800890e:	23c0      	movs	r3, #192	; 0xc0
 8008910:	2200      	movs	r2, #0
 8008912:	2181      	movs	r1, #129	; 0x81
 8008914:	f7fa fb5b 	bl	8002fce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800891e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008922:	2200      	movs	r2, #0
 8008924:	2101      	movs	r1, #1
 8008926:	f7fa fb52 	bl	8002fce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008934:	2200      	movs	r2, #0
 8008936:	2182      	movs	r1, #130	; 0x82
 8008938:	f7fa fb49 	bl	8002fce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20001348 	.word	0x20001348
 800894c:	40005c00 	.word	0x40005c00

08008950 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008966:	4618      	mov	r0, r3
 8008968:	f7f8 ff04 	bl	8001774 <HAL_PCD_Start>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 f94e 	bl	8008c14 <USBD_Get_USB_Status>
 8008978:	4603      	mov	r3, r0
 800897a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897c:	7bbb      	ldrb	r3, [r7, #14]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	461a      	mov	r2, r3
 8008994:	4603      	mov	r3, r0
 8008996:	70fb      	strb	r3, [r7, #3]
 8008998:	460b      	mov	r3, r1
 800899a:	70bb      	strb	r3, [r7, #2]
 800899c:	4613      	mov	r3, r2
 800899e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ae:	78bb      	ldrb	r3, [r7, #2]
 80089b0:	883a      	ldrh	r2, [r7, #0]
 80089b2:	78f9      	ldrb	r1, [r7, #3]
 80089b4:	f7f9 f859 	bl	8001a6a <HAL_PCD_EP_Open>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f928 	bl	8008c14 <USBD_Get_USB_Status>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7f9 f897 	bl	8001b24 <HAL_PCD_EP_Close>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 f909 	bl	8008c14 <USBD_Get_USB_Status>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f9 f93f 	bl	8001cb2 <HAL_PCD_EP_SetStall>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f8ea 	bl	8008c14 <USBD_Get_USB_Status>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f9 f980 	bl	8001d72 <HAL_PCD_EP_ClrStall>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 f8cb 	bl	8008c14 <USBD_Get_USB_Status>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da0c      	bge.n	8008ac2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aae:	68f9      	ldr	r1, [r7, #12]
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	440b      	add	r3, r1
 8008abc:	3302      	adds	r3, #2
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	e00b      	b.n	8008ada <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ac8:	68f9      	ldr	r1, [r7, #12]
 8008aca:	4613      	mov	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4413      	add	r3, r2
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	440b      	add	r3, r1
 8008ad4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008ad8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr

08008ae4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008afe:	78fa      	ldrb	r2, [r7, #3]
 8008b00:	4611      	mov	r1, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f8 ff8c 	bl	8001a20 <HAL_PCD_SetAddress>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f880 	bl	8008c14 <USBD_Get_USB_Status>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b086      	sub	sp, #24
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	460b      	mov	r3, r1
 8008b30:	72fb      	strb	r3, [r7, #11]
 8008b32:	4613      	mov	r3, r2
 8008b34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b44:	893b      	ldrh	r3, [r7, #8]
 8008b46:	7af9      	ldrb	r1, [r7, #11]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	f7f9 f87b 	bl	8001c44 <HAL_PCD_EP_Transmit>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 f85d 	bl	8008c14 <USBD_Get_USB_Status>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	607a      	str	r2, [r7, #4]
 8008b72:	461a      	mov	r2, r3
 8008b74:	460b      	mov	r3, r1
 8008b76:	72fb      	strb	r3, [r7, #11]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b8a:	893b      	ldrh	r3, [r7, #8]
 8008b8c:	7af9      	ldrb	r1, [r7, #11]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	f7f9 f810 	bl	8001bb4 <HAL_PCD_EP_Receive>
 8008b94:	4603      	mov	r3, r0
 8008b96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f83a 	bl	8008c14 <USBD_Get_USB_Status>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ba4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bc0:	78fa      	ldrb	r2, [r7, #3]
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7f9 f826 	bl	8001c16 <HAL_PCD_EP_GetRxCount>
 8008bca:	4603      	mov	r3, r0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <USBD_static_malloc+0x14>)
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr
 8008be8:	20001638 	.word	0x20001638

08008bec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]

}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr

08008bfe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d817      	bhi.n	8008c58 <USBD_Get_USB_Status+0x44>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <USBD_Get_USB_Status+0x1c>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c41 	.word	0x08008c41
 8008c34:	08008c47 	.word	0x08008c47
 8008c38:	08008c4d 	.word	0x08008c4d
 8008c3c:	08008c53 	.word	0x08008c53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]
    break;
 8008c44:	e00b      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c46:	2302      	movs	r3, #2
 8008c48:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4a:	e008      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c50:	e005      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c52:	2302      	movs	r3, #2
 8008c54:	73fb      	strb	r3, [r7, #15]
    break;
 8008c56:	e002      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5c:	bf00      	nop
  }
  return usb_status;
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop

08008c6c <std>:
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	b510      	push	{r4, lr}
 8008c70:	4604      	mov	r4, r0
 8008c72:	e9c0 3300 	strd	r3, r3, [r0]
 8008c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c7a:	6083      	str	r3, [r0, #8]
 8008c7c:	8181      	strh	r1, [r0, #12]
 8008c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c80:	81c2      	strh	r2, [r0, #14]
 8008c82:	6183      	str	r3, [r0, #24]
 8008c84:	4619      	mov	r1, r3
 8008c86:	2208      	movs	r2, #8
 8008c88:	305c      	adds	r0, #92	; 0x5c
 8008c8a:	f000 f90e 	bl	8008eaa <memset>
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	; (8008cc4 <std+0x58>)
 8008c90:	6224      	str	r4, [r4, #32]
 8008c92:	6263      	str	r3, [r4, #36]	; 0x24
 8008c94:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <std+0x5c>)
 8008c96:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <std+0x60>)
 8008c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c9c:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <std+0x64>)
 8008c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8008ca0:	4b0c      	ldr	r3, [pc, #48]	; (8008cd4 <std+0x68>)
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	d006      	beq.n	8008cb4 <std+0x48>
 8008ca6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008caa:	4294      	cmp	r4, r2
 8008cac:	d002      	beq.n	8008cb4 <std+0x48>
 8008cae:	33d0      	adds	r3, #208	; 0xd0
 8008cb0:	429c      	cmp	r4, r3
 8008cb2:	d105      	bne.n	8008cc0 <std+0x54>
 8008cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cbc:	f000 b96e 	b.w	8008f9c <__retarget_lock_init_recursive>
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08008e25 	.word	0x08008e25
 8008cc8:	08008e47 	.word	0x08008e47
 8008ccc:	08008e7f 	.word	0x08008e7f
 8008cd0:	08008ea3 	.word	0x08008ea3
 8008cd4:	20001858 	.word	0x20001858

08008cd8 <stdio_exit_handler>:
 8008cd8:	4a02      	ldr	r2, [pc, #8]	; (8008ce4 <stdio_exit_handler+0xc>)
 8008cda:	4903      	ldr	r1, [pc, #12]	; (8008ce8 <stdio_exit_handler+0x10>)
 8008cdc:	4803      	ldr	r0, [pc, #12]	; (8008cec <stdio_exit_handler+0x14>)
 8008cde:	f000 b869 	b.w	8008db4 <_fwalk_sglue>
 8008ce2:	bf00      	nop
 8008ce4:	20000180 	.word	0x20000180
 8008ce8:	0800983d 	.word	0x0800983d
 8008cec:	2000018c 	.word	0x2000018c

08008cf0 <cleanup_stdio>:
 8008cf0:	6841      	ldr	r1, [r0, #4]
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	; (8008d24 <cleanup_stdio+0x34>)
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	4299      	cmp	r1, r3
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	d001      	beq.n	8008d00 <cleanup_stdio+0x10>
 8008cfc:	f000 fd9e 	bl	800983c <_fflush_r>
 8008d00:	68a1      	ldr	r1, [r4, #8]
 8008d02:	4b09      	ldr	r3, [pc, #36]	; (8008d28 <cleanup_stdio+0x38>)
 8008d04:	4299      	cmp	r1, r3
 8008d06:	d002      	beq.n	8008d0e <cleanup_stdio+0x1e>
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 fd97 	bl	800983c <_fflush_r>
 8008d0e:	68e1      	ldr	r1, [r4, #12]
 8008d10:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <cleanup_stdio+0x3c>)
 8008d12:	4299      	cmp	r1, r3
 8008d14:	d004      	beq.n	8008d20 <cleanup_stdio+0x30>
 8008d16:	4620      	mov	r0, r4
 8008d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d1c:	f000 bd8e 	b.w	800983c <_fflush_r>
 8008d20:	bd10      	pop	{r4, pc}
 8008d22:	bf00      	nop
 8008d24:	20001858 	.word	0x20001858
 8008d28:	200018c0 	.word	0x200018c0
 8008d2c:	20001928 	.word	0x20001928

08008d30 <global_stdio_init.part.0>:
 8008d30:	b510      	push	{r4, lr}
 8008d32:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <global_stdio_init.part.0+0x30>)
 8008d34:	4c0b      	ldr	r4, [pc, #44]	; (8008d64 <global_stdio_init.part.0+0x34>)
 8008d36:	4a0c      	ldr	r2, [pc, #48]	; (8008d68 <global_stdio_init.part.0+0x38>)
 8008d38:	4620      	mov	r0, r4
 8008d3a:	601a      	str	r2, [r3, #0]
 8008d3c:	2104      	movs	r1, #4
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f7ff ff94 	bl	8008c6c <std>
 8008d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d48:	2201      	movs	r2, #1
 8008d4a:	2109      	movs	r1, #9
 8008d4c:	f7ff ff8e 	bl	8008c6c <std>
 8008d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d54:	2202      	movs	r2, #2
 8008d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d5a:	2112      	movs	r1, #18
 8008d5c:	f7ff bf86 	b.w	8008c6c <std>
 8008d60:	20001990 	.word	0x20001990
 8008d64:	20001858 	.word	0x20001858
 8008d68:	08008cd9 	.word	0x08008cd9

08008d6c <__sfp_lock_acquire>:
 8008d6c:	4801      	ldr	r0, [pc, #4]	; (8008d74 <__sfp_lock_acquire+0x8>)
 8008d6e:	f000 b916 	b.w	8008f9e <__retarget_lock_acquire_recursive>
 8008d72:	bf00      	nop
 8008d74:	20001999 	.word	0x20001999

08008d78 <__sfp_lock_release>:
 8008d78:	4801      	ldr	r0, [pc, #4]	; (8008d80 <__sfp_lock_release+0x8>)
 8008d7a:	f000 b911 	b.w	8008fa0 <__retarget_lock_release_recursive>
 8008d7e:	bf00      	nop
 8008d80:	20001999 	.word	0x20001999

08008d84 <__sinit>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	4604      	mov	r4, r0
 8008d88:	f7ff fff0 	bl	8008d6c <__sfp_lock_acquire>
 8008d8c:	6a23      	ldr	r3, [r4, #32]
 8008d8e:	b11b      	cbz	r3, 8008d98 <__sinit+0x14>
 8008d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d94:	f7ff bff0 	b.w	8008d78 <__sfp_lock_release>
 8008d98:	4b04      	ldr	r3, [pc, #16]	; (8008dac <__sinit+0x28>)
 8008d9a:	6223      	str	r3, [r4, #32]
 8008d9c:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <__sinit+0x2c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1f5      	bne.n	8008d90 <__sinit+0xc>
 8008da4:	f7ff ffc4 	bl	8008d30 <global_stdio_init.part.0>
 8008da8:	e7f2      	b.n	8008d90 <__sinit+0xc>
 8008daa:	bf00      	nop
 8008dac:	08008cf1 	.word	0x08008cf1
 8008db0:	20001990 	.word	0x20001990

08008db4 <_fwalk_sglue>:
 8008db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	4607      	mov	r7, r0
 8008dba:	4688      	mov	r8, r1
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	2600      	movs	r6, #0
 8008dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8008dc8:	d505      	bpl.n	8008dd6 <_fwalk_sglue+0x22>
 8008dca:	6824      	ldr	r4, [r4, #0]
 8008dcc:	2c00      	cmp	r4, #0
 8008dce:	d1f7      	bne.n	8008dc0 <_fwalk_sglue+0xc>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd6:	89ab      	ldrh	r3, [r5, #12]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d907      	bls.n	8008dec <_fwalk_sglue+0x38>
 8008ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008de0:	3301      	adds	r3, #1
 8008de2:	d003      	beq.n	8008dec <_fwalk_sglue+0x38>
 8008de4:	4629      	mov	r1, r5
 8008de6:	4638      	mov	r0, r7
 8008de8:	47c0      	blx	r8
 8008dea:	4306      	orrs	r6, r0
 8008dec:	3568      	adds	r5, #104	; 0x68
 8008dee:	e7e9      	b.n	8008dc4 <_fwalk_sglue+0x10>

08008df0 <iprintf>:
 8008df0:	b40f      	push	{r0, r1, r2, r3}
 8008df2:	b507      	push	{r0, r1, r2, lr}
 8008df4:	4906      	ldr	r1, [pc, #24]	; (8008e10 <iprintf+0x20>)
 8008df6:	ab04      	add	r3, sp, #16
 8008df8:	6808      	ldr	r0, [r1, #0]
 8008dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfe:	6881      	ldr	r1, [r0, #8]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	f000 f9eb 	bl	80091dc <_vfiprintf_r>
 8008e06:	b003      	add	sp, #12
 8008e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e0c:	b004      	add	sp, #16
 8008e0e:	4770      	bx	lr
 8008e10:	200001d8 	.word	0x200001d8

08008e14 <putchar>:
 8008e14:	4b02      	ldr	r3, [pc, #8]	; (8008e20 <putchar+0xc>)
 8008e16:	4601      	mov	r1, r0
 8008e18:	6818      	ldr	r0, [r3, #0]
 8008e1a:	6882      	ldr	r2, [r0, #8]
 8008e1c:	f000 bd36 	b.w	800988c <_putc_r>
 8008e20:	200001d8 	.word	0x200001d8

08008e24 <__sread>:
 8008e24:	b510      	push	{r4, lr}
 8008e26:	460c      	mov	r4, r1
 8008e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2c:	f000 f868 	bl	8008f00 <_read_r>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	bfab      	itete	ge
 8008e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e36:	89a3      	ldrhlt	r3, [r4, #12]
 8008e38:	181b      	addge	r3, r3, r0
 8008e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e3e:	bfac      	ite	ge
 8008e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e42:	81a3      	strhlt	r3, [r4, #12]
 8008e44:	bd10      	pop	{r4, pc}

08008e46 <__swrite>:
 8008e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4a:	461f      	mov	r7, r3
 8008e4c:	898b      	ldrh	r3, [r1, #12]
 8008e4e:	4605      	mov	r5, r0
 8008e50:	05db      	lsls	r3, r3, #23
 8008e52:	460c      	mov	r4, r1
 8008e54:	4616      	mov	r6, r2
 8008e56:	d505      	bpl.n	8008e64 <__swrite+0x1e>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e60:	f000 f83c 	bl	8008edc <_lseek_r>
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	4632      	mov	r2, r6
 8008e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	4628      	mov	r0, r5
 8008e70:	463b      	mov	r3, r7
 8008e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7a:	f000 b853 	b.w	8008f24 <_write_r>

08008e7e <__sseek>:
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	460c      	mov	r4, r1
 8008e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e86:	f000 f829 	bl	8008edc <_lseek_r>
 8008e8a:	1c43      	adds	r3, r0, #1
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	bf15      	itete	ne
 8008e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e9a:	81a3      	strheq	r3, [r4, #12]
 8008e9c:	bf18      	it	ne
 8008e9e:	81a3      	strhne	r3, [r4, #12]
 8008ea0:	bd10      	pop	{r4, pc}

08008ea2 <__sclose>:
 8008ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea6:	f000 b809 	b.w	8008ebc <_close_r>

08008eaa <memset>:
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4402      	add	r2, r0
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d100      	bne.n	8008eb4 <memset+0xa>
 8008eb2:	4770      	bx	lr
 8008eb4:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb8:	e7f9      	b.n	8008eae <memset+0x4>
	...

08008ebc <_close_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4d05      	ldr	r5, [pc, #20]	; (8008ed8 <_close_r+0x1c>)
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	f7f7 fec7 	bl	8000c5a <_close>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_close_r+0x1a>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_close_r+0x1a>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	20001994 	.word	0x20001994

08008edc <_lseek_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4d05      	ldr	r5, [pc, #20]	; (8008efc <_lseek_r+0x20>)
 8008ee8:	602a      	str	r2, [r5, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	f7f7 fed9 	bl	8000ca2 <_lseek>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_lseek_r+0x1e>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_lseek_r+0x1e>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20001994 	.word	0x20001994

08008f00 <_read_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4604      	mov	r4, r0
 8008f04:	4608      	mov	r0, r1
 8008f06:	4611      	mov	r1, r2
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4d05      	ldr	r5, [pc, #20]	; (8008f20 <_read_r+0x20>)
 8008f0c:	602a      	str	r2, [r5, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f7f7 fe6a 	bl	8000be8 <_read>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_read_r+0x1e>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_read_r+0x1e>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20001994 	.word	0x20001994

08008f24 <_write_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	4d05      	ldr	r5, [pc, #20]	; (8008f44 <_write_r+0x20>)
 8008f30:	602a      	str	r2, [r5, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	f7f7 fe75 	bl	8000c22 <_write>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_write_r+0x1e>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_write_r+0x1e>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	20001994 	.word	0x20001994

08008f48 <__errno>:
 8008f48:	4b01      	ldr	r3, [pc, #4]	; (8008f50 <__errno+0x8>)
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	200001d8 	.word	0x200001d8

08008f54 <__libc_init_array>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	2600      	movs	r6, #0
 8008f58:	4d0c      	ldr	r5, [pc, #48]	; (8008f8c <__libc_init_array+0x38>)
 8008f5a:	4c0d      	ldr	r4, [pc, #52]	; (8008f90 <__libc_init_array+0x3c>)
 8008f5c:	1b64      	subs	r4, r4, r5
 8008f5e:	10a4      	asrs	r4, r4, #2
 8008f60:	42a6      	cmp	r6, r4
 8008f62:	d109      	bne.n	8008f78 <__libc_init_array+0x24>
 8008f64:	f000 fdfe 	bl	8009b64 <_init>
 8008f68:	2600      	movs	r6, #0
 8008f6a:	4d0a      	ldr	r5, [pc, #40]	; (8008f94 <__libc_init_array+0x40>)
 8008f6c:	4c0a      	ldr	r4, [pc, #40]	; (8008f98 <__libc_init_array+0x44>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	42a6      	cmp	r6, r4
 8008f74:	d105      	bne.n	8008f82 <__libc_init_array+0x2e>
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f7c:	4798      	blx	r3
 8008f7e:	3601      	adds	r6, #1
 8008f80:	e7ee      	b.n	8008f60 <__libc_init_array+0xc>
 8008f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f86:	4798      	blx	r3
 8008f88:	3601      	adds	r6, #1
 8008f8a:	e7f2      	b.n	8008f72 <__libc_init_array+0x1e>
 8008f8c:	08009c94 	.word	0x08009c94
 8008f90:	08009c94 	.word	0x08009c94
 8008f94:	08009c94 	.word	0x08009c94
 8008f98:	08009c98 	.word	0x08009c98

08008f9c <__retarget_lock_init_recursive>:
 8008f9c:	4770      	bx	lr

08008f9e <__retarget_lock_acquire_recursive>:
 8008f9e:	4770      	bx	lr

08008fa0 <__retarget_lock_release_recursive>:
 8008fa0:	4770      	bx	lr
	...

08008fa4 <_free_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	2900      	cmp	r1, #0
 8008faa:	d040      	beq.n	800902e <_free_r+0x8a>
 8008fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fb0:	1f0c      	subs	r4, r1, #4
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bfb8      	it	lt
 8008fb6:	18e4      	addlt	r4, r4, r3
 8008fb8:	f000 f8dc 	bl	8009174 <__malloc_lock>
 8008fbc:	4a1c      	ldr	r2, [pc, #112]	; (8009030 <_free_r+0x8c>)
 8008fbe:	6813      	ldr	r3, [r2, #0]
 8008fc0:	b933      	cbnz	r3, 8008fd0 <_free_r+0x2c>
 8008fc2:	6063      	str	r3, [r4, #4]
 8008fc4:	6014      	str	r4, [r2, #0]
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fcc:	f000 b8d8 	b.w	8009180 <__malloc_unlock>
 8008fd0:	42a3      	cmp	r3, r4
 8008fd2:	d908      	bls.n	8008fe6 <_free_r+0x42>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	1821      	adds	r1, r4, r0
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	bf01      	itttt	eq
 8008fdc:	6819      	ldreq	r1, [r3, #0]
 8008fde:	685b      	ldreq	r3, [r3, #4]
 8008fe0:	1809      	addeq	r1, r1, r0
 8008fe2:	6021      	streq	r1, [r4, #0]
 8008fe4:	e7ed      	b.n	8008fc2 <_free_r+0x1e>
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	b10b      	cbz	r3, 8008ff0 <_free_r+0x4c>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d9fa      	bls.n	8008fe6 <_free_r+0x42>
 8008ff0:	6811      	ldr	r1, [r2, #0]
 8008ff2:	1850      	adds	r0, r2, r1
 8008ff4:	42a0      	cmp	r0, r4
 8008ff6:	d10b      	bne.n	8009010 <_free_r+0x6c>
 8008ff8:	6820      	ldr	r0, [r4, #0]
 8008ffa:	4401      	add	r1, r0
 8008ffc:	1850      	adds	r0, r2, r1
 8008ffe:	4283      	cmp	r3, r0
 8009000:	6011      	str	r1, [r2, #0]
 8009002:	d1e0      	bne.n	8008fc6 <_free_r+0x22>
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	4408      	add	r0, r1
 800900a:	6010      	str	r0, [r2, #0]
 800900c:	6053      	str	r3, [r2, #4]
 800900e:	e7da      	b.n	8008fc6 <_free_r+0x22>
 8009010:	d902      	bls.n	8009018 <_free_r+0x74>
 8009012:	230c      	movs	r3, #12
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	e7d6      	b.n	8008fc6 <_free_r+0x22>
 8009018:	6820      	ldr	r0, [r4, #0]
 800901a:	1821      	adds	r1, r4, r0
 800901c:	428b      	cmp	r3, r1
 800901e:	bf01      	itttt	eq
 8009020:	6819      	ldreq	r1, [r3, #0]
 8009022:	685b      	ldreq	r3, [r3, #4]
 8009024:	1809      	addeq	r1, r1, r0
 8009026:	6021      	streq	r1, [r4, #0]
 8009028:	6063      	str	r3, [r4, #4]
 800902a:	6054      	str	r4, [r2, #4]
 800902c:	e7cb      	b.n	8008fc6 <_free_r+0x22>
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	2000199c 	.word	0x2000199c

08009034 <sbrk_aligned>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	4e0e      	ldr	r6, [pc, #56]	; (8009070 <sbrk_aligned+0x3c>)
 8009038:	460c      	mov	r4, r1
 800903a:	6831      	ldr	r1, [r6, #0]
 800903c:	4605      	mov	r5, r0
 800903e:	b911      	cbnz	r1, 8009046 <sbrk_aligned+0x12>
 8009040:	f000 fcee 	bl	8009a20 <_sbrk_r>
 8009044:	6030      	str	r0, [r6, #0]
 8009046:	4621      	mov	r1, r4
 8009048:	4628      	mov	r0, r5
 800904a:	f000 fce9 	bl	8009a20 <_sbrk_r>
 800904e:	1c43      	adds	r3, r0, #1
 8009050:	d00a      	beq.n	8009068 <sbrk_aligned+0x34>
 8009052:	1cc4      	adds	r4, r0, #3
 8009054:	f024 0403 	bic.w	r4, r4, #3
 8009058:	42a0      	cmp	r0, r4
 800905a:	d007      	beq.n	800906c <sbrk_aligned+0x38>
 800905c:	1a21      	subs	r1, r4, r0
 800905e:	4628      	mov	r0, r5
 8009060:	f000 fcde 	bl	8009a20 <_sbrk_r>
 8009064:	3001      	adds	r0, #1
 8009066:	d101      	bne.n	800906c <sbrk_aligned+0x38>
 8009068:	f04f 34ff 	mov.w	r4, #4294967295
 800906c:	4620      	mov	r0, r4
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	200019a0 	.word	0x200019a0

08009074 <_malloc_r>:
 8009074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009078:	1ccd      	adds	r5, r1, #3
 800907a:	f025 0503 	bic.w	r5, r5, #3
 800907e:	3508      	adds	r5, #8
 8009080:	2d0c      	cmp	r5, #12
 8009082:	bf38      	it	cc
 8009084:	250c      	movcc	r5, #12
 8009086:	2d00      	cmp	r5, #0
 8009088:	4607      	mov	r7, r0
 800908a:	db01      	blt.n	8009090 <_malloc_r+0x1c>
 800908c:	42a9      	cmp	r1, r5
 800908e:	d905      	bls.n	800909c <_malloc_r+0x28>
 8009090:	230c      	movs	r3, #12
 8009092:	2600      	movs	r6, #0
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	4630      	mov	r0, r6
 8009098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009170 <_malloc_r+0xfc>
 80090a0:	f000 f868 	bl	8009174 <__malloc_lock>
 80090a4:	f8d8 3000 	ldr.w	r3, [r8]
 80090a8:	461c      	mov	r4, r3
 80090aa:	bb5c      	cbnz	r4, 8009104 <_malloc_r+0x90>
 80090ac:	4629      	mov	r1, r5
 80090ae:	4638      	mov	r0, r7
 80090b0:	f7ff ffc0 	bl	8009034 <sbrk_aligned>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	4604      	mov	r4, r0
 80090b8:	d155      	bne.n	8009166 <_malloc_r+0xf2>
 80090ba:	f8d8 4000 	ldr.w	r4, [r8]
 80090be:	4626      	mov	r6, r4
 80090c0:	2e00      	cmp	r6, #0
 80090c2:	d145      	bne.n	8009150 <_malloc_r+0xdc>
 80090c4:	2c00      	cmp	r4, #0
 80090c6:	d048      	beq.n	800915a <_malloc_r+0xe6>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	4631      	mov	r1, r6
 80090cc:	4638      	mov	r0, r7
 80090ce:	eb04 0903 	add.w	r9, r4, r3
 80090d2:	f000 fca5 	bl	8009a20 <_sbrk_r>
 80090d6:	4581      	cmp	r9, r0
 80090d8:	d13f      	bne.n	800915a <_malloc_r+0xe6>
 80090da:	6821      	ldr	r1, [r4, #0]
 80090dc:	4638      	mov	r0, r7
 80090de:	1a6d      	subs	r5, r5, r1
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7ff ffa7 	bl	8009034 <sbrk_aligned>
 80090e6:	3001      	adds	r0, #1
 80090e8:	d037      	beq.n	800915a <_malloc_r+0xe6>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	442b      	add	r3, r5
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	f8d8 3000 	ldr.w	r3, [r8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d038      	beq.n	800916a <_malloc_r+0xf6>
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	42a2      	cmp	r2, r4
 80090fc:	d12b      	bne.n	8009156 <_malloc_r+0xe2>
 80090fe:	2200      	movs	r2, #0
 8009100:	605a      	str	r2, [r3, #4]
 8009102:	e00f      	b.n	8009124 <_malloc_r+0xb0>
 8009104:	6822      	ldr	r2, [r4, #0]
 8009106:	1b52      	subs	r2, r2, r5
 8009108:	d41f      	bmi.n	800914a <_malloc_r+0xd6>
 800910a:	2a0b      	cmp	r2, #11
 800910c:	d917      	bls.n	800913e <_malloc_r+0xca>
 800910e:	1961      	adds	r1, r4, r5
 8009110:	42a3      	cmp	r3, r4
 8009112:	6025      	str	r5, [r4, #0]
 8009114:	bf18      	it	ne
 8009116:	6059      	strne	r1, [r3, #4]
 8009118:	6863      	ldr	r3, [r4, #4]
 800911a:	bf08      	it	eq
 800911c:	f8c8 1000 	streq.w	r1, [r8]
 8009120:	5162      	str	r2, [r4, r5]
 8009122:	604b      	str	r3, [r1, #4]
 8009124:	4638      	mov	r0, r7
 8009126:	f104 060b 	add.w	r6, r4, #11
 800912a:	f000 f829 	bl	8009180 <__malloc_unlock>
 800912e:	f026 0607 	bic.w	r6, r6, #7
 8009132:	1d23      	adds	r3, r4, #4
 8009134:	1af2      	subs	r2, r6, r3
 8009136:	d0ae      	beq.n	8009096 <_malloc_r+0x22>
 8009138:	1b9b      	subs	r3, r3, r6
 800913a:	50a3      	str	r3, [r4, r2]
 800913c:	e7ab      	b.n	8009096 <_malloc_r+0x22>
 800913e:	42a3      	cmp	r3, r4
 8009140:	6862      	ldr	r2, [r4, #4]
 8009142:	d1dd      	bne.n	8009100 <_malloc_r+0x8c>
 8009144:	f8c8 2000 	str.w	r2, [r8]
 8009148:	e7ec      	b.n	8009124 <_malloc_r+0xb0>
 800914a:	4623      	mov	r3, r4
 800914c:	6864      	ldr	r4, [r4, #4]
 800914e:	e7ac      	b.n	80090aa <_malloc_r+0x36>
 8009150:	4634      	mov	r4, r6
 8009152:	6876      	ldr	r6, [r6, #4]
 8009154:	e7b4      	b.n	80090c0 <_malloc_r+0x4c>
 8009156:	4613      	mov	r3, r2
 8009158:	e7cc      	b.n	80090f4 <_malloc_r+0x80>
 800915a:	230c      	movs	r3, #12
 800915c:	4638      	mov	r0, r7
 800915e:	603b      	str	r3, [r7, #0]
 8009160:	f000 f80e 	bl	8009180 <__malloc_unlock>
 8009164:	e797      	b.n	8009096 <_malloc_r+0x22>
 8009166:	6025      	str	r5, [r4, #0]
 8009168:	e7dc      	b.n	8009124 <_malloc_r+0xb0>
 800916a:	605b      	str	r3, [r3, #4]
 800916c:	deff      	udf	#255	; 0xff
 800916e:	bf00      	nop
 8009170:	2000199c 	.word	0x2000199c

08009174 <__malloc_lock>:
 8009174:	4801      	ldr	r0, [pc, #4]	; (800917c <__malloc_lock+0x8>)
 8009176:	f7ff bf12 	b.w	8008f9e <__retarget_lock_acquire_recursive>
 800917a:	bf00      	nop
 800917c:	20001998 	.word	0x20001998

08009180 <__malloc_unlock>:
 8009180:	4801      	ldr	r0, [pc, #4]	; (8009188 <__malloc_unlock+0x8>)
 8009182:	f7ff bf0d 	b.w	8008fa0 <__retarget_lock_release_recursive>
 8009186:	bf00      	nop
 8009188:	20001998 	.word	0x20001998

0800918c <__sfputc_r>:
 800918c:	6893      	ldr	r3, [r2, #8]
 800918e:	b410      	push	{r4}
 8009190:	3b01      	subs	r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	6093      	str	r3, [r2, #8]
 8009196:	da07      	bge.n	80091a8 <__sfputc_r+0x1c>
 8009198:	6994      	ldr	r4, [r2, #24]
 800919a:	42a3      	cmp	r3, r4
 800919c:	db01      	blt.n	80091a2 <__sfputc_r+0x16>
 800919e:	290a      	cmp	r1, #10
 80091a0:	d102      	bne.n	80091a8 <__sfputc_r+0x1c>
 80091a2:	bc10      	pop	{r4}
 80091a4:	f000 bba6 	b.w	80098f4 <__swbuf_r>
 80091a8:	6813      	ldr	r3, [r2, #0]
 80091aa:	1c58      	adds	r0, r3, #1
 80091ac:	6010      	str	r0, [r2, #0]
 80091ae:	7019      	strb	r1, [r3, #0]
 80091b0:	4608      	mov	r0, r1
 80091b2:	bc10      	pop	{r4}
 80091b4:	4770      	bx	lr

080091b6 <__sfputs_r>:
 80091b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b8:	4606      	mov	r6, r0
 80091ba:	460f      	mov	r7, r1
 80091bc:	4614      	mov	r4, r2
 80091be:	18d5      	adds	r5, r2, r3
 80091c0:	42ac      	cmp	r4, r5
 80091c2:	d101      	bne.n	80091c8 <__sfputs_r+0x12>
 80091c4:	2000      	movs	r0, #0
 80091c6:	e007      	b.n	80091d8 <__sfputs_r+0x22>
 80091c8:	463a      	mov	r2, r7
 80091ca:	4630      	mov	r0, r6
 80091cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d0:	f7ff ffdc 	bl	800918c <__sfputc_r>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d1f3      	bne.n	80091c0 <__sfputs_r+0xa>
 80091d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091dc <_vfiprintf_r>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	460d      	mov	r5, r1
 80091e2:	4614      	mov	r4, r2
 80091e4:	4698      	mov	r8, r3
 80091e6:	4606      	mov	r6, r0
 80091e8:	b09d      	sub	sp, #116	; 0x74
 80091ea:	b118      	cbz	r0, 80091f4 <_vfiprintf_r+0x18>
 80091ec:	6a03      	ldr	r3, [r0, #32]
 80091ee:	b90b      	cbnz	r3, 80091f4 <_vfiprintf_r+0x18>
 80091f0:	f7ff fdc8 	bl	8008d84 <__sinit>
 80091f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f6:	07d9      	lsls	r1, r3, #31
 80091f8:	d405      	bmi.n	8009206 <_vfiprintf_r+0x2a>
 80091fa:	89ab      	ldrh	r3, [r5, #12]
 80091fc:	059a      	lsls	r2, r3, #22
 80091fe:	d402      	bmi.n	8009206 <_vfiprintf_r+0x2a>
 8009200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009202:	f7ff fecc 	bl	8008f9e <__retarget_lock_acquire_recursive>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	071b      	lsls	r3, r3, #28
 800920a:	d501      	bpl.n	8009210 <_vfiprintf_r+0x34>
 800920c:	692b      	ldr	r3, [r5, #16]
 800920e:	b99b      	cbnz	r3, 8009238 <_vfiprintf_r+0x5c>
 8009210:	4629      	mov	r1, r5
 8009212:	4630      	mov	r0, r6
 8009214:	f000 fbac 	bl	8009970 <__swsetup_r>
 8009218:	b170      	cbz	r0, 8009238 <_vfiprintf_r+0x5c>
 800921a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800921c:	07dc      	lsls	r4, r3, #31
 800921e:	d504      	bpl.n	800922a <_vfiprintf_r+0x4e>
 8009220:	f04f 30ff 	mov.w	r0, #4294967295
 8009224:	b01d      	add	sp, #116	; 0x74
 8009226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922a:	89ab      	ldrh	r3, [r5, #12]
 800922c:	0598      	lsls	r0, r3, #22
 800922e:	d4f7      	bmi.n	8009220 <_vfiprintf_r+0x44>
 8009230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009232:	f7ff feb5 	bl	8008fa0 <__retarget_lock_release_recursive>
 8009236:	e7f3      	b.n	8009220 <_vfiprintf_r+0x44>
 8009238:	2300      	movs	r3, #0
 800923a:	9309      	str	r3, [sp, #36]	; 0x24
 800923c:	2320      	movs	r3, #32
 800923e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009242:	2330      	movs	r3, #48	; 0x30
 8009244:	f04f 0901 	mov.w	r9, #1
 8009248:	f8cd 800c 	str.w	r8, [sp, #12]
 800924c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80093fc <_vfiprintf_r+0x220>
 8009250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009254:	4623      	mov	r3, r4
 8009256:	469a      	mov	sl, r3
 8009258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800925c:	b10a      	cbz	r2, 8009262 <_vfiprintf_r+0x86>
 800925e:	2a25      	cmp	r2, #37	; 0x25
 8009260:	d1f9      	bne.n	8009256 <_vfiprintf_r+0x7a>
 8009262:	ebba 0b04 	subs.w	fp, sl, r4
 8009266:	d00b      	beq.n	8009280 <_vfiprintf_r+0xa4>
 8009268:	465b      	mov	r3, fp
 800926a:	4622      	mov	r2, r4
 800926c:	4629      	mov	r1, r5
 800926e:	4630      	mov	r0, r6
 8009270:	f7ff ffa1 	bl	80091b6 <__sfputs_r>
 8009274:	3001      	adds	r0, #1
 8009276:	f000 80a9 	beq.w	80093cc <_vfiprintf_r+0x1f0>
 800927a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800927c:	445a      	add	r2, fp
 800927e:	9209      	str	r2, [sp, #36]	; 0x24
 8009280:	f89a 3000 	ldrb.w	r3, [sl]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80a1 	beq.w	80093cc <_vfiprintf_r+0x1f0>
 800928a:	2300      	movs	r3, #0
 800928c:	f04f 32ff 	mov.w	r2, #4294967295
 8009290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009294:	f10a 0a01 	add.w	sl, sl, #1
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	9307      	str	r3, [sp, #28]
 800929c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092a0:	931a      	str	r3, [sp, #104]	; 0x68
 80092a2:	4654      	mov	r4, sl
 80092a4:	2205      	movs	r2, #5
 80092a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092aa:	4854      	ldr	r0, [pc, #336]	; (80093fc <_vfiprintf_r+0x220>)
 80092ac:	f000 fbc8 	bl	8009a40 <memchr>
 80092b0:	9a04      	ldr	r2, [sp, #16]
 80092b2:	b9d8      	cbnz	r0, 80092ec <_vfiprintf_r+0x110>
 80092b4:	06d1      	lsls	r1, r2, #27
 80092b6:	bf44      	itt	mi
 80092b8:	2320      	movmi	r3, #32
 80092ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092be:	0713      	lsls	r3, r2, #28
 80092c0:	bf44      	itt	mi
 80092c2:	232b      	movmi	r3, #43	; 0x2b
 80092c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c8:	f89a 3000 	ldrb.w	r3, [sl]
 80092cc:	2b2a      	cmp	r3, #42	; 0x2a
 80092ce:	d015      	beq.n	80092fc <_vfiprintf_r+0x120>
 80092d0:	4654      	mov	r4, sl
 80092d2:	2000      	movs	r0, #0
 80092d4:	f04f 0c0a 	mov.w	ip, #10
 80092d8:	9a07      	ldr	r2, [sp, #28]
 80092da:	4621      	mov	r1, r4
 80092dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092e0:	3b30      	subs	r3, #48	; 0x30
 80092e2:	2b09      	cmp	r3, #9
 80092e4:	d94d      	bls.n	8009382 <_vfiprintf_r+0x1a6>
 80092e6:	b1b0      	cbz	r0, 8009316 <_vfiprintf_r+0x13a>
 80092e8:	9207      	str	r2, [sp, #28]
 80092ea:	e014      	b.n	8009316 <_vfiprintf_r+0x13a>
 80092ec:	eba0 0308 	sub.w	r3, r0, r8
 80092f0:	fa09 f303 	lsl.w	r3, r9, r3
 80092f4:	4313      	orrs	r3, r2
 80092f6:	46a2      	mov	sl, r4
 80092f8:	9304      	str	r3, [sp, #16]
 80092fa:	e7d2      	b.n	80092a2 <_vfiprintf_r+0xc6>
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	1d19      	adds	r1, r3, #4
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	9103      	str	r1, [sp, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	bfbb      	ittet	lt
 8009308:	425b      	neglt	r3, r3
 800930a:	f042 0202 	orrlt.w	r2, r2, #2
 800930e:	9307      	strge	r3, [sp, #28]
 8009310:	9307      	strlt	r3, [sp, #28]
 8009312:	bfb8      	it	lt
 8009314:	9204      	strlt	r2, [sp, #16]
 8009316:	7823      	ldrb	r3, [r4, #0]
 8009318:	2b2e      	cmp	r3, #46	; 0x2e
 800931a:	d10c      	bne.n	8009336 <_vfiprintf_r+0x15a>
 800931c:	7863      	ldrb	r3, [r4, #1]
 800931e:	2b2a      	cmp	r3, #42	; 0x2a
 8009320:	d134      	bne.n	800938c <_vfiprintf_r+0x1b0>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	3402      	adds	r4, #2
 8009326:	1d1a      	adds	r2, r3, #4
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	9203      	str	r2, [sp, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	bfb8      	it	lt
 8009330:	f04f 33ff 	movlt.w	r3, #4294967295
 8009334:	9305      	str	r3, [sp, #20]
 8009336:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009400 <_vfiprintf_r+0x224>
 800933a:	2203      	movs	r2, #3
 800933c:	4650      	mov	r0, sl
 800933e:	7821      	ldrb	r1, [r4, #0]
 8009340:	f000 fb7e 	bl	8009a40 <memchr>
 8009344:	b138      	cbz	r0, 8009356 <_vfiprintf_r+0x17a>
 8009346:	2240      	movs	r2, #64	; 0x40
 8009348:	9b04      	ldr	r3, [sp, #16]
 800934a:	eba0 000a 	sub.w	r0, r0, sl
 800934e:	4082      	lsls	r2, r0
 8009350:	4313      	orrs	r3, r2
 8009352:	3401      	adds	r4, #1
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935a:	2206      	movs	r2, #6
 800935c:	4829      	ldr	r0, [pc, #164]	; (8009404 <_vfiprintf_r+0x228>)
 800935e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009362:	f000 fb6d 	bl	8009a40 <memchr>
 8009366:	2800      	cmp	r0, #0
 8009368:	d03f      	beq.n	80093ea <_vfiprintf_r+0x20e>
 800936a:	4b27      	ldr	r3, [pc, #156]	; (8009408 <_vfiprintf_r+0x22c>)
 800936c:	bb1b      	cbnz	r3, 80093b6 <_vfiprintf_r+0x1da>
 800936e:	9b03      	ldr	r3, [sp, #12]
 8009370:	3307      	adds	r3, #7
 8009372:	f023 0307 	bic.w	r3, r3, #7
 8009376:	3308      	adds	r3, #8
 8009378:	9303      	str	r3, [sp, #12]
 800937a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937c:	443b      	add	r3, r7
 800937e:	9309      	str	r3, [sp, #36]	; 0x24
 8009380:	e768      	b.n	8009254 <_vfiprintf_r+0x78>
 8009382:	460c      	mov	r4, r1
 8009384:	2001      	movs	r0, #1
 8009386:	fb0c 3202 	mla	r2, ip, r2, r3
 800938a:	e7a6      	b.n	80092da <_vfiprintf_r+0xfe>
 800938c:	2300      	movs	r3, #0
 800938e:	f04f 0c0a 	mov.w	ip, #10
 8009392:	4619      	mov	r1, r3
 8009394:	3401      	adds	r4, #1
 8009396:	9305      	str	r3, [sp, #20]
 8009398:	4620      	mov	r0, r4
 800939a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800939e:	3a30      	subs	r2, #48	; 0x30
 80093a0:	2a09      	cmp	r2, #9
 80093a2:	d903      	bls.n	80093ac <_vfiprintf_r+0x1d0>
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0c6      	beq.n	8009336 <_vfiprintf_r+0x15a>
 80093a8:	9105      	str	r1, [sp, #20]
 80093aa:	e7c4      	b.n	8009336 <_vfiprintf_r+0x15a>
 80093ac:	4604      	mov	r4, r0
 80093ae:	2301      	movs	r3, #1
 80093b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093b4:	e7f0      	b.n	8009398 <_vfiprintf_r+0x1bc>
 80093b6:	ab03      	add	r3, sp, #12
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	462a      	mov	r2, r5
 80093bc:	4630      	mov	r0, r6
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <_vfiprintf_r+0x230>)
 80093c0:	a904      	add	r1, sp, #16
 80093c2:	f3af 8000 	nop.w
 80093c6:	4607      	mov	r7, r0
 80093c8:	1c78      	adds	r0, r7, #1
 80093ca:	d1d6      	bne.n	800937a <_vfiprintf_r+0x19e>
 80093cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093ce:	07d9      	lsls	r1, r3, #31
 80093d0:	d405      	bmi.n	80093de <_vfiprintf_r+0x202>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	059a      	lsls	r2, r3, #22
 80093d6:	d402      	bmi.n	80093de <_vfiprintf_r+0x202>
 80093d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093da:	f7ff fde1 	bl	8008fa0 <__retarget_lock_release_recursive>
 80093de:	89ab      	ldrh	r3, [r5, #12]
 80093e0:	065b      	lsls	r3, r3, #25
 80093e2:	f53f af1d 	bmi.w	8009220 <_vfiprintf_r+0x44>
 80093e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e8:	e71c      	b.n	8009224 <_vfiprintf_r+0x48>
 80093ea:	ab03      	add	r3, sp, #12
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	462a      	mov	r2, r5
 80093f0:	4630      	mov	r0, r6
 80093f2:	4b06      	ldr	r3, [pc, #24]	; (800940c <_vfiprintf_r+0x230>)
 80093f4:	a904      	add	r1, sp, #16
 80093f6:	f000 f87d 	bl	80094f4 <_printf_i>
 80093fa:	e7e4      	b.n	80093c6 <_vfiprintf_r+0x1ea>
 80093fc:	08009c5e 	.word	0x08009c5e
 8009400:	08009c64 	.word	0x08009c64
 8009404:	08009c68 	.word	0x08009c68
 8009408:	00000000 	.word	0x00000000
 800940c:	080091b7 	.word	0x080091b7

08009410 <_printf_common>:
 8009410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009414:	4616      	mov	r6, r2
 8009416:	4699      	mov	r9, r3
 8009418:	688a      	ldr	r2, [r1, #8]
 800941a:	690b      	ldr	r3, [r1, #16]
 800941c:	4607      	mov	r7, r0
 800941e:	4293      	cmp	r3, r2
 8009420:	bfb8      	it	lt
 8009422:	4613      	movlt	r3, r2
 8009424:	6033      	str	r3, [r6, #0]
 8009426:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800942a:	460c      	mov	r4, r1
 800942c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009430:	b10a      	cbz	r2, 8009436 <_printf_common+0x26>
 8009432:	3301      	adds	r3, #1
 8009434:	6033      	str	r3, [r6, #0]
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	0699      	lsls	r1, r3, #26
 800943a:	bf42      	ittt	mi
 800943c:	6833      	ldrmi	r3, [r6, #0]
 800943e:	3302      	addmi	r3, #2
 8009440:	6033      	strmi	r3, [r6, #0]
 8009442:	6825      	ldr	r5, [r4, #0]
 8009444:	f015 0506 	ands.w	r5, r5, #6
 8009448:	d106      	bne.n	8009458 <_printf_common+0x48>
 800944a:	f104 0a19 	add.w	sl, r4, #25
 800944e:	68e3      	ldr	r3, [r4, #12]
 8009450:	6832      	ldr	r2, [r6, #0]
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	42ab      	cmp	r3, r5
 8009456:	dc2b      	bgt.n	80094b0 <_printf_common+0xa0>
 8009458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800945c:	1e13      	subs	r3, r2, #0
 800945e:	6822      	ldr	r2, [r4, #0]
 8009460:	bf18      	it	ne
 8009462:	2301      	movne	r3, #1
 8009464:	0692      	lsls	r2, r2, #26
 8009466:	d430      	bmi.n	80094ca <_printf_common+0xba>
 8009468:	4649      	mov	r1, r9
 800946a:	4638      	mov	r0, r7
 800946c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009470:	47c0      	blx	r8
 8009472:	3001      	adds	r0, #1
 8009474:	d023      	beq.n	80094be <_printf_common+0xae>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	6922      	ldr	r2, [r4, #16]
 800947a:	f003 0306 	and.w	r3, r3, #6
 800947e:	2b04      	cmp	r3, #4
 8009480:	bf14      	ite	ne
 8009482:	2500      	movne	r5, #0
 8009484:	6833      	ldreq	r3, [r6, #0]
 8009486:	f04f 0600 	mov.w	r6, #0
 800948a:	bf08      	it	eq
 800948c:	68e5      	ldreq	r5, [r4, #12]
 800948e:	f104 041a 	add.w	r4, r4, #26
 8009492:	bf08      	it	eq
 8009494:	1aed      	subeq	r5, r5, r3
 8009496:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800949a:	bf08      	it	eq
 800949c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094a0:	4293      	cmp	r3, r2
 80094a2:	bfc4      	itt	gt
 80094a4:	1a9b      	subgt	r3, r3, r2
 80094a6:	18ed      	addgt	r5, r5, r3
 80094a8:	42b5      	cmp	r5, r6
 80094aa:	d11a      	bne.n	80094e2 <_printf_common+0xd2>
 80094ac:	2000      	movs	r0, #0
 80094ae:	e008      	b.n	80094c2 <_printf_common+0xb2>
 80094b0:	2301      	movs	r3, #1
 80094b2:	4652      	mov	r2, sl
 80094b4:	4649      	mov	r1, r9
 80094b6:	4638      	mov	r0, r7
 80094b8:	47c0      	blx	r8
 80094ba:	3001      	adds	r0, #1
 80094bc:	d103      	bne.n	80094c6 <_printf_common+0xb6>
 80094be:	f04f 30ff 	mov.w	r0, #4294967295
 80094c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c6:	3501      	adds	r5, #1
 80094c8:	e7c1      	b.n	800944e <_printf_common+0x3e>
 80094ca:	2030      	movs	r0, #48	; 0x30
 80094cc:	18e1      	adds	r1, r4, r3
 80094ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094d8:	4422      	add	r2, r4
 80094da:	3302      	adds	r3, #2
 80094dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094e0:	e7c2      	b.n	8009468 <_printf_common+0x58>
 80094e2:	2301      	movs	r3, #1
 80094e4:	4622      	mov	r2, r4
 80094e6:	4649      	mov	r1, r9
 80094e8:	4638      	mov	r0, r7
 80094ea:	47c0      	blx	r8
 80094ec:	3001      	adds	r0, #1
 80094ee:	d0e6      	beq.n	80094be <_printf_common+0xae>
 80094f0:	3601      	adds	r6, #1
 80094f2:	e7d9      	b.n	80094a8 <_printf_common+0x98>

080094f4 <_printf_i>:
 80094f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f8:	7e0f      	ldrb	r7, [r1, #24]
 80094fa:	4691      	mov	r9, r2
 80094fc:	2f78      	cmp	r7, #120	; 0x78
 80094fe:	4680      	mov	r8, r0
 8009500:	460c      	mov	r4, r1
 8009502:	469a      	mov	sl, r3
 8009504:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800950a:	d807      	bhi.n	800951c <_printf_i+0x28>
 800950c:	2f62      	cmp	r7, #98	; 0x62
 800950e:	d80a      	bhi.n	8009526 <_printf_i+0x32>
 8009510:	2f00      	cmp	r7, #0
 8009512:	f000 80d5 	beq.w	80096c0 <_printf_i+0x1cc>
 8009516:	2f58      	cmp	r7, #88	; 0x58
 8009518:	f000 80c1 	beq.w	800969e <_printf_i+0x1aa>
 800951c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009524:	e03a      	b.n	800959c <_printf_i+0xa8>
 8009526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800952a:	2b15      	cmp	r3, #21
 800952c:	d8f6      	bhi.n	800951c <_printf_i+0x28>
 800952e:	a101      	add	r1, pc, #4	; (adr r1, 8009534 <_printf_i+0x40>)
 8009530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009534:	0800958d 	.word	0x0800958d
 8009538:	080095a1 	.word	0x080095a1
 800953c:	0800951d 	.word	0x0800951d
 8009540:	0800951d 	.word	0x0800951d
 8009544:	0800951d 	.word	0x0800951d
 8009548:	0800951d 	.word	0x0800951d
 800954c:	080095a1 	.word	0x080095a1
 8009550:	0800951d 	.word	0x0800951d
 8009554:	0800951d 	.word	0x0800951d
 8009558:	0800951d 	.word	0x0800951d
 800955c:	0800951d 	.word	0x0800951d
 8009560:	080096a7 	.word	0x080096a7
 8009564:	080095cd 	.word	0x080095cd
 8009568:	08009661 	.word	0x08009661
 800956c:	0800951d 	.word	0x0800951d
 8009570:	0800951d 	.word	0x0800951d
 8009574:	080096c9 	.word	0x080096c9
 8009578:	0800951d 	.word	0x0800951d
 800957c:	080095cd 	.word	0x080095cd
 8009580:	0800951d 	.word	0x0800951d
 8009584:	0800951d 	.word	0x0800951d
 8009588:	08009669 	.word	0x08009669
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	602a      	str	r2, [r5, #0]
 8009594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800959c:	2301      	movs	r3, #1
 800959e:	e0a0      	b.n	80096e2 <_printf_i+0x1ee>
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	682b      	ldr	r3, [r5, #0]
 80095a4:	0607      	lsls	r7, r0, #24
 80095a6:	f103 0104 	add.w	r1, r3, #4
 80095aa:	6029      	str	r1, [r5, #0]
 80095ac:	d501      	bpl.n	80095b2 <_printf_i+0xbe>
 80095ae:	681e      	ldr	r6, [r3, #0]
 80095b0:	e003      	b.n	80095ba <_printf_i+0xc6>
 80095b2:	0646      	lsls	r6, r0, #25
 80095b4:	d5fb      	bpl.n	80095ae <_printf_i+0xba>
 80095b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	da03      	bge.n	80095c6 <_printf_i+0xd2>
 80095be:	232d      	movs	r3, #45	; 0x2d
 80095c0:	4276      	negs	r6, r6
 80095c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c6:	230a      	movs	r3, #10
 80095c8:	4859      	ldr	r0, [pc, #356]	; (8009730 <_printf_i+0x23c>)
 80095ca:	e012      	b.n	80095f2 <_printf_i+0xfe>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	6820      	ldr	r0, [r4, #0]
 80095d0:	1d19      	adds	r1, r3, #4
 80095d2:	6029      	str	r1, [r5, #0]
 80095d4:	0605      	lsls	r5, r0, #24
 80095d6:	d501      	bpl.n	80095dc <_printf_i+0xe8>
 80095d8:	681e      	ldr	r6, [r3, #0]
 80095da:	e002      	b.n	80095e2 <_printf_i+0xee>
 80095dc:	0641      	lsls	r1, r0, #25
 80095de:	d5fb      	bpl.n	80095d8 <_printf_i+0xe4>
 80095e0:	881e      	ldrh	r6, [r3, #0]
 80095e2:	2f6f      	cmp	r7, #111	; 0x6f
 80095e4:	bf0c      	ite	eq
 80095e6:	2308      	moveq	r3, #8
 80095e8:	230a      	movne	r3, #10
 80095ea:	4851      	ldr	r0, [pc, #324]	; (8009730 <_printf_i+0x23c>)
 80095ec:	2100      	movs	r1, #0
 80095ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095f2:	6865      	ldr	r5, [r4, #4]
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	bfa8      	it	ge
 80095f8:	6821      	ldrge	r1, [r4, #0]
 80095fa:	60a5      	str	r5, [r4, #8]
 80095fc:	bfa4      	itt	ge
 80095fe:	f021 0104 	bicge.w	r1, r1, #4
 8009602:	6021      	strge	r1, [r4, #0]
 8009604:	b90e      	cbnz	r6, 800960a <_printf_i+0x116>
 8009606:	2d00      	cmp	r5, #0
 8009608:	d04b      	beq.n	80096a2 <_printf_i+0x1ae>
 800960a:	4615      	mov	r5, r2
 800960c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009610:	fb03 6711 	mls	r7, r3, r1, r6
 8009614:	5dc7      	ldrb	r7, [r0, r7]
 8009616:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800961a:	4637      	mov	r7, r6
 800961c:	42bb      	cmp	r3, r7
 800961e:	460e      	mov	r6, r1
 8009620:	d9f4      	bls.n	800960c <_printf_i+0x118>
 8009622:	2b08      	cmp	r3, #8
 8009624:	d10b      	bne.n	800963e <_printf_i+0x14a>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	07de      	lsls	r6, r3, #31
 800962a:	d508      	bpl.n	800963e <_printf_i+0x14a>
 800962c:	6923      	ldr	r3, [r4, #16]
 800962e:	6861      	ldr	r1, [r4, #4]
 8009630:	4299      	cmp	r1, r3
 8009632:	bfde      	ittt	le
 8009634:	2330      	movle	r3, #48	; 0x30
 8009636:	f805 3c01 	strble.w	r3, [r5, #-1]
 800963a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800963e:	1b52      	subs	r2, r2, r5
 8009640:	6122      	str	r2, [r4, #16]
 8009642:	464b      	mov	r3, r9
 8009644:	4621      	mov	r1, r4
 8009646:	4640      	mov	r0, r8
 8009648:	f8cd a000 	str.w	sl, [sp]
 800964c:	aa03      	add	r2, sp, #12
 800964e:	f7ff fedf 	bl	8009410 <_printf_common>
 8009652:	3001      	adds	r0, #1
 8009654:	d14a      	bne.n	80096ec <_printf_i+0x1f8>
 8009656:	f04f 30ff 	mov.w	r0, #4294967295
 800965a:	b004      	add	sp, #16
 800965c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	f043 0320 	orr.w	r3, r3, #32
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	2778      	movs	r7, #120	; 0x78
 800966a:	4832      	ldr	r0, [pc, #200]	; (8009734 <_printf_i+0x240>)
 800966c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	6829      	ldr	r1, [r5, #0]
 8009674:	061f      	lsls	r7, r3, #24
 8009676:	f851 6b04 	ldr.w	r6, [r1], #4
 800967a:	d402      	bmi.n	8009682 <_printf_i+0x18e>
 800967c:	065f      	lsls	r7, r3, #25
 800967e:	bf48      	it	mi
 8009680:	b2b6      	uxthmi	r6, r6
 8009682:	07df      	lsls	r7, r3, #31
 8009684:	bf48      	it	mi
 8009686:	f043 0320 	orrmi.w	r3, r3, #32
 800968a:	6029      	str	r1, [r5, #0]
 800968c:	bf48      	it	mi
 800968e:	6023      	strmi	r3, [r4, #0]
 8009690:	b91e      	cbnz	r6, 800969a <_printf_i+0x1a6>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	f023 0320 	bic.w	r3, r3, #32
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	2310      	movs	r3, #16
 800969c:	e7a6      	b.n	80095ec <_printf_i+0xf8>
 800969e:	4824      	ldr	r0, [pc, #144]	; (8009730 <_printf_i+0x23c>)
 80096a0:	e7e4      	b.n	800966c <_printf_i+0x178>
 80096a2:	4615      	mov	r5, r2
 80096a4:	e7bd      	b.n	8009622 <_printf_i+0x12e>
 80096a6:	682b      	ldr	r3, [r5, #0]
 80096a8:	6826      	ldr	r6, [r4, #0]
 80096aa:	1d18      	adds	r0, r3, #4
 80096ac:	6961      	ldr	r1, [r4, #20]
 80096ae:	6028      	str	r0, [r5, #0]
 80096b0:	0635      	lsls	r5, r6, #24
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	d501      	bpl.n	80096ba <_printf_i+0x1c6>
 80096b6:	6019      	str	r1, [r3, #0]
 80096b8:	e002      	b.n	80096c0 <_printf_i+0x1cc>
 80096ba:	0670      	lsls	r0, r6, #25
 80096bc:	d5fb      	bpl.n	80096b6 <_printf_i+0x1c2>
 80096be:	8019      	strh	r1, [r3, #0]
 80096c0:	2300      	movs	r3, #0
 80096c2:	4615      	mov	r5, r2
 80096c4:	6123      	str	r3, [r4, #16]
 80096c6:	e7bc      	b.n	8009642 <_printf_i+0x14e>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	2100      	movs	r1, #0
 80096cc:	1d1a      	adds	r2, r3, #4
 80096ce:	602a      	str	r2, [r5, #0]
 80096d0:	681d      	ldr	r5, [r3, #0]
 80096d2:	6862      	ldr	r2, [r4, #4]
 80096d4:	4628      	mov	r0, r5
 80096d6:	f000 f9b3 	bl	8009a40 <memchr>
 80096da:	b108      	cbz	r0, 80096e0 <_printf_i+0x1ec>
 80096dc:	1b40      	subs	r0, r0, r5
 80096de:	6060      	str	r0, [r4, #4]
 80096e0:	6863      	ldr	r3, [r4, #4]
 80096e2:	6123      	str	r3, [r4, #16]
 80096e4:	2300      	movs	r3, #0
 80096e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ea:	e7aa      	b.n	8009642 <_printf_i+0x14e>
 80096ec:	462a      	mov	r2, r5
 80096ee:	4649      	mov	r1, r9
 80096f0:	4640      	mov	r0, r8
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	47d0      	blx	sl
 80096f6:	3001      	adds	r0, #1
 80096f8:	d0ad      	beq.n	8009656 <_printf_i+0x162>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	079b      	lsls	r3, r3, #30
 80096fe:	d413      	bmi.n	8009728 <_printf_i+0x234>
 8009700:	68e0      	ldr	r0, [r4, #12]
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	4298      	cmp	r0, r3
 8009706:	bfb8      	it	lt
 8009708:	4618      	movlt	r0, r3
 800970a:	e7a6      	b.n	800965a <_printf_i+0x166>
 800970c:	2301      	movs	r3, #1
 800970e:	4632      	mov	r2, r6
 8009710:	4649      	mov	r1, r9
 8009712:	4640      	mov	r0, r8
 8009714:	47d0      	blx	sl
 8009716:	3001      	adds	r0, #1
 8009718:	d09d      	beq.n	8009656 <_printf_i+0x162>
 800971a:	3501      	adds	r5, #1
 800971c:	68e3      	ldr	r3, [r4, #12]
 800971e:	9903      	ldr	r1, [sp, #12]
 8009720:	1a5b      	subs	r3, r3, r1
 8009722:	42ab      	cmp	r3, r5
 8009724:	dcf2      	bgt.n	800970c <_printf_i+0x218>
 8009726:	e7eb      	b.n	8009700 <_printf_i+0x20c>
 8009728:	2500      	movs	r5, #0
 800972a:	f104 0619 	add.w	r6, r4, #25
 800972e:	e7f5      	b.n	800971c <_printf_i+0x228>
 8009730:	08009c6f 	.word	0x08009c6f
 8009734:	08009c80 	.word	0x08009c80

08009738 <__sflush_r>:
 8009738:	898a      	ldrh	r2, [r1, #12]
 800973a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973c:	4605      	mov	r5, r0
 800973e:	0710      	lsls	r0, r2, #28
 8009740:	460c      	mov	r4, r1
 8009742:	d457      	bmi.n	80097f4 <__sflush_r+0xbc>
 8009744:	684b      	ldr	r3, [r1, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	dc04      	bgt.n	8009754 <__sflush_r+0x1c>
 800974a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800974c:	2b00      	cmp	r3, #0
 800974e:	dc01      	bgt.n	8009754 <__sflush_r+0x1c>
 8009750:	2000      	movs	r0, #0
 8009752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009756:	2e00      	cmp	r6, #0
 8009758:	d0fa      	beq.n	8009750 <__sflush_r+0x18>
 800975a:	2300      	movs	r3, #0
 800975c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009760:	682f      	ldr	r7, [r5, #0]
 8009762:	6a21      	ldr	r1, [r4, #32]
 8009764:	602b      	str	r3, [r5, #0]
 8009766:	d032      	beq.n	80097ce <__sflush_r+0x96>
 8009768:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	075a      	lsls	r2, r3, #29
 800976e:	d505      	bpl.n	800977c <__sflush_r+0x44>
 8009770:	6863      	ldr	r3, [r4, #4]
 8009772:	1ac0      	subs	r0, r0, r3
 8009774:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009776:	b10b      	cbz	r3, 800977c <__sflush_r+0x44>
 8009778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800977a:	1ac0      	subs	r0, r0, r3
 800977c:	2300      	movs	r3, #0
 800977e:	4602      	mov	r2, r0
 8009780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009782:	4628      	mov	r0, r5
 8009784:	6a21      	ldr	r1, [r4, #32]
 8009786:	47b0      	blx	r6
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	d106      	bne.n	800979c <__sflush_r+0x64>
 800978e:	6829      	ldr	r1, [r5, #0]
 8009790:	291d      	cmp	r1, #29
 8009792:	d82b      	bhi.n	80097ec <__sflush_r+0xb4>
 8009794:	4a28      	ldr	r2, [pc, #160]	; (8009838 <__sflush_r+0x100>)
 8009796:	410a      	asrs	r2, r1
 8009798:	07d6      	lsls	r6, r2, #31
 800979a:	d427      	bmi.n	80097ec <__sflush_r+0xb4>
 800979c:	2200      	movs	r2, #0
 800979e:	6062      	str	r2, [r4, #4]
 80097a0:	6922      	ldr	r2, [r4, #16]
 80097a2:	04d9      	lsls	r1, r3, #19
 80097a4:	6022      	str	r2, [r4, #0]
 80097a6:	d504      	bpl.n	80097b2 <__sflush_r+0x7a>
 80097a8:	1c42      	adds	r2, r0, #1
 80097aa:	d101      	bne.n	80097b0 <__sflush_r+0x78>
 80097ac:	682b      	ldr	r3, [r5, #0]
 80097ae:	b903      	cbnz	r3, 80097b2 <__sflush_r+0x7a>
 80097b0:	6560      	str	r0, [r4, #84]	; 0x54
 80097b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097b4:	602f      	str	r7, [r5, #0]
 80097b6:	2900      	cmp	r1, #0
 80097b8:	d0ca      	beq.n	8009750 <__sflush_r+0x18>
 80097ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097be:	4299      	cmp	r1, r3
 80097c0:	d002      	beq.n	80097c8 <__sflush_r+0x90>
 80097c2:	4628      	mov	r0, r5
 80097c4:	f7ff fbee 	bl	8008fa4 <_free_r>
 80097c8:	2000      	movs	r0, #0
 80097ca:	6360      	str	r0, [r4, #52]	; 0x34
 80097cc:	e7c1      	b.n	8009752 <__sflush_r+0x1a>
 80097ce:	2301      	movs	r3, #1
 80097d0:	4628      	mov	r0, r5
 80097d2:	47b0      	blx	r6
 80097d4:	1c41      	adds	r1, r0, #1
 80097d6:	d1c8      	bne.n	800976a <__sflush_r+0x32>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0c5      	beq.n	800976a <__sflush_r+0x32>
 80097de:	2b1d      	cmp	r3, #29
 80097e0:	d001      	beq.n	80097e6 <__sflush_r+0xae>
 80097e2:	2b16      	cmp	r3, #22
 80097e4:	d101      	bne.n	80097ea <__sflush_r+0xb2>
 80097e6:	602f      	str	r7, [r5, #0]
 80097e8:	e7b2      	b.n	8009750 <__sflush_r+0x18>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	e7ae      	b.n	8009752 <__sflush_r+0x1a>
 80097f4:	690f      	ldr	r7, [r1, #16]
 80097f6:	2f00      	cmp	r7, #0
 80097f8:	d0aa      	beq.n	8009750 <__sflush_r+0x18>
 80097fa:	0793      	lsls	r3, r2, #30
 80097fc:	bf18      	it	ne
 80097fe:	2300      	movne	r3, #0
 8009800:	680e      	ldr	r6, [r1, #0]
 8009802:	bf08      	it	eq
 8009804:	694b      	ldreq	r3, [r1, #20]
 8009806:	1bf6      	subs	r6, r6, r7
 8009808:	600f      	str	r7, [r1, #0]
 800980a:	608b      	str	r3, [r1, #8]
 800980c:	2e00      	cmp	r6, #0
 800980e:	dd9f      	ble.n	8009750 <__sflush_r+0x18>
 8009810:	4633      	mov	r3, r6
 8009812:	463a      	mov	r2, r7
 8009814:	4628      	mov	r0, r5
 8009816:	6a21      	ldr	r1, [r4, #32]
 8009818:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800981c:	47e0      	blx	ip
 800981e:	2800      	cmp	r0, #0
 8009820:	dc06      	bgt.n	8009830 <__sflush_r+0xf8>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	e790      	b.n	8009752 <__sflush_r+0x1a>
 8009830:	4407      	add	r7, r0
 8009832:	1a36      	subs	r6, r6, r0
 8009834:	e7ea      	b.n	800980c <__sflush_r+0xd4>
 8009836:	bf00      	nop
 8009838:	dfbffffe 	.word	0xdfbffffe

0800983c <_fflush_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	690b      	ldr	r3, [r1, #16]
 8009840:	4605      	mov	r5, r0
 8009842:	460c      	mov	r4, r1
 8009844:	b913      	cbnz	r3, 800984c <_fflush_r+0x10>
 8009846:	2500      	movs	r5, #0
 8009848:	4628      	mov	r0, r5
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	b118      	cbz	r0, 8009856 <_fflush_r+0x1a>
 800984e:	6a03      	ldr	r3, [r0, #32]
 8009850:	b90b      	cbnz	r3, 8009856 <_fflush_r+0x1a>
 8009852:	f7ff fa97 	bl	8008d84 <__sinit>
 8009856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0f3      	beq.n	8009846 <_fflush_r+0xa>
 800985e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009860:	07d0      	lsls	r0, r2, #31
 8009862:	d404      	bmi.n	800986e <_fflush_r+0x32>
 8009864:	0599      	lsls	r1, r3, #22
 8009866:	d402      	bmi.n	800986e <_fflush_r+0x32>
 8009868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800986a:	f7ff fb98 	bl	8008f9e <__retarget_lock_acquire_recursive>
 800986e:	4628      	mov	r0, r5
 8009870:	4621      	mov	r1, r4
 8009872:	f7ff ff61 	bl	8009738 <__sflush_r>
 8009876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009878:	4605      	mov	r5, r0
 800987a:	07da      	lsls	r2, r3, #31
 800987c:	d4e4      	bmi.n	8009848 <_fflush_r+0xc>
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	059b      	lsls	r3, r3, #22
 8009882:	d4e1      	bmi.n	8009848 <_fflush_r+0xc>
 8009884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009886:	f7ff fb8b 	bl	8008fa0 <__retarget_lock_release_recursive>
 800988a:	e7dd      	b.n	8009848 <_fflush_r+0xc>

0800988c <_putc_r>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	460d      	mov	r5, r1
 8009890:	4614      	mov	r4, r2
 8009892:	4606      	mov	r6, r0
 8009894:	b118      	cbz	r0, 800989e <_putc_r+0x12>
 8009896:	6a03      	ldr	r3, [r0, #32]
 8009898:	b90b      	cbnz	r3, 800989e <_putc_r+0x12>
 800989a:	f7ff fa73 	bl	8008d84 <__sinit>
 800989e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098a0:	07d8      	lsls	r0, r3, #31
 80098a2:	d405      	bmi.n	80098b0 <_putc_r+0x24>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	0599      	lsls	r1, r3, #22
 80098a8:	d402      	bmi.n	80098b0 <_putc_r+0x24>
 80098aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ac:	f7ff fb77 	bl	8008f9e <__retarget_lock_acquire_recursive>
 80098b0:	68a3      	ldr	r3, [r4, #8]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	60a3      	str	r3, [r4, #8]
 80098b8:	da05      	bge.n	80098c6 <_putc_r+0x3a>
 80098ba:	69a2      	ldr	r2, [r4, #24]
 80098bc:	4293      	cmp	r3, r2
 80098be:	db12      	blt.n	80098e6 <_putc_r+0x5a>
 80098c0:	b2eb      	uxtb	r3, r5
 80098c2:	2b0a      	cmp	r3, #10
 80098c4:	d00f      	beq.n	80098e6 <_putc_r+0x5a>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	701d      	strb	r5, [r3, #0]
 80098ce:	b2ed      	uxtb	r5, r5
 80098d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098d2:	07da      	lsls	r2, r3, #31
 80098d4:	d405      	bmi.n	80098e2 <_putc_r+0x56>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	059b      	lsls	r3, r3, #22
 80098da:	d402      	bmi.n	80098e2 <_putc_r+0x56>
 80098dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098de:	f7ff fb5f 	bl	8008fa0 <__retarget_lock_release_recursive>
 80098e2:	4628      	mov	r0, r5
 80098e4:	bd70      	pop	{r4, r5, r6, pc}
 80098e6:	4629      	mov	r1, r5
 80098e8:	4622      	mov	r2, r4
 80098ea:	4630      	mov	r0, r6
 80098ec:	f000 f802 	bl	80098f4 <__swbuf_r>
 80098f0:	4605      	mov	r5, r0
 80098f2:	e7ed      	b.n	80098d0 <_putc_r+0x44>

080098f4 <__swbuf_r>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	460e      	mov	r6, r1
 80098f8:	4614      	mov	r4, r2
 80098fa:	4605      	mov	r5, r0
 80098fc:	b118      	cbz	r0, 8009906 <__swbuf_r+0x12>
 80098fe:	6a03      	ldr	r3, [r0, #32]
 8009900:	b90b      	cbnz	r3, 8009906 <__swbuf_r+0x12>
 8009902:	f7ff fa3f 	bl	8008d84 <__sinit>
 8009906:	69a3      	ldr	r3, [r4, #24]
 8009908:	60a3      	str	r3, [r4, #8]
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	071a      	lsls	r2, r3, #28
 800990e:	d525      	bpl.n	800995c <__swbuf_r+0x68>
 8009910:	6923      	ldr	r3, [r4, #16]
 8009912:	b31b      	cbz	r3, 800995c <__swbuf_r+0x68>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	6922      	ldr	r2, [r4, #16]
 8009918:	b2f6      	uxtb	r6, r6
 800991a:	1a98      	subs	r0, r3, r2
 800991c:	6963      	ldr	r3, [r4, #20]
 800991e:	4637      	mov	r7, r6
 8009920:	4283      	cmp	r3, r0
 8009922:	dc04      	bgt.n	800992e <__swbuf_r+0x3a>
 8009924:	4621      	mov	r1, r4
 8009926:	4628      	mov	r0, r5
 8009928:	f7ff ff88 	bl	800983c <_fflush_r>
 800992c:	b9e0      	cbnz	r0, 8009968 <__swbuf_r+0x74>
 800992e:	68a3      	ldr	r3, [r4, #8]
 8009930:	3b01      	subs	r3, #1
 8009932:	60a3      	str	r3, [r4, #8]
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	6022      	str	r2, [r4, #0]
 800993a:	701e      	strb	r6, [r3, #0]
 800993c:	6962      	ldr	r2, [r4, #20]
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	429a      	cmp	r2, r3
 8009942:	d004      	beq.n	800994e <__swbuf_r+0x5a>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	07db      	lsls	r3, r3, #31
 8009948:	d506      	bpl.n	8009958 <__swbuf_r+0x64>
 800994a:	2e0a      	cmp	r6, #10
 800994c:	d104      	bne.n	8009958 <__swbuf_r+0x64>
 800994e:	4621      	mov	r1, r4
 8009950:	4628      	mov	r0, r5
 8009952:	f7ff ff73 	bl	800983c <_fflush_r>
 8009956:	b938      	cbnz	r0, 8009968 <__swbuf_r+0x74>
 8009958:	4638      	mov	r0, r7
 800995a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f000 f806 	bl	8009970 <__swsetup_r>
 8009964:	2800      	cmp	r0, #0
 8009966:	d0d5      	beq.n	8009914 <__swbuf_r+0x20>
 8009968:	f04f 37ff 	mov.w	r7, #4294967295
 800996c:	e7f4      	b.n	8009958 <__swbuf_r+0x64>
	...

08009970 <__swsetup_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4b2a      	ldr	r3, [pc, #168]	; (8009a1c <__swsetup_r+0xac>)
 8009974:	4605      	mov	r5, r0
 8009976:	6818      	ldr	r0, [r3, #0]
 8009978:	460c      	mov	r4, r1
 800997a:	b118      	cbz	r0, 8009984 <__swsetup_r+0x14>
 800997c:	6a03      	ldr	r3, [r0, #32]
 800997e:	b90b      	cbnz	r3, 8009984 <__swsetup_r+0x14>
 8009980:	f7ff fa00 	bl	8008d84 <__sinit>
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800998a:	0718      	lsls	r0, r3, #28
 800998c:	d422      	bmi.n	80099d4 <__swsetup_r+0x64>
 800998e:	06d9      	lsls	r1, r3, #27
 8009990:	d407      	bmi.n	80099a2 <__swsetup_r+0x32>
 8009992:	2309      	movs	r3, #9
 8009994:	602b      	str	r3, [r5, #0]
 8009996:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800999a:	f04f 30ff 	mov.w	r0, #4294967295
 800999e:	81a3      	strh	r3, [r4, #12]
 80099a0:	e034      	b.n	8009a0c <__swsetup_r+0x9c>
 80099a2:	0758      	lsls	r0, r3, #29
 80099a4:	d512      	bpl.n	80099cc <__swsetup_r+0x5c>
 80099a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099a8:	b141      	cbz	r1, 80099bc <__swsetup_r+0x4c>
 80099aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099ae:	4299      	cmp	r1, r3
 80099b0:	d002      	beq.n	80099b8 <__swsetup_r+0x48>
 80099b2:	4628      	mov	r0, r5
 80099b4:	f7ff faf6 	bl	8008fa4 <_free_r>
 80099b8:	2300      	movs	r3, #0
 80099ba:	6363      	str	r3, [r4, #52]	; 0x34
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	2300      	movs	r3, #0
 80099c6:	6063      	str	r3, [r4, #4]
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	6023      	str	r3, [r4, #0]
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f043 0308 	orr.w	r3, r3, #8
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	b94b      	cbnz	r3, 80099ec <__swsetup_r+0x7c>
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099e2:	d003      	beq.n	80099ec <__swsetup_r+0x7c>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 f85d 	bl	8009aa6 <__smakebuf_r>
 80099ec:	89a0      	ldrh	r0, [r4, #12]
 80099ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099f2:	f010 0301 	ands.w	r3, r0, #1
 80099f6:	d00a      	beq.n	8009a0e <__swsetup_r+0x9e>
 80099f8:	2300      	movs	r3, #0
 80099fa:	60a3      	str	r3, [r4, #8]
 80099fc:	6963      	ldr	r3, [r4, #20]
 80099fe:	425b      	negs	r3, r3
 8009a00:	61a3      	str	r3, [r4, #24]
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	b943      	cbnz	r3, 8009a18 <__swsetup_r+0xa8>
 8009a06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a0a:	d1c4      	bne.n	8009996 <__swsetup_r+0x26>
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	0781      	lsls	r1, r0, #30
 8009a10:	bf58      	it	pl
 8009a12:	6963      	ldrpl	r3, [r4, #20]
 8009a14:	60a3      	str	r3, [r4, #8]
 8009a16:	e7f4      	b.n	8009a02 <__swsetup_r+0x92>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e7f7      	b.n	8009a0c <__swsetup_r+0x9c>
 8009a1c:	200001d8 	.word	0x200001d8

08009a20 <_sbrk_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	2300      	movs	r3, #0
 8009a24:	4d05      	ldr	r5, [pc, #20]	; (8009a3c <_sbrk_r+0x1c>)
 8009a26:	4604      	mov	r4, r0
 8009a28:	4608      	mov	r0, r1
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	f7f7 f946 	bl	8000cbc <_sbrk>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_sbrk_r+0x1a>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_sbrk_r+0x1a>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20001994 	.word	0x20001994

08009a40 <memchr>:
 8009a40:	4603      	mov	r3, r0
 8009a42:	b510      	push	{r4, lr}
 8009a44:	b2c9      	uxtb	r1, r1
 8009a46:	4402      	add	r2, r0
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	d101      	bne.n	8009a52 <memchr+0x12>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e003      	b.n	8009a5a <memchr+0x1a>
 8009a52:	7804      	ldrb	r4, [r0, #0]
 8009a54:	3301      	adds	r3, #1
 8009a56:	428c      	cmp	r4, r1
 8009a58:	d1f6      	bne.n	8009a48 <memchr+0x8>
 8009a5a:	bd10      	pop	{r4, pc}

08009a5c <__swhatbuf_r>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	460c      	mov	r4, r1
 8009a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a64:	4615      	mov	r5, r2
 8009a66:	2900      	cmp	r1, #0
 8009a68:	461e      	mov	r6, r3
 8009a6a:	b096      	sub	sp, #88	; 0x58
 8009a6c:	da0c      	bge.n	8009a88 <__swhatbuf_r+0x2c>
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	2100      	movs	r1, #0
 8009a72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009a76:	bf0c      	ite	eq
 8009a78:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009a7c:	2340      	movne	r3, #64	; 0x40
 8009a7e:	2000      	movs	r0, #0
 8009a80:	6031      	str	r1, [r6, #0]
 8009a82:	602b      	str	r3, [r5, #0]
 8009a84:	b016      	add	sp, #88	; 0x58
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	466a      	mov	r2, sp
 8009a8a:	f000 f849 	bl	8009b20 <_fstat_r>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	dbed      	blt.n	8009a6e <__swhatbuf_r+0x12>
 8009a92:	9901      	ldr	r1, [sp, #4]
 8009a94:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009a98:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009a9c:	4259      	negs	r1, r3
 8009a9e:	4159      	adcs	r1, r3
 8009aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aa4:	e7eb      	b.n	8009a7e <__swhatbuf_r+0x22>

08009aa6 <__smakebuf_r>:
 8009aa6:	898b      	ldrh	r3, [r1, #12]
 8009aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009aaa:	079d      	lsls	r5, r3, #30
 8009aac:	4606      	mov	r6, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	d507      	bpl.n	8009ac2 <__smakebuf_r+0x1c>
 8009ab2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ab6:	6023      	str	r3, [r4, #0]
 8009ab8:	6123      	str	r3, [r4, #16]
 8009aba:	2301      	movs	r3, #1
 8009abc:	6163      	str	r3, [r4, #20]
 8009abe:	b002      	add	sp, #8
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	466a      	mov	r2, sp
 8009ac4:	ab01      	add	r3, sp, #4
 8009ac6:	f7ff ffc9 	bl	8009a5c <__swhatbuf_r>
 8009aca:	9900      	ldr	r1, [sp, #0]
 8009acc:	4605      	mov	r5, r0
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7ff fad0 	bl	8009074 <_malloc_r>
 8009ad4:	b948      	cbnz	r0, 8009aea <__smakebuf_r+0x44>
 8009ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ada:	059a      	lsls	r2, r3, #22
 8009adc:	d4ef      	bmi.n	8009abe <__smakebuf_r+0x18>
 8009ade:	f023 0303 	bic.w	r3, r3, #3
 8009ae2:	f043 0302 	orr.w	r3, r3, #2
 8009ae6:	81a3      	strh	r3, [r4, #12]
 8009ae8:	e7e3      	b.n	8009ab2 <__smakebuf_r+0xc>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	6020      	str	r0, [r4, #0]
 8009aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af2:	81a3      	strh	r3, [r4, #12]
 8009af4:	9b00      	ldr	r3, [sp, #0]
 8009af6:	6120      	str	r0, [r4, #16]
 8009af8:	6163      	str	r3, [r4, #20]
 8009afa:	9b01      	ldr	r3, [sp, #4]
 8009afc:	b15b      	cbz	r3, 8009b16 <__smakebuf_r+0x70>
 8009afe:	4630      	mov	r0, r6
 8009b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b04:	f000 f81e 	bl	8009b44 <_isatty_r>
 8009b08:	b128      	cbz	r0, 8009b16 <__smakebuf_r+0x70>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	f043 0301 	orr.w	r3, r3, #1
 8009b14:	81a3      	strh	r3, [r4, #12]
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	431d      	orrs	r5, r3
 8009b1a:	81a5      	strh	r5, [r4, #12]
 8009b1c:	e7cf      	b.n	8009abe <__smakebuf_r+0x18>
	...

08009b20 <_fstat_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	2300      	movs	r3, #0
 8009b24:	4d06      	ldr	r5, [pc, #24]	; (8009b40 <_fstat_r+0x20>)
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	602b      	str	r3, [r5, #0]
 8009b2e:	f7f7 f89f 	bl	8000c70 <_fstat>
 8009b32:	1c43      	adds	r3, r0, #1
 8009b34:	d102      	bne.n	8009b3c <_fstat_r+0x1c>
 8009b36:	682b      	ldr	r3, [r5, #0]
 8009b38:	b103      	cbz	r3, 8009b3c <_fstat_r+0x1c>
 8009b3a:	6023      	str	r3, [r4, #0]
 8009b3c:	bd38      	pop	{r3, r4, r5, pc}
 8009b3e:	bf00      	nop
 8009b40:	20001994 	.word	0x20001994

08009b44 <_isatty_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	2300      	movs	r3, #0
 8009b48:	4d05      	ldr	r5, [pc, #20]	; (8009b60 <_isatty_r+0x1c>)
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	602b      	str	r3, [r5, #0]
 8009b50:	f7f7 f89d 	bl	8000c8e <_isatty>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_isatty_r+0x1a>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_isatty_r+0x1a>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20001994 	.word	0x20001994

08009b64 <_init>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	bf00      	nop
 8009b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6a:	bc08      	pop	{r3}
 8009b6c:	469e      	mov	lr, r3
 8009b6e:	4770      	bx	lr

08009b70 <_fini>:
 8009b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b72:	bf00      	nop
 8009b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b76:	bc08      	pop	{r3}
 8009b78:	469e      	mov	lr, r3
 8009b7a:	4770      	bx	lr
