
ADS1256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bc8  08009bc8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009bc8  08009bc8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bc8  08009bc8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bc8  08009bc8  00019bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bcc  08009bcc  00019bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017c8  200001dc  08009dac  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019a4  08009dac  000219a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbc1  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000345d  00000000  00000000  0002fe09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00033268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2c  00000000  00000000  00034040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001afaf  00000000  00000000  00034a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013942  00000000  00000000  0004fa1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088fe5  00000000  00000000  0006335d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dd4  00000000  00000000  000ec344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000f0118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08009ad8 	.word	0x08009ad8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08009ad8 	.word	0x08009ad8

0800014c <readRegister>:
#include <ads1256.h>

uint8_t readRegister(uint8_t reg){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t dat;

    uint8_t command[2];
    command[0] = CMD_RREG_BASE | reg;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	b2db      	uxtb	r3, r3
 800015e:	733b      	strb	r3, [r7, #12]
    command[1] = 0; // read (this + 1) registers
 8000160:	2300      	movs	r3, #0
 8000162:	737b      	strb	r3, [r7, #13]

    HAL_SPI_Transmit(&hspi1, command, 2, HAL_MAX_DELAY); // Send register address and data
 8000164:	f107 010c 	add.w	r1, r7, #12
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	2202      	movs	r2, #2
 800016e:	4808      	ldr	r0, [pc, #32]	; (8000190 <readRegister+0x44>)
 8000170:	f003 fc44 	bl	80039fc <HAL_SPI_Transmit>
    ;
    ;
    ;
    ;
    ;
    HAL_SPI_Receive(&hspi1, &dat, 1, HAL_MAX_DELAY); // read register
 8000174:	f107 010f 	add.w	r1, r7, #15
 8000178:	f04f 33ff 	mov.w	r3, #4294967295
 800017c:	2201      	movs	r2, #1
 800017e:	4804      	ldr	r0, [pc, #16]	; (8000190 <readRegister+0x44>)
 8000180:	f003 fd7f 	bl	8003c82 <HAL_SPI_Receive>
    return dat;
 8000184:	7bfb      	ldrb	r3, [r7, #15]
}
 8000186:	4618      	mov	r0, r3
 8000188:	3710      	adds	r7, #16
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	20000204 	.word	0x20000204

08000194 <sendCommand>:


void sendCommand(uint8_t cmd){
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800019e:	1df9      	adds	r1, r7, #7
 80001a0:	f04f 33ff 	mov.w	r3, #4294967295
 80001a4:	2201      	movs	r2, #1
 80001a6:	4803      	ldr	r0, [pc, #12]	; (80001b4 <sendCommand+0x20>)
 80001a8:	f003 fc28 	bl	80039fc <HAL_SPI_Transmit>
    ;
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000204 	.word	0x20000204

080001b8 <writeRegister>:


void writeRegister(uint8_t reg, uint8_t data){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b084      	sub	sp, #16
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	460a      	mov	r2, r1
 80001c2:	71fb      	strb	r3, [r7, #7]
 80001c4:	4613      	mov	r3, r2
 80001c6:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[3];

    txData[0] = CMD_WREG_BASE | reg;
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	733b      	strb	r3, [r7, #12]
    txData[1] = 0;          // (this + 1) registers will be written (0+1=1)
 80001d2:	2300      	movs	r3, #0
 80001d4:	737b      	strb	r3, [r7, #13]
    txData[2] = data;
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	73bb      	strb	r3, [r7, #14]

    HAL_SPI_Transmit(&hspi1, txData, 3, HAL_MAX_DELAY); // Send register address and data
 80001da:	f107 010c 	add.w	r1, r7, #12
 80001de:	f04f 33ff 	mov.w	r3, #4294967295
 80001e2:	2203      	movs	r2, #3
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <writeRegister+0x3c>)
 80001e6:	f003 fc09 	bl	80039fc <HAL_SPI_Transmit>
    ;
}
 80001ea:	bf00      	nop
 80001ec:	3710      	adds	r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000204 	.word	0x20000204

080001f8 <setupADS1256>:


// Set up ADS1256 configuration registers
// Initialize SPI communication with ADS1256
// Configure the ADC settings
uint8_t setupADS1256() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0

	HAL_Delay(100);
 80001fe:	2064      	movs	r0, #100	; 0x64
 8000200:	f000 fddc 	bl	8000dbc <HAL_Delay>
	sendCommand(CMD_RESET);
 8000204:	20fe      	movs	r0, #254	; 0xfe
 8000206:	f7ff ffc5 	bl	8000194 <sendCommand>
	HAL_Delay(100);
 800020a:	2064      	movs	r0, #100	; 0x64
 800020c:	f000 fdd6 	bl	8000dbc <HAL_Delay>

    // read the STATUS register
	uint8_t status = readRegister(REG_STATUS);
 8000210:	2000      	movs	r0, #0
 8000212:	f7ff ff9b 	bl	800014c <readRegister>
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
    writeRegister(REG_STATUS, (status & 0xF0) | 0x02); //enable buffer amplifier
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	f023 030f 	bic.w	r3, r3, #15
 8000222:	b25b      	sxtb	r3, r3
 8000224:	f043 0302 	orr.w	r3, r3, #2
 8000228:	b25b      	sxtb	r3, r3
 800022a:	b2db      	uxtb	r3, r3
 800022c:	4619      	mov	r1, r3
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffc2 	bl	80001b8 <writeRegister>
    while(NOT_DRDY) ;	//wait for calibration to complete
 8000234:	bf00      	nop
 8000236:	2102      	movs	r1, #2
 8000238:	4816      	ldr	r0, [pc, #88]	; (8000294 <setupADS1256+0x9c>)
 800023a:	f001 f8a7 	bl	800138c <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d1f8      	bne.n	8000236 <setupADS1256+0x3e>

    // Configure the DRATE register for desired data rate
    writeRegister(REG_DRATE, SPS_50); // Set data rate to 50Hz
 8000244:	2163      	movs	r1, #99	; 0x63
 8000246:	2003      	movs	r0, #3
 8000248:	f7ff ffb6 	bl	80001b8 <writeRegister>
    while(NOT_DRDY) ;	//wait to complete
 800024c:	bf00      	nop
 800024e:	2102      	movs	r1, #2
 8000250:	4810      	ldr	r0, [pc, #64]	; (8000294 <setupADS1256+0x9c>)
 8000252:	f001 f89b 	bl	800138c <HAL_GPIO_ReadPin>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d1f8      	bne.n	800024e <setupADS1256+0x56>

    // Configure the ADCON register
    writeRegister(REG_ADCON, PGA1 ); // Set PGA gain to 1
 800025c:	2100      	movs	r1, #0
 800025e:	2002      	movs	r0, #2
 8000260:	f7ff ffaa 	bl	80001b8 <writeRegister>
    while(NOT_DRDY) ;	//wait to complete
 8000264:	bf00      	nop
 8000266:	2102      	movs	r1, #2
 8000268:	480a      	ldr	r0, [pc, #40]	; (8000294 <setupADS1256+0x9c>)
 800026a:	f001 f88f 	bl	800138c <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f8      	bne.n	8000266 <setupADS1256+0x6e>
    
    sendCommand(CMD_SELFCAL); //start Offset and Gain Self-Calibration
 8000274:	20f0      	movs	r0, #240	; 0xf0
 8000276:	f7ff ff8d 	bl	8000194 <sendCommand>
    //can last up to 2 seconds for low data rates
    while(NOT_DRDY) ;	//wait for calibration to complete
 800027a:	bf00      	nop
 800027c:	2102      	movs	r1, #2
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <setupADS1256+0x9c>)
 8000280:	f001 f884 	bl	800138c <HAL_GPIO_ReadPin>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d1f8      	bne.n	800027c <setupADS1256+0x84>


    return status;
 800028a:	79fb      	ldrb	r3, [r7, #7]
}
 800028c:	4618      	mov	r0, r3
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010c00 	.word	0x40010c00

08000298 <stopSampling>:

void stopSampling(void){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    while(NOT_DRDY) ;	//wait to complete
 800029c:	bf00      	nop
 800029e:	2102      	movs	r1, #2
 80002a0:	4809      	ldr	r0, [pc, #36]	; (80002c8 <stopSampling+0x30>)
 80002a2:	f001 f873 	bl	800138c <HAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d1f8      	bne.n	800029e <stopSampling+0x6>
    sendCommand(CMD_SDATAC);
 80002ac:	200f      	movs	r0, #15
 80002ae:	f7ff ff71 	bl	8000194 <sendCommand>
    while(NOT_DRDY) ;	//wait to complete
 80002b2:	bf00      	nop
 80002b4:	2102      	movs	r1, #2
 80002b6:	4804      	ldr	r0, [pc, #16]	; (80002c8 <stopSampling+0x30>)
 80002b8:	f001 f868 	bl	800138c <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1f8      	bne.n	80002b4 <stopSampling+0x1c>
    //sendCommand(CMD_RESET);
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40010c00 	.word	0x40010c00

080002cc <setChannel>:

// Channel Switching for differential mode. Use -1 to set input channel to
// AINCOM
uint8_t setChannel(int8_t AIN_P, int8_t AIN_N) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
	uint8_t MUX_CHANNEL;
	uint8_t MUXP;
	uint8_t MUXN;

	switch (AIN_P) {
 80002dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e0:	2b07      	cmp	r3, #7
 80002e2:	d82b      	bhi.n	800033c <setChannel+0x70>
 80002e4:	a201      	add	r2, pc, #4	; (adr r2, 80002ec <setChannel+0x20>)
 80002e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ea:	bf00      	nop
 80002ec:	0800030d 	.word	0x0800030d
 80002f0:	08000313 	.word	0x08000313
 80002f4:	08000319 	.word	0x08000319
 80002f8:	0800031f 	.word	0x0800031f
 80002fc:	08000325 	.word	0x08000325
 8000300:	0800032b 	.word	0x0800032b
 8000304:	08000331 	.word	0x08000331
 8000308:	08000337 	.word	0x08000337
		case 0:
		  MUXP = MUXP_AIN0;
 800030c:	2300      	movs	r3, #0
 800030e:	73fb      	strb	r3, [r7, #15]
		  break;
 8000310:	e016      	b.n	8000340 <setChannel+0x74>
		case 1:
		  MUXP = MUXP_AIN1;
 8000312:	2310      	movs	r3, #16
 8000314:	73fb      	strb	r3, [r7, #15]
		  break;
 8000316:	e013      	b.n	8000340 <setChannel+0x74>
		case 2:
		  MUXP = MUXP_AIN2;
 8000318:	2320      	movs	r3, #32
 800031a:	73fb      	strb	r3, [r7, #15]
		  break;
 800031c:	e010      	b.n	8000340 <setChannel+0x74>
		case 3:
		  MUXP = MUXP_AIN3;
 800031e:	2330      	movs	r3, #48	; 0x30
 8000320:	73fb      	strb	r3, [r7, #15]
		  break;
 8000322:	e00d      	b.n	8000340 <setChannel+0x74>
		case 4:
		  MUXP = MUXP_AIN4;
 8000324:	2340      	movs	r3, #64	; 0x40
 8000326:	73fb      	strb	r3, [r7, #15]
		  break;
 8000328:	e00a      	b.n	8000340 <setChannel+0x74>
		case 5:
		  MUXP = MUXP_AIN5;
 800032a:	2350      	movs	r3, #80	; 0x50
 800032c:	73fb      	strb	r3, [r7, #15]
		  break;
 800032e:	e007      	b.n	8000340 <setChannel+0x74>
		case 6:
		  MUXP = MUXP_AIN6;
 8000330:	2360      	movs	r3, #96	; 0x60
 8000332:	73fb      	strb	r3, [r7, #15]
		  break;
 8000334:	e004      	b.n	8000340 <setChannel+0x74>
		case 7:
		  MUXP = MUXP_AIN7;
 8000336:	2370      	movs	r3, #112	; 0x70
 8000338:	73fb      	strb	r3, [r7, #15]
		  break;
 800033a:	e001      	b.n	8000340 <setChannel+0x74>
		default:
		  MUXP = MUXP_AINCOM;
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	73fb      	strb	r3, [r7, #15]
	}

	switch (AIN_N) {
 8000340:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000344:	2b07      	cmp	r3, #7
 8000346:	d82b      	bhi.n	80003a0 <setChannel+0xd4>
 8000348:	a201      	add	r2, pc, #4	; (adr r2, 8000350 <setChannel+0x84>)
 800034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034e:	bf00      	nop
 8000350:	08000371 	.word	0x08000371
 8000354:	08000377 	.word	0x08000377
 8000358:	0800037d 	.word	0x0800037d
 800035c:	08000383 	.word	0x08000383
 8000360:	08000389 	.word	0x08000389
 8000364:	0800038f 	.word	0x0800038f
 8000368:	08000395 	.word	0x08000395
 800036c:	0800039b 	.word	0x0800039b
		case 0:
		  MUXN = MUXN_AIN0;
 8000370:	2300      	movs	r3, #0
 8000372:	73bb      	strb	r3, [r7, #14]
		  break;
 8000374:	e016      	b.n	80003a4 <setChannel+0xd8>
		case 1:
		  MUXN = MUXN_AIN1;
 8000376:	2301      	movs	r3, #1
 8000378:	73bb      	strb	r3, [r7, #14]
		  break;
 800037a:	e013      	b.n	80003a4 <setChannel+0xd8>
		case 2:
		  MUXN = MUXN_AIN2;
 800037c:	2302      	movs	r3, #2
 800037e:	73bb      	strb	r3, [r7, #14]
		  break;
 8000380:	e010      	b.n	80003a4 <setChannel+0xd8>
		case 3:
		  MUXN = MUXN_AIN3;
 8000382:	2303      	movs	r3, #3
 8000384:	73bb      	strb	r3, [r7, #14]
		  break;
 8000386:	e00d      	b.n	80003a4 <setChannel+0xd8>
		case 4:
		  MUXN = MUXN_AIN4;
 8000388:	2304      	movs	r3, #4
 800038a:	73bb      	strb	r3, [r7, #14]
		  break;
 800038c:	e00a      	b.n	80003a4 <setChannel+0xd8>
		case 5:
		  MUXN = MUXN_AIN5;
 800038e:	2305      	movs	r3, #5
 8000390:	73bb      	strb	r3, [r7, #14]
		  break;
 8000392:	e007      	b.n	80003a4 <setChannel+0xd8>
		case 6:
		  MUXN = MUXN_AIN6;
 8000394:	2306      	movs	r3, #6
 8000396:	73bb      	strb	r3, [r7, #14]
		  break;
 8000398:	e004      	b.n	80003a4 <setChannel+0xd8>
		case 7:
		  MUXN = MUXN_AIN7;
 800039a:	2307      	movs	r3, #7
 800039c:	73bb      	strb	r3, [r7, #14]
		  break;
 800039e:	e001      	b.n	80003a4 <setChannel+0xd8>
		default:
		  MUXN = MUXN_AINCOM;
 80003a0:	2308      	movs	r3, #8
 80003a2:	73bb      	strb	r3, [r7, #14]
	}

	MUX_CHANNEL = MUXP | MUXN;
 80003a4:	7bfa      	ldrb	r2, [r7, #15]
 80003a6:	7bbb      	ldrb	r3, [r7, #14]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	737b      	strb	r3, [r7, #13]

    while(NOT_DRDY) ; 	//wait to be ready
 80003ac:	bf00      	nop
 80003ae:	2102      	movs	r1, #2
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <setChannel+0x118>)
 80003b2:	f000 ffeb 	bl	800138c <HAL_GPIO_ReadPin>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d1f8      	bne.n	80003ae <setChannel+0xe2>
    writeRegister(REG_MUX, MUX_CHANNEL);
 80003bc:	7b7b      	ldrb	r3, [r7, #13]
 80003be:	4619      	mov	r1, r3
 80003c0:	2001      	movs	r0, #1
 80003c2:	f7ff fef9 	bl	80001b8 <writeRegister>
    if (readRegister(REG_MUX) == MUX_CHANNEL){
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <readRegister>
 80003cc:	4603      	mov	r3, r0
 80003ce:	461a      	mov	r2, r3
 80003d0:	7b7b      	ldrb	r3, [r7, #13]
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d101      	bne.n	80003da <setChannel+0x10e>
    	return 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	e000      	b.n	80003dc <setChannel+0x110>
    }
    return 1;
 80003da:	2301      	movs	r3, #1

}
 80003dc:	4618      	mov	r0, r3
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40010c00 	.word	0x40010c00

080003e8 <setGain>:

void setGain(uint8_t drate, uint8_t gain) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	460a      	mov	r2, r1
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	4613      	mov	r3, r2
 80003f6:	71bb      	strb	r3, [r7, #6]
	sendCommand(CMD_SDATAC);  // send out SDATAC command to stop continuous reading mode.
 80003f8:	200f      	movs	r0, #15
 80003fa:	f7ff fecb 	bl	8000194 <sendCommand>

	writeRegister(REG_DRATE, drate);  // write data rate register
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	4619      	mov	r1, r3
 8000402:	2003      	movs	r0, #3
 8000404:	f7ff fed8 	bl	80001b8 <writeRegister>
	while(NOT_DRDY) ;	//wait to complete
 8000408:	bf00      	nop
 800040a:	2102      	movs	r1, #2
 800040c:	4813      	ldr	r0, [pc, #76]	; (800045c <setGain+0x74>)
 800040e:	f000 ffbd 	bl	800138c <HAL_GPIO_ReadPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d1f8      	bne.n	800040a <setGain+0x22>


	writeRegister(REG_ADCON, 0x07 & gain);
 8000418:	79bb      	ldrb	r3, [r7, #6]
 800041a:	f003 0307 	and.w	r3, r3, #7
 800041e:	b2db      	uxtb	r3, r3
 8000420:	4619      	mov	r1, r3
 8000422:	2002      	movs	r0, #2
 8000424:	f7ff fec8 	bl	80001b8 <writeRegister>
	while(NOT_DRDY) ;	//wait to complete
 8000428:	bf00      	nop
 800042a:	2102      	movs	r1, #2
 800042c:	480b      	ldr	r0, [pc, #44]	; (800045c <setGain+0x74>)
 800042e:	f000 ffad 	bl	800138c <HAL_GPIO_ReadPin>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d1f8      	bne.n	800042a <setGain+0x42>

    sendCommand(CMD_SELFCAL); //start Offset and Gain Self-Calibration
 8000438:	20f0      	movs	r0, #240	; 0xf0
 800043a:	f7ff feab 	bl	8000194 <sendCommand>
    //can last up to 2 seconds for low data rates
    while(NOT_DRDY) ;	//wait to complete
 800043e:	bf00      	nop
 8000440:	2102      	movs	r1, #2
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <setGain+0x74>)
 8000444:	f000 ffa2 	bl	800138c <HAL_GPIO_ReadPin>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d1f8      	bne.n	8000440 <setGain+0x58>

    sendCommand(CMD_RDATAC);
 800044e:	2003      	movs	r0, #3
 8000450:	f7ff fea0 	bl	8000194 <sendCommand>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40010c00 	.word	0x40010c00

08000460 <concatenateToInt32>:

int32_t concatenateToInt32(uint8_t *adcData){
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	uint8_t highbyte = *adcData;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	72fb      	strb	r3, [r7, #11]
	uint8_t midbyte = *(adcData + 1);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	785b      	ldrb	r3, [r3, #1]
 8000472:	72bb      	strb	r3, [r7, #10]
	uint8_t lowbyte = *(adcData + 2);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	789b      	ldrb	r3, [r3, #2]
 8000478:	727b      	strb	r3, [r7, #9]

    // Concatenate the bytes in the correct order to form a single integer value
    int adcValue = ((int32_t)highbyte << 16) + ((int32_t)midbyte << 8) + (int32_t)lowbyte;
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	041a      	lsls	r2, r3, #16
 800047e:	7abb      	ldrb	r3, [r7, #10]
 8000480:	021b      	lsls	r3, r3, #8
 8000482:	441a      	add	r2, r3
 8000484:	7a7b      	ldrb	r3, [r7, #9]
 8000486:	4413      	add	r3, r2
 8000488:	60fb      	str	r3, [r7, #12]
    if (adcValue & 0x00800000) {	//transfer sign bit from pos. 23 to pos. 31
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000490:	2b00      	cmp	r3, #0
 8000492:	d003      	beq.n	800049c <concatenateToInt32+0x3c>
    	adcValue |= 0xff000000;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800049a:	60fb      	str	r3, [r7, #12]
    }
    return adcValue;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <startSampling>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_IWDG_Init(void);


static uint8_t startSampling(void){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	//configure single ended: AIN0 referred to AINCOM
	// test if communication to ADC works (read by register)
	if (setChannel(0,-1)){	//if not succeeded
 80004ac:	f04f 31ff 	mov.w	r1, #4294967295
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ff0b 	bl	80002cc <setChannel>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <startSampling+0x18>
		return 1;
 80004bc:	2301      	movs	r3, #1
 80004be:	e019      	b.n	80004f4 <startSampling+0x4c>
	}
	setGain(SPS_2000, PGA1);	//continuous conversation starts here
 80004c0:	2100      	movs	r1, #0
 80004c2:	20b0      	movs	r0, #176	; 0xb0
 80004c4:	f7ff ff90 	bl	80003e8 <setGain>

	adcDataArray.length = ADCBUFLEN;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <startSampling+0x50>)
 80004ca:	22fe      	movs	r2, #254	; 0xfe
 80004cc:	801a      	strh	r2, [r3, #0]
	adcDataArray.sps = 2000;
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <startSampling+0x50>)
 80004d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80004d4:	805a      	strh	r2, [r3, #2]
	adcDataArray.INP = 0;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <startSampling+0x50>)
 80004d8:	2200      	movs	r2, #0
 80004da:	711a      	strb	r2, [r3, #4]
	adcDataArray.INM = -1;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <startSampling+0x50>)
 80004de:	22ff      	movs	r2, #255	; 0xff
 80004e0:	715a      	strb	r2, [r3, #5]

	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 7);
 80004e2:	2207      	movs	r2, #7
 80004e4:	2105      	movs	r1, #5
 80004e6:	2006      	movs	r0, #6
 80004e8:	f000 fd87 	bl	8000ffa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn); //enable DRDY interrupt
 80004ec:	2006      	movs	r0, #6
 80004ee:	f000 fda0 	bl	8001032 <HAL_NVIC_EnableIRQ>
	return 0; //for success
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000270 	.word	0x20000270

080004fc <keepBlueLEDFlashing>:


static void keepBlueLEDFlashing(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	// produce a non-blocking 1s OFF and 50ms ON timer (heartbeat signal green LED)
	static bool initialized = false;
	static uint32_t tick_s, tick_r;

	if (!initialized) {
 8000500:	4b26      	ldr	r3, [pc, #152]	; (800059c <keepBlueLEDFlashing+0xa0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	f083 0301 	eor.w	r3, r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00c      	beq.n	8000528 <keepBlueLEDFlashing+0x2c>
		tick_s = HAL_GetTick();
 800050e:	f000 fc4b 	bl	8000da8 <HAL_GetTick>
 8000512:	4603      	mov	r3, r0
 8000514:	4a22      	ldr	r2, [pc, #136]	; (80005a0 <keepBlueLEDFlashing+0xa4>)
 8000516:	6013      	str	r3, [r2, #0]
		tick_r = HAL_GetTick();
 8000518:	f000 fc46 	bl	8000da8 <HAL_GetTick>
 800051c:	4603      	mov	r3, r0
 800051e:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <keepBlueLEDFlashing+0xa8>)
 8000520:	6013      	str	r3, [r2, #0]
		initialized = true;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <keepBlueLEDFlashing+0xa0>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
	}


	if (HAL_GetTick() - tick_s == 1000  &&  !get_BLED()){
 8000528:	f000 fc3e 	bl	8000da8 <HAL_GetTick>
 800052c:	4602      	mov	r2, r0
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <keepBlueLEDFlashing+0xa4>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000538:	d112      	bne.n	8000560 <keepBlueLEDFlashing+0x64>
 800053a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053e:	481a      	ldr	r0, [pc, #104]	; (80005a8 <keepBlueLEDFlashing+0xac>)
 8000540:	f000 fa04 	bl	800094c <HAL_GPIO_GetOutputPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d00a      	beq.n	8000560 <keepBlueLEDFlashing+0x64>
		//TODO: tick_s may overflow in 49 days
		tick_r = HAL_GetTick();	//start reset timer
 800054a:	f000 fc2d 	bl	8000da8 <HAL_GetTick>
 800054e:	4603      	mov	r3, r0
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <keepBlueLEDFlashing+0xa8>)
 8000552:	6013      	str	r3, [r2, #0]
		BLED(1)
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055a:	4813      	ldr	r0, [pc, #76]	; (80005a8 <keepBlueLEDFlashing+0xac>)
 800055c:	f000 ff2d 	bl	80013ba <HAL_GPIO_WritePin>
	}
	if (HAL_GetTick() - tick_r == 50 && get_BLED()){
 8000560:	f000 fc22 	bl	8000da8 <HAL_GetTick>
 8000564:	4602      	mov	r2, r0
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <keepBlueLEDFlashing+0xa8>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	2b32      	cmp	r3, #50	; 0x32
 800056e:	d112      	bne.n	8000596 <keepBlueLEDFlashing+0x9a>
 8000570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <keepBlueLEDFlashing+0xac>)
 8000576:	f000 f9e9 	bl	800094c <HAL_GPIO_GetOutputPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d10a      	bne.n	8000596 <keepBlueLEDFlashing+0x9a>
		tick_s = HAL_GetTick(); //start set timer
 8000580:	f000 fc12 	bl	8000da8 <HAL_GetTick>
 8000584:	4603      	mov	r3, r0
 8000586:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <keepBlueLEDFlashing+0xa4>)
 8000588:	6013      	str	r3, [r2, #0]
		BLED(0)
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <keepBlueLEDFlashing+0xac>)
 8000592:	f000 ff12 	bl	80013ba <HAL_GPIO_WritePin>
	}

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000025c 	.word	0x2000025c
 80005a0:	20000260 	.word	0x20000260
 80005a4:	20000264 	.word	0x20000264
 80005a8:	40010c00 	.word	0x40010c00

080005ac <main>:


//-----------------------------------------------------------------------------
int main(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	static USBD_StatusTypeDef usb_status=USBD_FAIL;	//initialize with NOK at beginning
	static uint32_t tick_1s;

	HAL_Init();
 80005b2:	f000 fba1 	bl	8000cf8 <HAL_Init>
	SystemClock_Config();
 80005b6:	f000 f898 	bl	80006ea <SystemClock_Config>

	MX_GPIO_Init();
 80005ba:	f000 f943 	bl	8000844 <MX_GPIO_Init>
	BLED(1) 	// signaling the start of the INIT
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	483a      	ldr	r0, [pc, #232]	; (80006b0 <main+0x104>)
 80005c6:	f000 fef8 	bl	80013ba <HAL_GPIO_WritePin>

	MX_IWDG_Init();
 80005ca:	f000 f8eb 	bl	80007a4 <MX_IWDG_Init>
	MX_USB_DEVICE_Init();
 80005ce:	f007 fe3f 	bl	8008250 <MX_USB_DEVICE_Init>


	MX_SPI1_Init();
 80005d2:	f000 f901 	bl	80007d8 <MX_SPI1_Init>
	uint8_t status;
	status = setupADS1256();	//should be 0x30 for this particular piece of AD1256 (ID)
 80005d6:	f7ff fe0f 	bl	80001f8 <setupADS1256>
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]

	BLED(0)	//end INIT
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e4:	4832      	ldr	r0, [pc, #200]	; (80006b0 <main+0x104>)
 80005e6:	f000 fee8 	bl	80013ba <HAL_GPIO_WritePin>

	tick_1s = HAL_GetTick();	//start 1s timer
 80005ea:	f000 fbdd 	bl	8000da8 <HAL_GetTick>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a30      	ldr	r2, [pc, #192]	; (80006b4 <main+0x108>)
 80005f2:	6013      	str	r3, [r2, #0]

	while (1){


		if (usb_status ==  USBD_OK){
 80005f4:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <main+0x10c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d124      	bne.n	8000646 <main+0x9a>
			if (!is_REC_ON()) {
 80005fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000600:	482b      	ldr	r0, [pc, #172]	; (80006b0 <main+0x104>)
 8000602:	f000 f9a3 	bl	800094c <HAL_GPIO_GetOutputPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10a      	bne.n	8000622 <main+0x76>
				if (startSampling() == 0){	//if succeeded starting
 800060c:	f7ff ff4c 	bl	80004a8 <startSampling>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d105      	bne.n	8000622 <main+0x76>
					REC_ON()
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	4824      	ldr	r0, [pc, #144]	; (80006b0 <main+0x104>)
 800061e:	f000 fecc 	bl	80013ba <HAL_GPIO_WritePin>
				}
			}
			if (flagBufferFull){  //ADC receive ring buffer full
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <main+0x110>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00a      	beq.n	8000640 <main+0x94>
				flagBufferFull = 0;
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <main+0x110>)
 800062c:	2200      	movs	r2, #0
 800062e:	801a      	strh	r2, [r3, #0]
				transmitArrayOverUSB(&adcDataArray);
 8000630:	4823      	ldr	r0, [pc, #140]	; (80006c0 <main+0x114>)
 8000632:	f000 f849 	bl	80006c8 <transmitArrayOverUSB>
				toggle_GLED()
 8000636:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063a:	481d      	ldr	r0, [pc, #116]	; (80006b0 <main+0x104>)
 800063c:	f000 fed5 	bl	80013ea <HAL_GPIO_TogglePin>
			}
			keepBlueLEDFlashing();
 8000640:	f7ff ff5c 	bl	80004fc <keepBlueLEDFlashing>
 8000644:	e030      	b.n	80006a8 <main+0xfc>
		}
		else { //if USB status not OK
			if (!is_REC_ON()) {	//and if it was not connected before
 8000646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064a:	4819      	ldr	r0, [pc, #100]	; (80006b0 <main+0x104>)
 800064c:	f000 f97e 	bl	800094c <HAL_GPIO_GetOutputPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d117      	bne.n	8000686 <main+0xda>
				if (HAL_GetTick() - tick_1s > 1000){ //check if 1s ellapsed
 8000656:	f000 fba7 	bl	8000da8 <HAL_GetTick>
 800065a:	4602      	mov	r2, r0
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <main+0x108>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000666:	d919      	bls.n	800069c <main+0xf0>
					usb_status = CDC_Transmit_FS(&status, 1);	//transmit msg
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f007 feb1 	bl	80083d4 <CDC_Transmit_FS>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <main+0x10c>)
 8000678:	701a      	strb	r2, [r3, #0]
					tick_1s = HAL_GetTick();	//update timer with present value of time
 800067a:	f000 fb95 	bl	8000da8 <HAL_GetTick>
 800067e:	4603      	mov	r3, r0
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <main+0x108>)
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	e00a      	b.n	800069c <main+0xf0>
				}
			}
			else {	//but it was recording and lost somehow USB connection
				REC_OFF()
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	4808      	ldr	r0, [pc, #32]	; (80006b0 <main+0x104>)
 800068e:	f000 fe94 	bl	80013ba <HAL_GPIO_WritePin>
				HAL_NVIC_DisableIRQ(EXTI0_IRQn); //disable DRDY interrupt
 8000692:	2006      	movs	r0, #6
 8000694:	f000 fcdb 	bl	800104e <HAL_NVIC_DisableIRQ>
				stopSampling();
 8000698:	f7ff fdfe 	bl	8000298 <stopSampling>
			}
			BLED(0)
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <main+0x104>)
 80006a4:	f000 fe89 	bl	80013ba <HAL_GPIO_WritePin>
		}

		HAL_IWDG_Refresh(&hiwdg);
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <main+0x118>)
 80006aa:	f000 ff11 	bl	80014d0 <HAL_IWDG_Refresh>
		if (usb_status ==  USBD_OK){
 80006ae:	e7a1      	b.n	80005f4 <main+0x48>
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	20000268 	.word	0x20000268
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000674 	.word	0x20000674
 80006c0:	20000270 	.word	0x20000270
 80006c4:	200001f8 	.word	0x200001f8

080006c8 <transmitArrayOverUSB>:




// Function to transmit variable length int32_t array over USB CDC
void transmitArrayOverUSB(AdcDataArrayStruct *arr){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    int8_t INM;
    int32_t data[ADCBUFLEN];
} AdcDataArrayStruct;*/

    // Calculate the total size of the data to be sent
    size_t totalSize = sizeof(AdcDataArrayStruct);
 80006d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d4:	60fb      	str	r3, [r7, #12]

    // Transmit the data over USB CDC
    CDC_Transmit_FS((uint8_t *)arr, totalSize);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f007 fe79 	bl	80083d4 <CDC_Transmit_FS>
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b094      	sub	sp, #80	; 0x50
 80006ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f4:	2228      	movs	r2, #40	; 0x28
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f008 fb90 	bl	8008e1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800071a:	2309      	movs	r3, #9
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800073a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fc41 	bl	8002fcc <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000750:	f000 f912 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000764:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2102      	movs	r1, #2
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fead 	bl	80034d0 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077c:	f000 f8fc 	bl	8000978 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000780:	2310      	movs	r3, #16
 8000782:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fffc 	bl	8003788 <HAL_RCCEx_PeriphCLKConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000796:	f000 f8ef 	bl	8000978 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_IWDG_Init+0x2c>)
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <MX_IWDG_Init+0x30>)
 80007ac:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_IWDG_Init+0x2c>)
 80007b0:	2203      	movs	r2, #3
 80007b2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_IWDG_Init+0x2c>)
 80007b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80007ba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_IWDG_Init+0x2c>)
 80007be:	f000 fe45 	bl	800144c <HAL_IWDG_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80007c8:	f000 f8d6 	bl	8000978 <Error_Handler>
  }

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200001f8 	.word	0x200001f8
 80007d4:	40003000 	.word	0x40003000

080007d8 <MX_SPI1_Init>:
/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

	hspi1.Instance = SPI1;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_SPI1_Init+0x64>)
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <MX_SPI1_Init+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_SPI1_Init+0x64>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_SPI1_Init+0x64>)
 80007fe:	2201      	movs	r2, #1
 8000800:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_SPI1_Init+0x64>)
 8000804:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000808:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_SPI1_Init+0x64>)
 800080c:	2228      	movs	r2, #40	; 0x28
 800080e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_SPI1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_SPI1_Init+0x64>)
 8000824:	220a      	movs	r2, #10
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK){
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_SPI1_Init+0x64>)
 800082a:	f003 f863 	bl	80038f4 <HAL_SPI_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000834:	f000 f8a0 	bl	8000978 <Error_Handler>
	}

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000204 	.word	0x20000204
 8000840:	40013000 	.word	0x40013000

08000844 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b38      	ldr	r3, [pc, #224]	; (800093c <MX_GPIO_Init+0xf8>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a37      	ldr	r2, [pc, #220]	; (800093c <MX_GPIO_Init+0xf8>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b35      	ldr	r3, [pc, #212]	; (800093c <MX_GPIO_Init+0xf8>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b32      	ldr	r3, [pc, #200]	; (800093c <MX_GPIO_Init+0xf8>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a31      	ldr	r2, [pc, #196]	; (800093c <MX_GPIO_Init+0xf8>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b2f      	ldr	r3, [pc, #188]	; (800093c <MX_GPIO_Init+0xf8>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <MX_GPIO_Init+0xf8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a2b      	ldr	r2, [pc, #172]	; (800093c <MX_GPIO_Init+0xf8>)
 800088e:	f043 0308 	orr.w	r3, r3, #8
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <MX_GPIO_Init+0xf8>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0308 	and.w	r3, r3, #8
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]



   /*Configure GPIOA pin 4 NSS (chip select) */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008a0:	2310      	movs	r3, #16
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a4:	2312      	movs	r3, #18
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	4822      	ldr	r0, [pc, #136]	; (8000940 <MX_GPIO_Init+0xfc>)
 80008b8:	f000 fbe4 	bl	8001084 <HAL_GPIO_Init>

    /*Configure GPIOA pin 6 MISO */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	481b      	ldr	r0, [pc, #108]	; (8000940 <MX_GPIO_Init+0xfc>)
 80008d4:	f000 fbd6 	bl	8001084 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_EXTI0_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0;				//INT0: DRDY
 80008d8:	2301      	movs	r3, #1
 80008da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_GPIO_Init+0x100>)
 80008de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	4817      	ldr	r0, [pc, #92]	; (8000948 <MX_GPIO_Init+0x104>)
 80008ec:	f000 fbca 	bl	8001084 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); //B12 blue LED (1: off, 0: on)
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f6:	4814      	ldr	r0, [pc, #80]	; (8000948 <MX_GPIO_Init+0x104>)
 80008f8:	f000 fd5f 	bl	80013ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //B13 red LED
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000902:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_GPIO_Init+0x104>)
 8000904:	f000 fd59 	bl	80013ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); //B15 green LED
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_GPIO_Init+0x104>)
 8000910:	f000 fd53 	bl	80013ba <HAL_GPIO_WritePin>
	/*Configure GPIO pins : PB13 and PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8000914:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000918:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2302      	movs	r3, #2
 8000924:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_GPIO_Init+0x104>)
 800092e:	f000 fba9 	bl	8001084 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	40010800 	.word	0x40010800
 8000944:	10210000 	.word	0x10210000
 8000948:	40010c00 	.word	0x40010c00

0800094c <HAL_GPIO_GetOutputPin>:

GPIO_PinState HAL_GPIO_GetOutputPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  uint32_t odr = GPIOx->ODR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60fb      	str	r3, [r7, #12]

  return (GPIO_PinState)((odr & GPIO_Pin) != 0);
 800095e:	887a      	ldrh	r2, [r7, #2]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4013      	ands	r3, r2
 8000964:	2b00      	cmp	r3, #0
 8000966:	bf14      	ite	ne
 8000968:	2301      	movne	r3, #1
 800096a:	2300      	moveq	r3, #0
 800096c:	b2db      	uxtb	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_MspInit+0x5c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <HAL_MspInit+0x5c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_MspInit+0x5c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x5c>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_MspInit+0x5c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x5c>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_MspInit+0x60>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_MspInit+0x60>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010000 	.word	0x40010000

080009e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <HAL_SPI_MspInit+0x88>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d12f      	bne.n	8000a68 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_SPI_MspInit+0x8c>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_SPI_MspInit+0x8c>)
 8000a0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_SPI_MspInit+0x8c>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_SPI_MspInit+0x8c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <HAL_SPI_MspInit+0x8c>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_SPI_MspInit+0x8c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000a38:	23b0      	movs	r3, #176	; 0xb0
 8000a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_SPI_MspInit+0x90>)
 8000a4c:	f000 fb1a 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a50:	2340      	movs	r3, #64	; 0x40
 8000a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_SPI_MspInit+0x90>)
 8000a64:	f000 fb0e 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40013000 	.word	0x40013000
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800

08000a7c <EXTI0_IRQHandler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void EXTI0_IRQHandler(void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 fccb 	bl	800141c <HAL_GPIO_EXTI_IRQHandler>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_GPIO_EXTI_Callback>:

 /* DATA READY INTTERUPT FROM ADS1256 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
	//static int32_t testSignal;
	//will be called on a falling edge of DRDY
	if (GPIO_Pin == GPIO_PIN_0){
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d120      	bne.n	8000ade <HAL_GPIO_EXTI_Callback+0x52>
		HAL_SPI_Receive(&hspi1, adcData, 3, HAL_MAX_DELAY); // Receive 3 bytes of data
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	4911      	ldr	r1, [pc, #68]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000aa4:	4811      	ldr	r0, [pc, #68]	; (8000aec <HAL_GPIO_EXTI_Callback+0x60>)
 8000aa6:	f003 f8ec 	bl	8003c82 <HAL_SPI_Receive>

		//store in a ring buffer
		adcDataArray.data[idx] = concatenateToInt32(adcData);
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000aac:	681c      	ldr	r4, [r3, #0]
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ab0:	f7ff fcd6 	bl	8000460 <concatenateToInt32>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	490f      	ldr	r1, [pc, #60]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ab8:	1ca3      	adds	r3, r4, #2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//adcDataArray.data[idx] = testSignal;
		//testSignal--;

		idx++;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ac6:	6013      	str	r3, [r2, #0]
		if(idx >= ADCBUFLEN){
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2bfd      	cmp	r3, #253	; 0xfd
 8000ace:	d906      	bls.n	8000ade <HAL_GPIO_EXTI_Callback+0x52>
			idx=0;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
			flagBufferFull = adcDataArray.length;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ad8:	881a      	ldrh	r2, [r3, #0]
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000adc:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000026c 	.word	0x2000026c
 8000aec:	20000204 	.word	0x20000204
 8000af0:	20000670 	.word	0x20000670
 8000af4:	20000270 	.word	0x20000270
 8000af8:	20000674 	.word	0x20000674

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b42:	f000 f91f 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b52:	f000 fdf1 	bl	8001738 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20001348 	.word	0x20001348

08000b60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e00a      	b.n	8000b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b72:	f3af 8000 	nop.w
 8000b76:	4601      	mov	r1, r0
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	b2ca      	uxtb	r2, r1
 8000b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf0      	blt.n	8000b72 <_read+0x12>
  }

  return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e009      	b.n	8000bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf1      	blt.n	8000bac <_write+0x12>
  }
  return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_close>:

int _close(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <_isatty>:

int _isatty(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
	...

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d207      	bcs.n	8000c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c64:	f008 f92a 	bl	8008ebc <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20005000 	.word	0x20005000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	20000678 	.word	0x20000678
 8000c9c:	200019a8 	.word	0x200019a8

08000ca0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cac:	f7ff fff8 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cb2:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cc8:	4c09      	ldr	r4, [pc, #36]	; (8000cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f008 f8f7 	bl	8008ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cda:	f7ff fc67 	bl	80005ac <main>
  bx lr
 8000cde:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000ce8:	08009bd0 	.word	0x08009bd0
  ldr r2, =_sbss
 8000cec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000cf0:	200019a4 	.word	0x200019a4

08000cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_2_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_Init+0x28>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_Init+0x28>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f96b 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f000 f808 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fe36 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40022000 	.word	0x40022000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f991 	bl	800106a <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 f94b 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000008 	.word	0x20000008

08000d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x1c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x20>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <HAL_IncTick+0x20>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	2000067c 	.word	0x2000067c

08000da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <HAL_GetTick+0x10>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	2000067c 	.word	0x2000067c

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff fff0 	bl	8000da8 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffe0 	bl	8000da8 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000000c 	.word	0x2000000c

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4906      	ldr	r1, [pc, #24]	; (8000e9c <__NVIC_EnableIRQ+0x34>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db12      	blt.n	8000ed8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	490a      	ldr	r1, [pc, #40]	; (8000ee4 <__NVIC_DisableIRQ+0x44>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	3320      	adds	r3, #32
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ecc:	f3bf 8f4f 	dsb	sy
}
 8000ed0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ed2:	f3bf 8f6f 	isb	sy
}
 8000ed6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff90 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff09 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff1e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff90 	bl	8000f3c <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5f 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff11 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff1f 	bl	8000ea0 <__NVIC_DisableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff94 	bl	8000fa0 <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b08b      	sub	sp, #44	; 0x2c
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001096:	e169      	b.n	800136c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001098:	2201      	movs	r2, #1
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8158 	bne.w	8001366 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	4a9a      	ldr	r2, [pc, #616]	; (8001324 <HAL_GPIO_Init+0x2a0>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d05e      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010c0:	4a98      	ldr	r2, [pc, #608]	; (8001324 <HAL_GPIO_Init+0x2a0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d875      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010c6:	4a98      	ldr	r2, [pc, #608]	; (8001328 <HAL_GPIO_Init+0x2a4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d058      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010cc:	4a96      	ldr	r2, [pc, #600]	; (8001328 <HAL_GPIO_Init+0x2a4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d86f      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010d2:	4a96      	ldr	r2, [pc, #600]	; (800132c <HAL_GPIO_Init+0x2a8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d052      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010d8:	4a94      	ldr	r2, [pc, #592]	; (800132c <HAL_GPIO_Init+0x2a8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d869      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010de:	4a94      	ldr	r2, [pc, #592]	; (8001330 <HAL_GPIO_Init+0x2ac>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d04c      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010e4:	4a92      	ldr	r2, [pc, #584]	; (8001330 <HAL_GPIO_Init+0x2ac>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d863      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010ea:	4a92      	ldr	r2, [pc, #584]	; (8001334 <HAL_GPIO_Init+0x2b0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d046      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010f0:	4a90      	ldr	r2, [pc, #576]	; (8001334 <HAL_GPIO_Init+0x2b0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d85d      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010f6:	2b12      	cmp	r3, #18
 80010f8:	d82a      	bhi.n	8001150 <HAL_GPIO_Init+0xcc>
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d859      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010fe:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <HAL_GPIO_Init+0x80>)
 8001100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001104:	0800117f 	.word	0x0800117f
 8001108:	08001159 	.word	0x08001159
 800110c:	0800116b 	.word	0x0800116b
 8001110:	080011ad 	.word	0x080011ad
 8001114:	080011b3 	.word	0x080011b3
 8001118:	080011b3 	.word	0x080011b3
 800111c:	080011b3 	.word	0x080011b3
 8001120:	080011b3 	.word	0x080011b3
 8001124:	080011b3 	.word	0x080011b3
 8001128:	080011b3 	.word	0x080011b3
 800112c:	080011b3 	.word	0x080011b3
 8001130:	080011b3 	.word	0x080011b3
 8001134:	080011b3 	.word	0x080011b3
 8001138:	080011b3 	.word	0x080011b3
 800113c:	080011b3 	.word	0x080011b3
 8001140:	080011b3 	.word	0x080011b3
 8001144:	080011b3 	.word	0x080011b3
 8001148:	08001161 	.word	0x08001161
 800114c:	08001175 	.word	0x08001175
 8001150:	4a79      	ldr	r2, [pc, #484]	; (8001338 <HAL_GPIO_Init+0x2b4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001156:	e02c      	b.n	80011b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e029      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	3304      	adds	r3, #4
 8001166:	623b      	str	r3, [r7, #32]
          break;
 8001168:	e024      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	3308      	adds	r3, #8
 8001170:	623b      	str	r3, [r7, #32]
          break;
 8001172:	e01f      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	330c      	adds	r3, #12
 800117a:	623b      	str	r3, [r7, #32]
          break;
 800117c:	e01a      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001186:	2304      	movs	r3, #4
 8001188:	623b      	str	r3, [r7, #32]
          break;
 800118a:	e013      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d105      	bne.n	80011a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001194:	2308      	movs	r3, #8
 8001196:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	611a      	str	r2, [r3, #16]
          break;
 800119e:	e009      	b.n	80011b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a0:	2308      	movs	r3, #8
 80011a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	615a      	str	r2, [r3, #20]
          break;
 80011aa:	e003      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
          break;
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          break;
 80011b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2bff      	cmp	r3, #255	; 0xff
 80011b8:	d801      	bhi.n	80011be <HAL_GPIO_Init+0x13a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	e001      	b.n	80011c2 <HAL_GPIO_Init+0x13e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3304      	adds	r3, #4
 80011c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2bff      	cmp	r3, #255	; 0xff
 80011c8:	d802      	bhi.n	80011d0 <HAL_GPIO_Init+0x14c>
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	e002      	b.n	80011d6 <HAL_GPIO_Init+0x152>
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	3b08      	subs	r3, #8
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	210f      	movs	r1, #15
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	6a39      	ldr	r1, [r7, #32]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	431a      	orrs	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 80b1 	beq.w	8001366 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001204:	4b4d      	ldr	r3, [pc, #308]	; (800133c <HAL_GPIO_Init+0x2b8>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a4c      	ldr	r2, [pc, #304]	; (800133c <HAL_GPIO_Init+0x2b8>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_GPIO_Init+0x2b8>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800121c:	4a48      	ldr	r2, [pc, #288]	; (8001340 <HAL_GPIO_Init+0x2bc>)
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4013      	ands	r3, r2
 800123e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a40      	ldr	r2, [pc, #256]	; (8001344 <HAL_GPIO_Init+0x2c0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <HAL_GPIO_Init+0x1ec>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <HAL_GPIO_Init+0x2c4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d00d      	beq.n	800126c <HAL_GPIO_Init+0x1e8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3e      	ldr	r2, [pc, #248]	; (800134c <HAL_GPIO_Init+0x2c8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0x1e4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3d      	ldr	r2, [pc, #244]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d101      	bne.n	8001264 <HAL_GPIO_Init+0x1e0>
 8001260:	2303      	movs	r3, #3
 8001262:	e006      	b.n	8001272 <HAL_GPIO_Init+0x1ee>
 8001264:	2304      	movs	r3, #4
 8001266:	e004      	b.n	8001272 <HAL_GPIO_Init+0x1ee>
 8001268:	2302      	movs	r3, #2
 800126a:	e002      	b.n	8001272 <HAL_GPIO_Init+0x1ee>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <HAL_GPIO_Init+0x1ee>
 8001270:	2300      	movs	r3, #0
 8001272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001274:	f002 0203 	and.w	r2, r2, #3
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	4093      	lsls	r3, r2
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001282:	492f      	ldr	r1, [pc, #188]	; (8001340 <HAL_GPIO_Init+0x2bc>)
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	492c      	ldr	r1, [pc, #176]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4928      	ldr	r1, [pc, #160]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	4922      	ldr	r1, [pc, #136]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	491e      	ldr	r1, [pc, #120]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4918      	ldr	r1, [pc, #96]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	43db      	mvns	r3, r3
 8001302:	4914      	ldr	r1, [pc, #80]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 8001304:	4013      	ands	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d021      	beq.n	8001358 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	490e      	ldr	r1, [pc, #56]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e021      	b.n	8001366 <HAL_GPIO_Init+0x2e2>
 8001322:	bf00      	nop
 8001324:	10320000 	.word	0x10320000
 8001328:	10310000 	.word	0x10310000
 800132c:	10220000 	.word	0x10220000
 8001330:	10210000 	.word	0x10210000
 8001334:	10120000 	.word	0x10120000
 8001338:	10110000 	.word	0x10110000
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00
 800134c:	40011000 	.word	0x40011000
 8001350:	40011400 	.word	0x40011400
 8001354:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_GPIO_Init+0x304>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	43db      	mvns	r3, r3
 8001360:	4909      	ldr	r1, [pc, #36]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001362:	4013      	ands	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	3301      	adds	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	fa22 f303 	lsr.w	r3, r2, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	f47f ae8e 	bne.w	8001098 <HAL_GPIO_Init+0x14>
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	372c      	adds	r7, #44	; 0x2c
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	807b      	strh	r3, [r7, #2]
 80013c6:	4613      	mov	r3, r2
 80013c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ca:	787b      	ldrb	r3, [r7, #1]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d0:	887a      	ldrh	r2, [r7, #2]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013d6:	e003      	b.n	80013e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	041a      	lsls	r2, r3, #16
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	611a      	str	r2, [r3, #16]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fc:	887a      	ldrh	r2, [r7, #2]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	041a      	lsls	r2, r3, #16
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43d9      	mvns	r1, r3
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	400b      	ands	r3, r1
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fb26 	bl	8000a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e034      	b.n	80014c8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001466:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f245 5255 	movw	r2, #21845	; 0x5555
 8001470:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6852      	ldr	r2, [r2, #4]
 800147a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6892      	ldr	r2, [r2, #8]
 8001484:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001486:	f7ff fc8f 	bl	8000da8 <HAL_GetTick>
 800148a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800148c:	e00f      	b.n	80014ae <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800148e:	f7ff fc8b 	bl	8000da8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b27      	cmp	r3, #39	; 0x27
 800149a:	d908      	bls.n	80014ae <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e00c      	b.n	80014c8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1e8      	bne.n	800148e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80014c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80014e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f0:	b08b      	sub	sp, #44	; 0x2c
 80014f2:	af06      	add	r7, sp, #24
 80014f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0f1      	b.n	80016e4 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d106      	bne.n	800151a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f007 f891 	bl	800863c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f002 ff92 	bl	8004450 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	687e      	ldr	r6, [r7, #4]
 8001534:	466d      	mov	r5, sp
 8001536:	f106 0410 	add.w	r4, r6, #16
 800153a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	602b      	str	r3, [r5, #0]
 8001542:	1d33      	adds	r3, r6, #4
 8001544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001546:	6838      	ldr	r0, [r7, #0]
 8001548:	f002 ff5c 	bl	8004404 <USB_CoreInit>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2202      	movs	r2, #2
 8001556:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0c2      	b.n	80016e4 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f002 ff8d 	bl	8004484 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e040      	b.n	80015f2 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	3301      	adds	r3, #1
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	3303      	adds	r3, #3
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3338      	adds	r3, #56	; 0x38
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	333c      	adds	r3, #60	; 0x3c
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	3340      	adds	r3, #64	; 0x40
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	3301      	adds	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d3b9      	bcc.n	8001570 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e044      	b.n	800168c <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	440b      	add	r3, r1
 8001626:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	3301      	adds	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	d3b5      	bcc.n	8001602 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	687e      	ldr	r6, [r7, #4]
 800169e:	466d      	mov	r5, sp
 80016a0:	f106 0410 	add.w	r4, r6, #16
 80016a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	602b      	str	r3, [r5, #0]
 80016ac:	1d33      	adds	r3, r6, #4
 80016ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f002 fef3 	bl	800449c <USB_DevInit>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2202      	movs	r2, #2
 80016c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e00d      	b.n	80016e4 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 f974 	bl	80069ca <USB_DevDisconnect>

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_PCD_Start+0x16>
 80016fe:	2302      	movs	r3, #2
 8001700:	e016      	b.n	8001730 <HAL_PCD_Start+0x44>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fe88 	bl	8004424 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001714:	2101      	movs	r1, #1
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f007 fa2b 	bl	8008b72 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f005 f948 	bl	80069b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f005 f94a 	bl	80069de <USB_ReadInterrupts>
 800174a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fb1b 	bl	8001d92 <PCD_EP_ISR_Handler>

    return;
 800175c:	e119      	b.n	8001992 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d013      	beq.n	8001790 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001770:	b29a      	uxth	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800177a:	b292      	uxth	r2, r2
 800177c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f006 fffe 	bl	8008782 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001786:	2100      	movs	r1, #0
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f905 	bl	8001998 <HAL_PCD_SetAddress>

    return;
 800178e:	e100      	b.n	8001992 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00c      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017ac:	b292      	uxth	r2, r2
 80017ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017b2:	e0ee      	b.n	8001992 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00c      	beq.n	80017d8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017d0:	b292      	uxth	r2, r2
 80017d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017d6:	e0dc      	b.n	8001992 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d027      	beq.n	8001832 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0204 	bic.w	r2, r2, #4
 80017f4:	b292      	uxth	r2, r2
 80017f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0208 	bic.w	r2, r2, #8
 800180c:	b292      	uxth	r2, r2
 800180e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f006 ffee 	bl	80087f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800182a:	b292      	uxth	r2, r2
 800182c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001830:	e0af      	b.n	8001992 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8083 	beq.w	8001944 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	77fb      	strb	r3, [r7, #31]
 8001842:	e010      	b.n	8001866 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	7ffb      	ldrb	r3, [r7, #31]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	441a      	add	r2, r3
 8001850:	7ffb      	ldrb	r3, [r7, #31]
 8001852:	8812      	ldrh	r2, [r2, #0]
 8001854:	b292      	uxth	r2, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	3320      	adds	r3, #32
 800185a:	443b      	add	r3, r7
 800185c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001860:	7ffb      	ldrb	r3, [r7, #31]
 8001862:	3301      	adds	r3, #1
 8001864:	77fb      	strb	r3, [r7, #31]
 8001866:	7ffb      	ldrb	r3, [r7, #31]
 8001868:	2b07      	cmp	r3, #7
 800186a:	d9eb      	bls.n	8001844 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	b292      	uxth	r2, r2
 8001880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800188c:	b29a      	uxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	b292      	uxth	r2, r2
 8001898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800189c:	bf00      	nop
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f6      	beq.n	800189e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c2:	b292      	uxth	r2, r2
 80018c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	77fb      	strb	r3, [r7, #31]
 80018cc:	e00f      	b.n	80018ee <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80018ce:	7ffb      	ldrb	r3, [r7, #31]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	4611      	mov	r1, r2
 80018d6:	7ffa      	ldrb	r2, [r7, #31]
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	440a      	add	r2, r1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	3320      	adds	r3, #32
 80018e0:	443b      	add	r3, r7
 80018e2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80018e6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	3301      	adds	r3, #1
 80018ec:	77fb      	strb	r3, [r7, #31]
 80018ee:	7ffb      	ldrb	r3, [r7, #31]
 80018f0:	2b07      	cmp	r3, #7
 80018f2:	d9ec      	bls.n	80018ce <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0208 	orr.w	r2, r2, #8
 8001906:	b292      	uxth	r2, r2
 8001908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191e:	b292      	uxth	r2, r2
 8001920:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800192c:	b29a      	uxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0204 	orr.w	r2, r2, #4
 8001936:	b292      	uxth	r2, r2
 8001938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f006 ff3f 	bl	80087c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001942:	e026      	b.n	8001992 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00f      	beq.n	800196e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001956:	b29a      	uxth	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001960:	b292      	uxth	r2, r2
 8001962:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f006 fefd 	bl	8008766 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800196c:	e011      	b.n	8001992 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800198a:	b292      	uxth	r2, r2
 800198c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001990:	bf00      	nop
  }
}
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_PCD_SetAddress+0x1a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e013      	b.n	80019da <HAL_PCD_SetAddress+0x42>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 ffe0 	bl	8006990 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	4608      	mov	r0, r1
 80019ec:	4611      	mov	r1, r2
 80019ee:	461a      	mov	r2, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	70fb      	strb	r3, [r7, #3]
 80019f4:	460b      	mov	r3, r1
 80019f6:	803b      	strh	r3, [r7, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da0e      	bge.n	8001a26 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	705a      	strb	r2, [r3, #1]
 8001a24:	e00e      	b.n	8001a44 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	f003 0207 	and.w	r2, r3, #7
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a50:	883a      	ldrh	r2, [r7, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	78ba      	ldrb	r2, [r7, #2]
 8001a5a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a5c:	78bb      	ldrb	r3, [r7, #2]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d102      	bne.n	8001a68 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_PCD_EP_Open+0x94>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e00e      	b.n	8001a94 <HAL_PCD_EP_Open+0xb2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68f9      	ldr	r1, [r7, #12]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fd29 	bl	80044dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a92:	7afb      	ldrb	r3, [r7, #11]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da0e      	bge.n	8001ace <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	705a      	strb	r2, [r3, #1]
 8001acc:	e00e      	b.n	8001aec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	f003 0207 	and.w	r2, r3, #7
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_PCD_EP_Close+0x6a>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e00e      	b.n	8001b24 <HAL_PCD_EP_Close+0x88>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 f8a1 	bl	8004c5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
 8001b3e:	f003 0207 	and.w	r2, r3, #7
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4413      	add	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6979      	ldr	r1, [r7, #20]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fa58 	bl	8005034 <USB_EPStartXfer>

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 0207 	and.w	r2, r3, #7
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001bb0:	681b      	ldr	r3, [r3, #0]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2201      	movs	r2, #1
 8001c06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6979      	ldr	r1, [r7, #20]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fa0a 	bl	8005034 <USB_EPStartXfer>

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	f003 0207 	and.w	r2, r3, #7
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d901      	bls.n	8001c48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e04c      	b.n	8001ce2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da0e      	bge.n	8001c6e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	705a      	strb	r2, [r3, #1]
 8001c6c:	e00c      	b.n	8001c88 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_PCD_EP_SetStall+0x7e>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e01c      	b.n	8001ce2 <HAL_PCD_EP_SetStall+0xb8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f004 fd6d 	bl	8006796 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d108      	bne.n	8001cd8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f004 fe92 	bl	80069fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d901      	bls.n	8001d08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e040      	b.n	8001d8a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da0e      	bge.n	8001d2e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	705a      	strb	r2, [r3, #1]
 8001d2c:	e00e      	b.n	8001d4c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 0207 	and.w	r2, r3, #7
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_PCD_EP_ClrStall+0x82>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e00e      	b.n	8001d8a <HAL_PCD_EP_ClrStall+0xa0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fd5b 	bl	8006836 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b096      	sub	sp, #88	; 0x58
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d9a:	e3bf      	b.n	800251c <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001da8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001db6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8179 	bne.w	80020b2 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001dc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d152      	bne.n	8001e72 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ddc:	81fb      	strh	r3, [r7, #14]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3328      	adds	r3, #40	; 0x28
 8001df4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	441a      	add	r2, r3
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e30:	2100      	movs	r1, #0
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f006 fc7d 	bl	8008732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 836b 	beq.w	800251c <PCD_EP_ISR_Handler+0x78a>
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 8366 	bne.w	800251c <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e70:	e354      	b.n	800251c <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e78:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d034      	beq.n	8001efa <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3306      	adds	r3, #6
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ecc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	f004 fde4 	bl	8006a9c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	823b      	strh	r3, [r7, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	8a3a      	ldrh	r2, [r7, #16]
 8001eea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f006 fbf0 	bl	80086d8 <HAL_PCD_SetupStageCallback>
 8001ef8:	e310      	b.n	800251c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001efa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f280 830c 	bge.w	800251c <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f10:	4013      	ands	r3, r2
 8001f12:	83fb      	strh	r3, [r7, #30]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	8bfa      	ldrh	r2, [r7, #30]
 8001f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	3306      	adds	r3, #6
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d019      	beq.n	8001f8a <PCD_EP_ISR_Handler+0x1f8>
 8001f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f64:	6959      	ldr	r1, [r3, #20]
 8001f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f68:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f004 fd94 	bl	8006a9c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	441a      	add	r2, r3
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f82:	2100      	movs	r1, #0
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f006 fbb9 	bl	80086fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001f94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f040 82bd 	bne.w	800251c <PCD_EP_ISR_Handler+0x78a>
 8001fa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fa6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001faa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001fae:	f000 82b5 	beq.w	800251c <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8001fe8:	d91d      	bls.n	8002026 <PCD_EP_ISR_Handler+0x294>
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <PCD_EP_ISR_Handler+0x272>
 8001ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002000:	3b01      	subs	r3, #1
 8002002:	647b      	str	r3, [r7, #68]	; 0x44
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b29a      	uxth	r2, r3
 800200a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200c:	b29b      	uxth	r3, r3
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	b29b      	uxth	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b29b      	uxth	r3, r3
 8002016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201e:	b29a      	uxth	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	801a      	strh	r2, [r3, #0]
 8002024:	e026      	b.n	8002074 <PCD_EP_ISR_Handler+0x2e2>
 8002026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10a      	bne.n	8002044 <PCD_EP_ISR_Handler+0x2b2>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203c:	b29a      	uxth	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	e017      	b.n	8002074 <PCD_EP_ISR_Handler+0x2e2>
 8002044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	647b      	str	r3, [r7, #68]	; 0x44
 800204c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <PCD_EP_ISR_Handler+0x2cc>
 8002058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205a:	3301      	adds	r3, #1
 800205c:	647b      	str	r3, [r7, #68]	; 0x44
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29a      	uxth	r2, r3
 8002064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002066:	b29b      	uxth	r3, r3
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	b29b      	uxth	r3, r3
 800206c:	4313      	orrs	r3, r2
 800206e:	b29a      	uxth	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002084:	827b      	strh	r3, [r7, #18]
 8002086:	8a7b      	ldrh	r3, [r7, #18]
 8002088:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800208c:	827b      	strh	r3, [r7, #18]
 800208e:	8a7b      	ldrh	r3, [r7, #18]
 8002090:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002094:	827b      	strh	r3, [r7, #18]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	8a7b      	ldrh	r3, [r7, #18]
 800209c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	8013      	strh	r3, [r2, #0]
 80020b0:	e234      	b.n	800251c <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020c6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f280 80fc 	bge.w	80022c8 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020e6:	4013      	ands	r3, r2
 80020e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80020fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002102:	b292      	uxth	r2, r2
 8002104:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002106:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800211c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211e:	7b1b      	ldrb	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d125      	bne.n	8002170 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212c:	b29b      	uxth	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	3306      	adds	r3, #6
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800214c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002150:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8092 	beq.w	800227e <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002160:	6959      	ldr	r1, [r3, #20]
 8002162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002164:	88da      	ldrh	r2, [r3, #6]
 8002166:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800216a:	f004 fc97 	bl	8006a9c <USB_ReadPMA>
 800216e:	e086      	b.n	800227e <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002172:	78db      	ldrb	r3, [r3, #3]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d10a      	bne.n	800218e <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002178:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800217c:	461a      	mov	r2, r3
 800217e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f9d9 	bl	8002538 <HAL_PCD_EP_DB_Receive>
 8002186:	4603      	mov	r3, r0
 8002188:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800218c:	e077      	b.n	800227e <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	441a      	add	r2, r3
 80021ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d024      	beq.n	8002236 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	3302      	adds	r3, #2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002214:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002218:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800221c:	2b00      	cmp	r3, #0
 800221e:	d02e      	beq.n	800227e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002226:	6959      	ldr	r1, [r3, #20]
 8002228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222a:	891a      	ldrh	r2, [r3, #8]
 800222c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002230:	f004 fc34 	bl	8006a9c <USB_ReadPMA>
 8002234:	e023      	b.n	800227e <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	3306      	adds	r3, #6
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002262:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002270:	6959      	ldr	r1, [r3, #20]
 8002272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002274:	895a      	ldrh	r2, [r3, #10]
 8002276:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800227a:	f004 fc0f 	bl	8006a9c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800227e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002286:	441a      	add	r2, r3
 8002288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002294:	441a      	add	r2, r3
 8002296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002298:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800229a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <PCD_EP_ISR_Handler+0x51c>
 80022a2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d206      	bcs.n	80022bc <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f006 fa21 	bl	80086fc <HAL_PCD_DataOutStageCallback>
 80022ba:	e005      	b.n	80022c8 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 feb6 	bl	8005034 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8123 	beq.w	800251c <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80022d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002304:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800231a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800231e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002322:	b29b      	uxth	r3, r3
 8002324:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	2b01      	cmp	r3, #1
 800232c:	f040 80a2 	bne.w	8002474 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002338:	7b1b      	ldrb	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8093 	beq.w	8002466 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002340:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d046      	beq.n	80023da <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800234c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d126      	bne.n	80023a2 <PCD_EP_ISR_Handler+0x610>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	4413      	add	r3, r2
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	011a      	lsls	r2, r3, #4
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	4413      	add	r3, r2
 8002376:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002386:	b29a      	uxth	r2, r3
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800239a:	b29a      	uxth	r2, r3
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	801a      	strh	r2, [r3, #0]
 80023a0:	e061      	b.n	8002466 <PCD_EP_ISR_Handler+0x6d4>
 80023a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d15d      	bne.n	8002466 <PCD_EP_ISR_Handler+0x6d4>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023be:	4413      	add	r3, r2
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	011a      	lsls	r2, r3, #4
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	4413      	add	r3, r2
 80023cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	2200      	movs	r2, #0
 80023d6:	801a      	strh	r2, [r3, #0]
 80023d8:	e045      	b.n	8002466 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d126      	bne.n	8002436 <PCD_EP_ISR_Handler+0x6a4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fc:	4413      	add	r3, r2
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	011a      	lsls	r2, r3, #4
 8002406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002408:	4413      	add	r3, r2
 800240a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241a:	b29a      	uxth	r2, r3
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242e:	b29a      	uxth	r2, r3
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	801a      	strh	r2, [r3, #0]
 8002434:	e017      	b.n	8002466 <PCD_EP_ISR_Handler+0x6d4>
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d113      	bne.n	8002466 <PCD_EP_ISR_Handler+0x6d4>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244c:	4413      	add	r3, r2
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	011a      	lsls	r2, r3, #4
 8002456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002458:	4413      	add	r3, r2
 800245a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800245e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002462:	2200      	movs	r2, #0
 8002464:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f006 f960 	bl	8008732 <HAL_PCD_DataInStageCallback>
 8002472:	e053      	b.n	800251c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002474:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d146      	bne.n	800250e <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002488:	b29b      	uxth	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	3302      	adds	r3, #2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80024ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d907      	bls.n	80024c8 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80024b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024c0:	1ad2      	subs	r2, r2, r3
 80024c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c4:	619a      	str	r2, [r3, #24]
 80024c6:	e002      	b.n	80024ce <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80024c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80024ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f006 f928 	bl	8008732 <HAL_PCD_DataInStageCallback>
 80024e2:	e01b      	b.n	800251c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024ec:	441a      	add	r2, r3
 80024ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80024f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024fa:	441a      	add	r2, r3
 80024fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002506:	4618      	mov	r0, r3
 8002508:	f002 fd94 	bl	8005034 <USB_EPStartXfer>
 800250c:	e006      	b.n	800251c <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800250e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002512:	461a      	mov	r2, r3
 8002514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f91b 	bl	8002752 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002524:	b29b      	uxth	r3, r3
 8002526:	b21b      	sxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	f6ff ac37 	blt.w	8001d9c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3758      	adds	r7, #88	; 0x58
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d07e      	beq.n	800264e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	3302      	adds	r3, #2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002578:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	8b7b      	ldrh	r3, [r7, #26]
 8002580:	429a      	cmp	r2, r3
 8002582:	d306      	bcc.n	8002592 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	8b7b      	ldrh	r3, [r7, #26]
 800258a:	1ad2      	subs	r2, r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	619a      	str	r2, [r3, #24]
 8002590:	e002      	b.n	8002598 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d123      	bne.n	80025e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ba:	833b      	strh	r3, [r7, #24]
 80025bc:	8b3b      	ldrh	r3, [r7, #24]
 80025be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025c2:	833b      	strh	r3, [r7, #24]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	8b3b      	ldrh	r3, [r7, #24]
 80025d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01f      	beq.n	8002632 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260c:	82fb      	strh	r3, [r7, #22]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	441a      	add	r2, r3
 800261c:	8afb      	ldrh	r3, [r7, #22]
 800261e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800262e:	b29b      	uxth	r3, r3
 8002630:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002632:	8b7b      	ldrh	r3, [r7, #26]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8087 	beq.w	8002748 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6959      	ldr	r1, [r3, #20]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	891a      	ldrh	r2, [r3, #8]
 8002646:	8b7b      	ldrh	r3, [r7, #26]
 8002648:	f004 fa28 	bl	8006a9c <USB_ReadPMA>
 800264c:	e07c      	b.n	8002748 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002656:	b29b      	uxth	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	3306      	adds	r3, #6
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002676:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	8b7b      	ldrh	r3, [r7, #26]
 800267e:	429a      	cmp	r2, r3
 8002680:	d306      	bcc.n	8002690 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	8b7b      	ldrh	r3, [r7, #26]
 8002688:	1ad2      	subs	r2, r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	619a      	str	r2, [r3, #24]
 800268e:	e002      	b.n	8002696 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d123      	bne.n	80026e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b8:	83fb      	strh	r3, [r7, #30]
 80026ba:	8bfb      	ldrh	r3, [r7, #30]
 80026bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026c0:	83fb      	strh	r3, [r7, #30]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	8bfb      	ldrh	r3, [r7, #30]
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d11f      	bne.n	8002730 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	83bb      	strh	r3, [r7, #28]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	8bbb      	ldrh	r3, [r7, #28]
 800271c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002728:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800272c:	b29b      	uxth	r3, r3
 800272e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6959      	ldr	r1, [r3, #20]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	895a      	ldrh	r2, [r3, #10]
 8002742:	8b7b      	ldrh	r3, [r7, #26]
 8002744:	f004 f9aa 	bl	8006a9c <USB_ReadPMA>
    }
  }

  return count;
 8002748:	8b7b      	ldrh	r3, [r7, #26]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b0a4      	sub	sp, #144	; 0x90
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	4613      	mov	r3, r2
 800275e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 81dd 	beq.w	8002b26 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	3302      	adds	r3, #2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002794:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d907      	bls.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027ac:	1ad2      	subs	r2, r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	e002      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2200      	movs	r2, #0
 80027b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80b9 	bne.w	8002936 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d126      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0xc8>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	4413      	add	r3, r2
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	011a      	lsls	r2, r3, #4
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	4413      	add	r3, r2
 80027ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fe:	b29a      	uxth	r2, r3
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	801a      	strh	r2, [r3, #0]
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002812:	b29a      	uxth	r2, r3
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	e01a      	b.n	8002850 <HAL_PCD_EP_DB_Transmit+0xfe>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d116      	bne.n	8002850 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	4413      	add	r3, r2
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	011a      	lsls	r2, r3, #4
 8002840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002842:	4413      	add	r3, r2
 8002844:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	2200      	movs	r2, #0
 800284e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d126      	bne.n	80028ac <HAL_PCD_EP_DB_Transmit+0x15a>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286c:	b29b      	uxth	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	011a      	lsls	r2, r3, #4
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002890:	b29a      	uxth	r2, r3
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	e017      	b.n	80028dc <HAL_PCD_EP_DB_Transmit+0x18a>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d113      	bne.n	80028dc <HAL_PCD_EP_DB_Transmit+0x18a>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	4413      	add	r3, r2
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	011a      	lsls	r2, r3, #4
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028d4:	623b      	str	r3, [r7, #32]
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2200      	movs	r2, #0
 80028da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f005 ff25 	bl	8008732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 82fc 	beq.w	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	82fb      	strh	r3, [r7, #22]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	8afb      	ldrh	r3, [r7, #22]
 8002920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800292c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002930:	b29b      	uxth	r3, r3
 8002932:	8013      	strh	r3, [r2, #0]
 8002934:	e2da      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d021      	beq.n	8002984 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	441a      	add	r2, r3
 800296c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800297c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002980:	b29b      	uxth	r3, r3
 8002982:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298a:	2b01      	cmp	r3, #1
 800298c:	f040 82ae 	bne.w	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002998:	441a      	add	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029a6:	441a      	add	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d30b      	bcc.n	80029d0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c8:	1ad2      	subs	r2, r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	621a      	str	r2, [r3, #32]
 80029ce:	e017      	b.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d108      	bne.n	80029ea <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80029d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029e8:	e00a      	b.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d165      	bne.n	8002ad4 <HAL_PCD_EP_DB_Transmit+0x382>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	011a      	lsls	r2, r3, #4
 8002a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a28:	4413      	add	r3, r2
 8002a2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	801a      	strh	r2, [r3, #0]
 8002a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a44:	2b3e      	cmp	r3, #62	; 0x3e
 8002a46:	d91d      	bls.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x332>
 8002a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x310>
 8002a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	801a      	strh	r2, [r3, #0]
 8002a82:	e044      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x350>
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	e035      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_PCD_EP_DB_Transmit+0x36a>
 8002ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab8:	3301      	adds	r3, #1
 8002aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	029b      	lsls	r3, r3, #10
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	e01c      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	785b      	ldrb	r3, [r3, #1]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d118      	bne.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af0:	4413      	add	r3, r2
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	011a      	lsls	r2, r3, #4
 8002afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afc:	4413      	add	r3, r2
 8002afe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b02:	643b      	str	r3, [r7, #64]	; 0x40
 8002b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6959      	ldr	r1, [r3, #20]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	891a      	ldrh	r2, [r3, #8]
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f003 ff77 	bl	8006a12 <USB_WritePMA>
 8002b24:	e1e2      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3306      	adds	r3, #6
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b4e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d307      	bcc.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b66:	1ad2      	subs	r2, r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	619a      	str	r2, [r3, #24]
 8002b6c:	e002      	b.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 80c0 	bne.w	8002cfe <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d126      	bne.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x482>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b9a:	4413      	add	r3, r2
 8002b9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	011a      	lsls	r2, r3, #4
 8002ba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bac:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bbc:	801a      	strh	r2, [r3, #0]
 8002bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd0:	801a      	strh	r2, [r3, #0]
 8002bd2:	e01a      	b.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d116      	bne.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	667b      	str	r3, [r7, #100]	; 0x64
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf0:	4413      	add	r3, r2
 8002bf2:	667b      	str	r3, [r7, #100]	; 0x64
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	011a      	lsls	r2, r3, #4
 8002bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c02:	663b      	str	r3, [r7, #96]	; 0x60
 8002c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c06:	2200      	movs	r2, #0
 8002c08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	677b      	str	r3, [r7, #116]	; 0x74
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d12b      	bne.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2c:	4413      	add	r3, r2
 8002c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	011a      	lsls	r2, r3, #4
 8002c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c38:	4413      	add	r3, r2
 8002c3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	e017      	b.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d113      	bne.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c86:	4413      	add	r3, r2
 8002c88:	677b      	str	r3, [r7, #116]	; 0x74
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	011a      	lsls	r2, r3, #4
 8002c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c92:	4413      	add	r3, r2
 8002c94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c98:	673b      	str	r3, [r7, #112]	; 0x70
 8002c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f005 fd43 	bl	8008732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 811a 	bne.w	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	441a      	add	r2, r3
 8002ce4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	8013      	strh	r3, [r2, #0]
 8002cfc:	e0f6      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d121      	bne.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	441a      	add	r2, r3
 8002d34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	f040 80ca 	bne.w	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d60:	441a      	add	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d6e:	441a      	add	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d30b      	bcc.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6a1a      	ldr	r2, [r3, #32]
 8002d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d90:	1ad2      	subs	r2, r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	621a      	str	r2, [r3, #32]
 8002d96:	e017      	b.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d108      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002da0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002da4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002db0:	e00a      	b.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d165      	bne.n	8002ea2 <HAL_PCD_EP_DB_Transmit+0x750>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dea:	4413      	add	r3, r2
 8002dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	011a      	lsls	r2, r3, #4
 8002df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df6:	4413      	add	r3, r2
 8002df8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e0c:	801a      	strh	r2, [r3, #0]
 8002e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e12:	2b3e      	cmp	r3, #62	; 0x3e
 8002e14:	d91d      	bls.n	8002e52 <HAL_PCD_EP_DB_Transmit+0x700>
 8002e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	029b      	lsls	r3, r3, #10
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e4e:	801a      	strh	r2, [r3, #0]
 8002e50:	e041      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6c:	801a      	strh	r2, [r3, #0]
 8002e6e:	e032      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x738>
 8002e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e86:	3301      	adds	r3, #1
 8002e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	029b      	lsls	r3, r3, #10
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9e:	801a      	strh	r2, [r3, #0]
 8002ea0:	e019      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	785b      	ldrb	r3, [r3, #1]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d115      	bne.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb8:	4413      	add	r3, r2
 8002eba:	657b      	str	r3, [r7, #84]	; 0x54
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	011a      	lsls	r2, r3, #4
 8002ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eca:	653b      	str	r3, [r7, #80]	; 0x50
 8002ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6959      	ldr	r1, [r3, #20]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	895a      	ldrh	r2, [r3, #10]
 8002ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f003 fd93 	bl	8006a12 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f06:	82bb      	strh	r3, [r7, #20]
 8002f08:	8abb      	ldrh	r3, [r7, #20]
 8002f0a:	f083 0310 	eor.w	r3, r3, #16
 8002f0e:	82bb      	strh	r3, [r7, #20]
 8002f10:	8abb      	ldrh	r3, [r7, #20]
 8002f12:	f083 0320 	eor.w	r3, r3, #32
 8002f16:	82bb      	strh	r3, [r7, #20]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	8abb      	ldrh	r3, [r7, #20]
 8002f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3790      	adds	r7, #144	; 0x90
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b087      	sub	sp, #28
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	817b      	strh	r3, [r7, #10]
 8002f54:	4613      	mov	r3, r2
 8002f56:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f64:	897b      	ldrh	r3, [r7, #10]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e009      	b.n	8002f90 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f7c:	897a      	ldrh	r2, [r7, #10]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f90:	893b      	ldrh	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	80da      	strh	r2, [r3, #6]
 8002fa4:	e00b      	b.n	8002fbe <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	0c1b      	lsrs	r3, r3, #16
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e272      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8087 	beq.w	80030fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fec:	4b92      	ldr	r3, [pc, #584]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d00c      	beq.n	8003012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff8:	4b8f      	ldr	r3, [pc, #572]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b08      	cmp	r3, #8
 8003002:	d112      	bne.n	800302a <HAL_RCC_OscConfig+0x5e>
 8003004:	4b8c      	ldr	r3, [pc, #560]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d10b      	bne.n	800302a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003012:	4b89      	ldr	r3, [pc, #548]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d06c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x12c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d168      	bne.n	80030f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e24c      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x76>
 8003034:	4b80      	ldr	r3, [pc, #512]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a7f      	ldr	r2, [pc, #508]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800303a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	e02e      	b.n	80030a0 <HAL_RCC_OscConfig+0xd4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x98>
 800304a:	4b7b      	ldr	r3, [pc, #492]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7a      	ldr	r2, [pc, #488]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b78      	ldr	r3, [pc, #480]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a77      	ldr	r2, [pc, #476]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800305c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xd4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0xbc>
 800306e:	4b72      	ldr	r3, [pc, #456]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a71      	ldr	r2, [pc, #452]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6e      	ldr	r2, [pc, #440]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xd4>
 8003088:	4b6b      	ldr	r3, [pc, #428]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6a      	ldr	r2, [pc, #424]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b68      	ldr	r3, [pc, #416]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a67      	ldr	r2, [pc, #412]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fe7e 	bl	8000da8 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fd fe7a 	bl	8000da8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e200      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b5d      	ldr	r3, [pc, #372]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xe4>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fd fe6a 	bl	8000da8 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fd fe66 	bl	8000da8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1ec      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x10c>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003106:	4b4c      	ldr	r3, [pc, #304]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003112:	4b49      	ldr	r3, [pc, #292]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b08      	cmp	r3, #8
 800311c:	d11c      	bne.n	8003158 <HAL_RCC_OscConfig+0x18c>
 800311e:	4b46      	ldr	r3, [pc, #280]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d116      	bne.n	8003158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b43      	ldr	r3, [pc, #268]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x176>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1c0      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4939      	ldr	r1, [pc, #228]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	e03a      	b.n	80031ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003160:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_RCC_OscConfig+0x270>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fd fe1f 	bl	8000da8 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316e:	f7fd fe1b 	bl	8000da8 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1a1      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4927      	ldr	r1, [pc, #156]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
 80031a0:	e015      	b.n	80031ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <HAL_RCC_OscConfig+0x270>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fd fdfe 	bl	8000da8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fd fdfa 	bl	8000da8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e180      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03a      	beq.n	8003250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d019      	beq.n	8003216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_RCC_OscConfig+0x274>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e8:	f7fd fdde 	bl	8000da8 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fd fdda 	bl	8000da8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e160      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800320e:	2001      	movs	r0, #1
 8003210:	f000 fa9c 	bl	800374c <RCC_Delay>
 8003214:	e01c      	b.n	8003250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_OscConfig+0x274>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7fd fdc4 	bl	8000da8 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003222:	e00f      	b.n	8003244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003224:	f7fd fdc0 	bl	8000da8 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d908      	bls.n	8003244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e146      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	42420000 	.word	0x42420000
 8003240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	4b92      	ldr	r3, [pc, #584]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e9      	bne.n	8003224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80a6 	beq.w	80033aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003262:	4b8b      	ldr	r3, [pc, #556]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	4b88      	ldr	r3, [pc, #544]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4a87      	ldr	r2, [pc, #540]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	61d3      	str	r3, [r2, #28]
 800327a:	4b85      	ldr	r3, [pc, #532]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b82      	ldr	r3, [pc, #520]	; (8003494 <HAL_RCC_OscConfig+0x4c8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b7f      	ldr	r3, [pc, #508]	; (8003494 <HAL_RCC_OscConfig+0x4c8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7e      	ldr	r2, [pc, #504]	; (8003494 <HAL_RCC_OscConfig+0x4c8>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fd fd81 	bl	8000da8 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fd fd7d 	bl	8000da8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e103      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b75      	ldr	r3, [pc, #468]	; (8003494 <HAL_RCC_OscConfig+0x4c8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x312>
 80032d0:	4b6f      	ldr	r3, [pc, #444]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	4a6e      	ldr	r2, [pc, #440]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6213      	str	r3, [r2, #32]
 80032dc:	e02d      	b.n	800333a <HAL_RCC_OscConfig+0x36e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x334>
 80032e6:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4a69      	ldr	r2, [pc, #420]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6213      	str	r3, [r2, #32]
 80032f2:	4b67      	ldr	r3, [pc, #412]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4a66      	ldr	r2, [pc, #408]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	6213      	str	r3, [r2, #32]
 80032fe:	e01c      	b.n	800333a <HAL_RCC_OscConfig+0x36e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b05      	cmp	r3, #5
 8003306:	d10c      	bne.n	8003322 <HAL_RCC_OscConfig+0x356>
 8003308:	4b61      	ldr	r3, [pc, #388]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4a60      	ldr	r2, [pc, #384]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	6213      	str	r3, [r2, #32]
 8003314:	4b5e      	ldr	r3, [pc, #376]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4a5d      	ldr	r2, [pc, #372]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6213      	str	r3, [r2, #32]
 8003320:	e00b      	b.n	800333a <HAL_RCC_OscConfig+0x36e>
 8003322:	4b5b      	ldr	r3, [pc, #364]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4a5a      	ldr	r2, [pc, #360]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	6213      	str	r3, [r2, #32]
 800332e:	4b58      	ldr	r3, [pc, #352]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4a57      	ldr	r2, [pc, #348]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d015      	beq.n	800336e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7fd fd31 	bl	8000da8 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fd fd2d 	bl	8000da8 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0b1      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ee      	beq.n	800334a <HAL_RCC_OscConfig+0x37e>
 800336c:	e014      	b.n	8003398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fd fd1b 	bl	8000da8 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fd fd17 	bl	8000da8 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e09b      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	4b40      	ldr	r3, [pc, #256]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ee      	bne.n	8003376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4b3c      	ldr	r3, [pc, #240]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a3b      	ldr	r2, [pc, #236]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8087 	beq.w	80034c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b4:	4b36      	ldr	r3, [pc, #216]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d061      	beq.n	8003484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d146      	bne.n	8003456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b33      	ldr	r3, [pc, #204]	; (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fd fceb 	bl	8000da8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fd fce7 	bl	8000da8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e06d      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e8:	4b29      	ldr	r3, [pc, #164]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d108      	bne.n	8003410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4921      	ldr	r1, [pc, #132]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003410:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a19      	ldr	r1, [r3, #32]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	430b      	orrs	r3, r1
 8003422:	491b      	ldr	r1, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fd fcbb 	bl	8000da8 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd fcb7 	bl	8000da8 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e03d      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x46a>
 8003454:	e035      	b.n	80034c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fd fca4 	bl	8000da8 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd fca0 	bl	8000da8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e026      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x498>
 8003482:	e01e      	b.n	80034c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e019      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_OscConfig+0x500>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000

080034d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0d0      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d910      	bls.n	8003514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b67      	ldr	r3, [pc, #412]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 0207 	bic.w	r2, r3, #7
 80034fa:	4965      	ldr	r1, [pc, #404]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b8      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a58      	ldr	r2, [pc, #352]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800354e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b50      	ldr	r3, [pc, #320]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	494d      	ldr	r1, [pc, #308]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d040      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d115      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e07f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e073      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06b      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b39      	ldr	r3, [pc, #228]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4936      	ldr	r1, [pc, #216]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7fd fbf2 	bl	8000da8 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fd fbee 	bl	8000da8 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e053      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d210      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	4922      	ldr	r1, [pc, #136]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e032      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4916      	ldr	r1, [pc, #88]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	490e      	ldr	r1, [pc, #56]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800365e:	f000 f821 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003662:	4602      	mov	r2, r0
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	490a      	ldr	r1, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	5ccb      	ldrb	r3, [r1, r3]
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a09      	ldr	r2, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1cc>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x1d0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fb50 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40022000 	.word	0x40022000
 8003694:	40021000 	.word	0x40021000
 8003698:	08009b70 	.word	0x08009b70
 800369c:	20000004 	.word	0x20000004
 80036a0:	20000008 	.word	0x20000008

080036a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_RCC_GetSysClockFreq+0x94>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d002      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x30>
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d003      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0x36>
 80036d2:	e027      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_GetSysClockFreq+0x98>)
 80036d6:	613b      	str	r3, [r7, #16]
      break;
 80036d8:	e027      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	0c9b      	lsrs	r3, r3, #18
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	4a17      	ldr	r2, [pc, #92]	; (8003740 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_RCC_GetSysClockFreq+0x94>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	0c5b      	lsrs	r3, r3, #17
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	4a11      	ldr	r2, [pc, #68]	; (8003744 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <HAL_RCC_GetSysClockFreq+0x98>)
 8003706:	fb03 f202 	mul.w	r2, r3, r2
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e004      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003718:	fb02 f303 	mul.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	613b      	str	r3, [r7, #16]
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetSysClockFreq+0x98>)
 8003726:	613b      	str	r3, [r7, #16]
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	693b      	ldr	r3, [r7, #16]
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	007a1200 	.word	0x007a1200
 8003740:	08009b80 	.word	0x08009b80
 8003744:	08009b90 	.word	0x08009b90
 8003748:	003d0900 	.word	0x003d0900

0800374c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <RCC_Delay+0x34>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <RCC_Delay+0x38>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0a5b      	lsrs	r3, r3, #9
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003768:	bf00      	nop
  }
  while (Delay --);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1e5a      	subs	r2, r3, #1
 800376e:	60fa      	str	r2, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f9      	bne.n	8003768 <RCC_Delay+0x1c>
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	20000004 	.word	0x20000004
 8003784:	10624dd3 	.word	0x10624dd3

08003788 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d07d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a8:	4b4f      	ldr	r3, [pc, #316]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b4c      	ldr	r3, [pc, #304]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4a4b      	ldr	r2, [pc, #300]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	61d3      	str	r3, [r2, #28]
 80037c0:	4b49      	ldr	r3, [pc, #292]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	4b46      	ldr	r3, [pc, #280]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d118      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037dc:	4b43      	ldr	r3, [pc, #268]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a42      	ldr	r2, [pc, #264]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e8:	f7fd fade 	bl	8000da8 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	e008      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f0:	f7fd fada 	bl	8000da8 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	; 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e06d      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003802:	4b3a      	ldr	r3, [pc, #232]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800380e:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d02e      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	429a      	cmp	r2, r3
 800382a:	d027      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800382c:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003834:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800383c:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003842:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d014      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fd faa9 	bl	8000da8 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	e00a      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fd faa5 	bl	8000da8 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	; 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e036      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ee      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4917      	ldr	r1, [pc, #92]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	4313      	orrs	r3, r2
 800388c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	490b      	ldr	r1, [pc, #44]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4904      	ldr	r1, [pc, #16]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40007000 	.word	0x40007000
 80038f0:	42420440 	.word	0x42420440

080038f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e076      	b.n	80039f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003916:	d009      	beq.n	800392c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	61da      	str	r2, [r3, #28]
 800391e:	e005      	b.n	800392c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd f84e 	bl	80009e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	ea42 0103 	orr.w	r1, r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	0c1a      	lsrs	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f002 0204 	and.w	r2, r2, #4
 80039d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_SPI_Transmit+0x22>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e12d      	b.n	8003c7a <HAL_SPI_Transmit+0x27e>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a26:	f7fd f9bf 	bl	8000da8 <HAL_GetTick>
 8003a2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d002      	beq.n	8003a42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a40:	e116      	b.n	8003c70 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_SPI_Transmit+0x52>
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a52:	e10d      	b.n	8003c70 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2203      	movs	r2, #3
 8003a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9a:	d10f      	bne.n	8003abc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d007      	beq.n	8003ada <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d14f      	bne.n	8003b84 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_SPI_Transmit+0xf6>
 8003aec:	8afb      	ldrh	r3, [r7, #22]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d142      	bne.n	8003b78 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	1c9a      	adds	r2, r3, #2
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b16:	e02f      	b.n	8003b78 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d112      	bne.n	8003b4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	1c9a      	adds	r2, r3, #2
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b4a:	e015      	b.n	8003b78 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b4c:	f7fd f92c 	bl	8000da8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d803      	bhi.n	8003b64 <HAL_SPI_Transmit+0x168>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d102      	bne.n	8003b6a <HAL_SPI_Transmit+0x16e>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003b76:	e07b      	b.n	8003c70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ca      	bne.n	8003b18 <HAL_SPI_Transmit+0x11c>
 8003b82:	e050      	b.n	8003c26 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_SPI_Transmit+0x196>
 8003b8c:	8afb      	ldrh	r3, [r7, #22]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d144      	bne.n	8003c1c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bb8:	e030      	b.n	8003c1c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d113      	bne.n	8003bf0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bee:	e015      	b.n	8003c1c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf0:	f7fd f8da 	bl	8000da8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d803      	bhi.n	8003c08 <HAL_SPI_Transmit+0x20c>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d102      	bne.n	8003c0e <HAL_SPI_Transmit+0x212>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c1a:	e029      	b.n	8003c70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1c9      	bne.n	8003bba <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fbcc 	bl	80043c8 <SPI_EndRxTxTransaction>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e003      	b.n	8003c70 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b088      	sub	sp, #32
 8003c86:	af02      	add	r7, sp, #8
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d002      	beq.n	8003ca8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ca6:	e0fb      	b.n	8003ea0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cb0:	d112      	bne.n	8003cd8 <HAL_SPI_Receive+0x56>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f8ef 	bl	8003eb2 <HAL_SPI_TransmitReceive>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	e0e8      	b.n	8003eaa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_SPI_Receive+0x64>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0e1      	b.n	8003eaa <HAL_SPI_Receive+0x228>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cee:	f7fd f85b 	bl	8000da8 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_Receive+0x7e>
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d04:	e0cc      	b.n	8003ea0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4c:	d10f      	bne.n	8003d6e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d007      	beq.n	8003d8c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d16a      	bne.n	8003e6a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d94:	e032      	b.n	8003dfc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d115      	bne.n	8003dd0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f103 020c 	add.w	r2, r3, #12
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dce:	e015      	b.n	8003dfc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd0:	f7fc ffea 	bl	8000da8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d803      	bhi.n	8003de8 <HAL_SPI_Receive+0x166>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d102      	bne.n	8003dee <HAL_SPI_Receive+0x16c>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003dfa:	e051      	b.n	8003ea0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1c7      	bne.n	8003d96 <HAL_SPI_Receive+0x114>
 8003e06:	e035      	b.n	8003e74 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d113      	bne.n	8003e3e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	b292      	uxth	r2, r2
 8003e22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e3c:	e015      	b.n	8003e6a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3e:	f7fc ffb3 	bl	8000da8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d803      	bhi.n	8003e56 <HAL_SPI_Receive+0x1d4>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d102      	bne.n	8003e5c <HAL_SPI_Receive+0x1da>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e68:	e01a      	b.n	8003ea0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1c9      	bne.n	8003e08 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	6839      	ldr	r1, [r7, #0]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fa53 	bl	8004324 <SPI_EndRxTransaction>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]
 8003e96:	e003      	b.n	8003ea0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b08c      	sub	sp, #48	; 0x30
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x26>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e198      	b.n	800420a <HAL_SPI_TransmitReceive+0x358>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ee0:	f7fc ff62 	bl	8000da8 <HAL_GetTick>
 8003ee4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ef6:	887b      	ldrh	r3, [r7, #2]
 8003ef8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d00f      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x70>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f08:	d107      	bne.n	8003f1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_SPI_TransmitReceive+0x68>
 8003f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d003      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f20:	e16d      	b.n	80041fe <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x82>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x82>
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f3a:	e160      	b.n	80041fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d003      	beq.n	8003f50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	887a      	ldrh	r2, [r7, #2]
 8003f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	887a      	ldrh	r2, [r7, #2]
 8003f72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d007      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d17c      	bne.n	80040a8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_TransmitReceive+0x10a>
 8003fb6:	8b7b      	ldrh	r3, [r7, #26]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d16a      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	1c9a      	adds	r2, r3, #2
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe0:	e057      	b.n	8004092 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d11b      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x176>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_SPI_TransmitReceive+0x176>
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d113      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	881a      	ldrh	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	1c9a      	adds	r2, r3, #2
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d119      	bne.n	800406a <HAL_SPI_TransmitReceive+0x1b8>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d014      	beq.n	800406a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	b292      	uxth	r2, r2
 800404c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004066:	2301      	movs	r3, #1
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800406a:	f7fc fe9d 	bl	8000da8 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004076:	429a      	cmp	r2, r3
 8004078:	d80b      	bhi.n	8004092 <HAL_SPI_TransmitReceive+0x1e0>
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d007      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004090:	e0b5      	b.n	80041fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1a2      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x130>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d19d      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x130>
 80040a6:	e080      	b.n	80041aa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x204>
 80040b0:	8b7b      	ldrh	r3, [r7, #26]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d16f      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	330c      	adds	r3, #12
 80040c0:	7812      	ldrb	r2, [r2, #0]
 80040c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040dc:	e05b      	b.n	8004196 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d11c      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x274>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d017      	beq.n	8004126 <HAL_SPI_TransmitReceive+0x274>
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d114      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	7812      	ldrb	r2, [r2, #0]
 8004108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d119      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x2b6>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d014      	beq.n	8004168 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004164:	2301      	movs	r3, #1
 8004166:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004168:	f7fc fe1e 	bl	8000da8 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004174:	429a      	cmp	r2, r3
 8004176:	d803      	bhi.n	8004180 <HAL_SPI_TransmitReceive+0x2ce>
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d102      	bne.n	8004186 <HAL_SPI_TransmitReceive+0x2d4>
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	2b00      	cmp	r3, #0
 8004184:	d107      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004194:	e033      	b.n	80041fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d19e      	bne.n	80040de <HAL_SPI_TransmitReceive+0x22c>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d199      	bne.n	80040de <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f90a 	bl	80043c8 <SPI_EndRxTxTransaction>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041c6:	e01a      	b.n	80041fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f4:	e003      	b.n	80041fe <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004206:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800420a:	4618      	mov	r0, r3
 800420c:	3730      	adds	r7, #48	; 0x30
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004224:	f7fc fdc0 	bl	8000da8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4413      	add	r3, r2
 8004232:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004234:	f7fc fdb8 	bl	8000da8 <HAL_GetTick>
 8004238:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800423a:	4b39      	ldr	r3, [pc, #228]	; (8004320 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	015b      	lsls	r3, r3, #5
 8004240:	0d1b      	lsrs	r3, r3, #20
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800424a:	e054      	b.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d050      	beq.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004254:	f7fc fda8 	bl	8000da8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	429a      	cmp	r2, r3
 8004262:	d902      	bls.n	800426a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d13d      	bne.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d111      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428c:	d004      	beq.n	8004298 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004296:	d107      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	d10f      	bne.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e017      	b.n	8004316 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	429a      	cmp	r2, r3
 8004312:	d19b      	bne.n	800424c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000004 	.word	0x20000004

08004324 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004338:	d111      	bne.n	800435e <SPI_EndRxTransaction+0x3a>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004342:	d004      	beq.n	800434e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434c:	d107      	bne.n	800435e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004366:	d117      	bne.n	8004398 <SPI_EndRxTransaction+0x74>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004370:	d112      	bne.n	8004398 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2200      	movs	r2, #0
 800437a:	2101      	movs	r1, #1
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff ff49 	bl	8004214 <SPI_WaitFlagStateUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01a      	beq.n	80043be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e013      	b.n	80043c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	2180      	movs	r1, #128	; 0x80
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff ff36 	bl	8004214 <SPI_WaitFlagStateUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e000      	b.n	80043c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	2180      	movs	r1, #128	; 0x80
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff ff18 	bl	8004214 <SPI_WaitFlagStateUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e000      	b.n	80043fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004404:	b084      	sub	sp, #16
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	f107 0014 	add.w	r0, r7, #20
 8004412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	b004      	add	sp, #16
 8004422:	4770      	bx	lr

08004424 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004434:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004438:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004458:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800445c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	b29b      	uxth	r3, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	b29b      	uxth	r3, r3
 800446e:	4013      	ands	r3, r2
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800449c:	b084      	sub	sp, #16
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	f107 0014 	add.w	r0, r7, #20
 80044aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	b004      	add	sp, #16
 80044da:	4770      	bx	lr

080044dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044dc:	b480      	push	{r7}
 80044de:	b09d      	sub	sp, #116	; 0x74
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	78db      	ldrb	r3, [r3, #3]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d81f      	bhi.n	800454e <USB_ActivateEndpoint+0x72>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <USB_ActivateEndpoint+0x38>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004525 	.word	0x08004525
 8004518:	08004541 	.word	0x08004541
 800451c:	08004557 	.word	0x08004557
 8004520:	08004533 	.word	0x08004533
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004524:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800452c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004530:	e012      	b.n	8004558 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004532:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004536:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800453a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800453e:	e00b      	b.n	8004558 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004540:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004548:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800454c:	e004      	b.n	8004558 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004554:	e000      	b.n	8004558 <USB_ActivateEndpoint+0x7c>
      break;
 8004556:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004576:	b29b      	uxth	r3, r3
 8004578:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	b29a      	uxth	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	4313      	orrs	r3, r2
 800459a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80045ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045bc:	b29b      	uxth	r3, r3
 80045be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	7b1b      	ldrb	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f040 8178 	bne.w	80048ba <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8084 	beq.w	80046dc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	4413      	add	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	011a      	lsls	r2, r3, #4
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	88db      	ldrh	r3, [r3, #6]
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	b29b      	uxth	r3, r3
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	827b      	strh	r3, [r7, #18]
 8004616:	8a7b      	ldrh	r3, [r7, #18]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01b      	beq.n	8004658 <USB_ActivateEndpoint+0x17c>
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	823b      	strh	r3, [r7, #16]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	8a3b      	ldrh	r3, [r7, #16]
 8004644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004654:	b29b      	uxth	r3, r3
 8004656:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	78db      	ldrb	r3, [r3, #3]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d020      	beq.n	80046a2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004676:	81bb      	strh	r3, [r7, #12]
 8004678:	89bb      	ldrh	r3, [r7, #12]
 800467a:	f083 0320 	eor.w	r3, r3, #32
 800467e:	81bb      	strh	r3, [r7, #12]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	89bb      	ldrh	r3, [r7, #12]
 800468c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	b29b      	uxth	r3, r3
 800469e:	8013      	strh	r3, [r2, #0]
 80046a0:	e2d5      	b.n	8004c4e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b8:	81fb      	strh	r3, [r7, #14]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	89fb      	ldrh	r3, [r7, #14]
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]
 80046da:	e2b8      	b.n	8004c4e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	633b      	str	r3, [r7, #48]	; 0x30
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	4413      	add	r3, r2
 80046ee:	633b      	str	r3, [r7, #48]	; 0x30
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	011a      	lsls	r2, r3, #4
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	88db      	ldrh	r3, [r3, #6]
 8004704:	085b      	lsrs	r3, r3, #1
 8004706:	b29b      	uxth	r3, r3
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471a:	b29b      	uxth	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	4413      	add	r3, r2
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	011a      	lsls	r2, r3, #4
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	4413      	add	r3, r2
 800472e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800473e:	b29a      	uxth	r2, r3
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b3e      	cmp	r3, #62	; 0x3e
 800474a:	d91d      	bls.n	8004788 <USB_ActivateEndpoint+0x2ac>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	66bb      	str	r3, [r7, #104]	; 0x68
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <USB_ActivateEndpoint+0x28a>
 8004760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004762:	3b01      	subs	r3, #1
 8004764:	66bb      	str	r3, [r7, #104]	; 0x68
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29a      	uxth	r2, r3
 800476c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800476e:	b29b      	uxth	r3, r3
 8004770:	029b      	lsls	r3, r3, #10
 8004772:	b29b      	uxth	r3, r3
 8004774:	4313      	orrs	r3, r2
 8004776:	b29b      	uxth	r3, r3
 8004778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800477c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004780:	b29a      	uxth	r2, r3
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	e026      	b.n	80047d6 <USB_ActivateEndpoint+0x2fa>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <USB_ActivateEndpoint+0x2ca>
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800479a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	e017      	b.n	80047d6 <USB_ActivateEndpoint+0x2fa>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <USB_ActivateEndpoint+0x2e4>
 80047ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047bc:	3301      	adds	r3, #1
 80047be:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	029b      	lsls	r3, r3, #10
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	4313      	orrs	r3, r2
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80047e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01b      	beq.n	8004826 <USB_ActivateEndpoint+0x34a>
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	843b      	strh	r3, [r7, #32]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	8c3b      	ldrh	r3, [r7, #32]
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d124      	bne.n	8004878 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004844:	83bb      	strh	r3, [r7, #28]
 8004846:	8bbb      	ldrh	r3, [r7, #28]
 8004848:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800484c:	83bb      	strh	r3, [r7, #28]
 800484e:	8bbb      	ldrh	r3, [r7, #28]
 8004850:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004854:	83bb      	strh	r3, [r7, #28]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	8bbb      	ldrh	r3, [r7, #28]
 8004862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]
 8004876:	e1ea      	b.n	8004c4e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	83fb      	strh	r3, [r7, #30]
 8004890:	8bfb      	ldrh	r3, [r7, #30]
 8004892:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004896:	83fb      	strh	r3, [r7, #30]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	8bfb      	ldrh	r3, [r7, #30]
 80048a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	8013      	strh	r3, [r2, #0]
 80048b8:	e1c9      	b.n	8004c4e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	78db      	ldrb	r3, [r3, #3]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d11e      	bne.n	8004900 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004938:	b29b      	uxth	r3, r3
 800493a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004946:	b29b      	uxth	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800494c:	4413      	add	r3, r2
 800494e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	011a      	lsls	r2, r3, #4
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	4413      	add	r3, r2
 800495a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	891b      	ldrh	r3, [r3, #8]
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	657b      	str	r3, [r7, #84]	; 0x54
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497a:	b29b      	uxth	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004980:	4413      	add	r3, r2
 8004982:	657b      	str	r3, [r7, #84]	; 0x54
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011a      	lsls	r2, r3, #4
 800498a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800498c:	4413      	add	r3, r2
 800498e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004992:	653b      	str	r3, [r7, #80]	; 0x50
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	895b      	ldrh	r3, [r3, #10]
 8004998:	085b      	lsrs	r3, r3, #1
 800499a:	b29b      	uxth	r3, r3
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f040 8093 	bne.w	8004ad4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80049be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01b      	beq.n	8004a02 <USB_ActivateEndpoint+0x526>
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01b      	beq.n	8004a52 <USB_ActivateEndpoint+0x576>
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a70:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a78:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8013      	strh	r3, [r2, #0]
 8004ad2:	e0bc      	b.n	8004c4e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004ae4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01d      	beq.n	8004b2c <USB_ActivateEndpoint+0x650>
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01d      	beq.n	8004b84 <USB_ActivateEndpoint+0x6a8>
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	441a      	add	r2, r3
 8004b6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	78db      	ldrb	r3, [r3, #3]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d024      	beq.n	8004bd6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ba6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004baa:	f083 0320 	eor.w	r3, r3, #32
 8004bae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8013      	strh	r3, [r2, #0]
 8004bd4:	e01d      	b.n	8004c12 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	441a      	add	r2, r3
 8004c36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3774      	adds	r7, #116	; 0x74
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b08d      	sub	sp, #52	; 0x34
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	7b1b      	ldrb	r3, [r3, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 808e 	bne.w	8004d8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d044      	beq.n	8004d02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	81bb      	strh	r3, [r7, #12]
 8004c86:	89bb      	ldrh	r3, [r7, #12]
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01b      	beq.n	8004cc8 <USB_DeactivateEndpoint+0x6c>
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	817b      	strh	r3, [r7, #10]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	897b      	ldrh	r3, [r7, #10]
 8004cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cde:	813b      	strh	r3, [r7, #8]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	893b      	ldrh	r3, [r7, #8]
 8004cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	8013      	strh	r3, [r2, #0]
 8004d00:	e192      	b.n	8005028 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	827b      	strh	r3, [r7, #18]
 8004d10:	8a7b      	ldrh	r3, [r7, #18]
 8004d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01b      	beq.n	8004d52 <USB_DeactivateEndpoint+0xf6>
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	823b      	strh	r3, [r7, #16]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	441a      	add	r2, r3
 8004d3c:	8a3b      	ldrh	r3, [r7, #16]
 8004d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d68:	81fb      	strh	r3, [r7, #14]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	441a      	add	r2, r3
 8004d74:	89fb      	ldrh	r3, [r7, #14]
 8004d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	8013      	strh	r3, [r2, #0]
 8004d8a:	e14d      	b.n	8005028 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 80a5 	bne.w	8004ee0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	843b      	strh	r3, [r7, #32]
 8004da4:	8c3b      	ldrh	r3, [r7, #32]
 8004da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01b      	beq.n	8004de6 <USB_DeactivateEndpoint+0x18a>
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc4:	83fb      	strh	r3, [r7, #30]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	441a      	add	r2, r3
 8004dd0:	8bfb      	ldrh	r3, [r7, #30]
 8004dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	83bb      	strh	r3, [r7, #28]
 8004df4:	8bbb      	ldrh	r3, [r7, #28]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01b      	beq.n	8004e36 <USB_DeactivateEndpoint+0x1da>
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	837b      	strh	r3, [r7, #26]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	8b7b      	ldrh	r3, [r7, #26]
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4c:	833b      	strh	r3, [r7, #24]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	441a      	add	r2, r3
 8004e58:	8b3b      	ldrh	r3, [r7, #24]
 8004e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e84:	82fb      	strh	r3, [r7, #22]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	441a      	add	r2, r3
 8004e90:	8afb      	ldrh	r3, [r7, #22]
 8004e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ebc:	82bb      	strh	r3, [r7, #20]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	441a      	add	r2, r3
 8004ec8:	8abb      	ldrh	r3, [r7, #20]
 8004eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8013      	strh	r3, [r2, #0]
 8004ede:	e0a3      	b.n	8005028 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004eee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01b      	beq.n	8004f30 <USB_DeactivateEndpoint+0x2d4>
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01b      	beq.n	8004f80 <USB_DeactivateEndpoint+0x324>
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	441a      	add	r2, r3
 8004f6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fce:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	847b      	strh	r3, [r7, #34]	; 0x22
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	441a      	add	r2, r3
 8005012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005024:	b29b      	uxth	r3, r3
 8005026:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3734      	adds	r7, #52	; 0x34
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b0c2      	sub	sp, #264	; 0x108
 8005038:	af00      	add	r7, sp, #0
 800503a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005042:	6018      	str	r0, [r3, #0]
 8005044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800504e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	2b01      	cmp	r3, #1
 800505c:	f040 86b7 	bne.w	8005dce <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	429a      	cmp	r2, r3
 800507a:	d908      	bls.n	800508e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800507c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800508c:	e007      	b.n	800509e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800508e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800509e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	7b1b      	ldrb	r3, [r3, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d13a      	bne.n	8005124 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6959      	ldr	r1, [r3, #20]
 80050ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	88da      	ldrh	r2, [r3, #6]
 80050c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80050d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80050d4:	6800      	ldr	r0, [r0, #0]
 80050d6:	f001 fc9c 	bl	8006a12 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	011a      	lsls	r2, r3, #4
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	801a      	strh	r2, [r3, #0]
 8005120:	f000 be1f 	b.w	8005d62 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	78db      	ldrb	r3, [r3, #3]
 8005130:	2b02      	cmp	r3, #2
 8005132:	f040 8462 	bne.w	80059fa <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	429a      	cmp	r2, r3
 8005150:	f240 83df 	bls.w	8005912 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800517e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800519c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c0:	1ad2      	subs	r2, r2, r3
 80051c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 81c7 	beq.w	8005584 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
 8005202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d177      	bne.n	8005302 <USB_EPStartXfer+0x2ce>
 8005212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
 800521e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522c:	b29b      	uxth	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	4413      	add	r3, r2
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
 8005236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	011a      	lsls	r2, r3, #4
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	4413      	add	r3, r2
 8005248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005258:	b29a      	uxth	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005262:	2b3e      	cmp	r3, #62	; 0x3e
 8005264:	d921      	bls.n	80052aa <USB_EPStartXfer+0x276>
 8005266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <USB_EPStartXfer+0x252>
 800527c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005280:	3b01      	subs	r3, #1
 8005282:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29a      	uxth	r2, r3
 800528c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005290:	b29b      	uxth	r3, r3
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	b29b      	uxth	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	e050      	b.n	800534c <USB_EPStartXfer+0x318>
 80052aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <USB_EPStartXfer+0x294>
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e041      	b.n	800534c <USB_EPStartXfer+0x318>
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <USB_EPStartXfer+0x2b4>
 80052de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052e2:	3301      	adds	r3, #1
 80052e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	029b      	lsls	r3, r3, #10
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e024      	b.n	800534c <USB_EPStartXfer+0x318>
 8005302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d11c      	bne.n	800534c <USB_EPStartXfer+0x318>
 8005312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	4413      	add	r3, r2
 8005328:	633b      	str	r3, [r7, #48]	; 0x30
 800532a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	011a      	lsls	r2, r3, #4
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	4413      	add	r3, r2
 800533c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005346:	b29a      	uxth	r2, r3
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800534c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	895b      	ldrh	r3, [r3, #10]
 8005358:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800535c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6959      	ldr	r1, [r3, #20]
 8005368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536c:	b29b      	uxth	r3, r3
 800536e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005372:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005376:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	f001 fb49 	bl	8006a12 <USB_WritePMA>
            ep->xfer_buff += len;
 8005380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005390:	441a      	add	r2, r3
 8005392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800539e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d90f      	bls.n	80053da <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80053ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6a1a      	ldr	r2, [r3, #32]
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	621a      	str	r2, [r3, #32]
 80053d8:	e00e      	b.n	80053f8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80053da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80053ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2200      	movs	r2, #0
 80053f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d177      	bne.n	80054f8 <USB_EPStartXfer+0x4c4>
 8005408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005422:	b29b      	uxth	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	4413      	add	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	011a      	lsls	r2, r3, #4
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	4413      	add	r3, r2
 800543e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800544e:	b29a      	uxth	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005458:	2b3e      	cmp	r3, #62	; 0x3e
 800545a:	d921      	bls.n	80054a0 <USB_EPStartXfer+0x46c>
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <USB_EPStartXfer+0x448>
 8005472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005476:	3b01      	subs	r3, #1
 8005478:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29a      	uxth	r2, r3
 8005482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005486:	b29b      	uxth	r3, r3
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	b29b      	uxth	r3, r3
 800548c:	4313      	orrs	r3, r2
 800548e:	b29b      	uxth	r3, r3
 8005490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005498:	b29a      	uxth	r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	e056      	b.n	800554e <USB_EPStartXfer+0x51a>
 80054a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <USB_EPStartXfer+0x48a>
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	e047      	b.n	800554e <USB_EPStartXfer+0x51a>
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c2:	085b      	lsrs	r3, r3, #1
 80054c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <USB_EPStartXfer+0x4aa>
 80054d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d8:	3301      	adds	r3, #1
 80054da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	4313      	orrs	r3, r2
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	e02a      	b.n	800554e <USB_EPStartXfer+0x51a>
 80054f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d122      	bne.n	800554e <USB_EPStartXfer+0x51a>
 8005508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	4413      	add	r3, r2
 800552a:	623b      	str	r3, [r7, #32]
 800552c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	011a      	lsls	r2, r3, #4
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	4413      	add	r3, r2
 800553e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005548:	b29a      	uxth	r2, r3
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800554e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	891b      	ldrh	r3, [r3, #8]
 800555a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800555e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6959      	ldr	r1, [r3, #20]
 800556a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556e:	b29b      	uxth	r3, r3
 8005570:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005574:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005578:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800557c:	6800      	ldr	r0, [r0, #0]
 800557e:	f001 fa48 	bl	8006a12 <USB_WritePMA>
 8005582:	e3ee      	b.n	8005d62 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d177      	bne.n	8005684 <USB_EPStartXfer+0x650>
 8005594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	64bb      	str	r3, [r7, #72]	; 0x48
 80055a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b4:	4413      	add	r3, r2
 80055b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	011a      	lsls	r2, r3, #4
 80055c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055ce:	647b      	str	r3, [r7, #68]	; 0x44
 80055d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e4:	2b3e      	cmp	r3, #62	; 0x3e
 80055e6:	d921      	bls.n	800562c <USB_EPStartXfer+0x5f8>
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <USB_EPStartXfer+0x5d4>
 80055fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005602:	3b01      	subs	r3, #1
 8005604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29a      	uxth	r2, r3
 800560e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29b      	uxth	r3, r3
 8005618:	4313      	orrs	r3, r2
 800561a:	b29b      	uxth	r3, r3
 800561c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005624:	b29a      	uxth	r2, r3
 8005626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e056      	b.n	80056da <USB_EPStartXfer+0x6a6>
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <USB_EPStartXfer+0x616>
 8005634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005642:	b29a      	uxth	r2, r3
 8005644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e047      	b.n	80056da <USB_EPStartXfer+0x6a6>
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <USB_EPStartXfer+0x636>
 8005660:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005664:	3301      	adds	r3, #1
 8005666:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800566a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29a      	uxth	r2, r3
 8005670:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005674:	b29b      	uxth	r3, r3
 8005676:	029b      	lsls	r3, r3, #10
 8005678:	b29b      	uxth	r3, r3
 800567a:	4313      	orrs	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e02a      	b.n	80056da <USB_EPStartXfer+0x6a6>
 8005684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d122      	bne.n	80056da <USB_EPStartXfer+0x6a6>
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	653b      	str	r3, [r7, #80]	; 0x50
 80056a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b4:	4413      	add	r3, r2
 80056b6:	653b      	str	r3, [r7, #80]	; 0x50
 80056b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	011a      	lsls	r2, r3, #4
 80056c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c8:	4413      	add	r3, r2
 80056ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	891b      	ldrh	r3, [r3, #8]
 80056e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6959      	ldr	r1, [r3, #20]
 80056f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005700:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005704:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005708:	6800      	ldr	r0, [r0, #0]
 800570a:	f001 f982 	bl	8006a12 <USB_WritePMA>
            ep->xfer_buff += len;
 800570e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571e:	441a      	add	r2, r3
 8005720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800572c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a1a      	ldr	r2, [r3, #32]
 8005738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	429a      	cmp	r2, r3
 8005746:	d90f      	bls.n	8005768 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a1a      	ldr	r2, [r3, #32]
 8005754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005758:	1ad2      	subs	r2, r2, r3
 800575a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	621a      	str	r2, [r3, #32]
 8005766:	e00e      	b.n	8005786 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	643b      	str	r3, [r7, #64]	; 0x40
 8005792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d177      	bne.n	8005892 <USB_EPStartXfer+0x85e>
 80057a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057bc:	b29b      	uxth	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	4413      	add	r3, r2
 80057c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	011a      	lsls	r2, r3, #4
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	4413      	add	r3, r2
 80057d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f2:	2b3e      	cmp	r3, #62	; 0x3e
 80057f4:	d921      	bls.n	800583a <USB_EPStartXfer+0x806>
 80057f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <USB_EPStartXfer+0x7e2>
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	3b01      	subs	r3, #1
 8005812:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29a      	uxth	r2, r3
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	b29b      	uxth	r3, r3
 8005822:	029b      	lsls	r3, r3, #10
 8005824:	b29b      	uxth	r3, r3
 8005826:	4313      	orrs	r3, r2
 8005828:	b29b      	uxth	r3, r3
 800582a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005832:	b29a      	uxth	r2, r3
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	e050      	b.n	80058dc <USB_EPStartXfer+0x8a8>
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <USB_EPStartXfer+0x824>
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005850:	b29a      	uxth	r2, r3
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	e041      	b.n	80058dc <USB_EPStartXfer+0x8a8>
 8005858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585c:	085b      	lsrs	r3, r3, #1
 800585e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <USB_EPStartXfer+0x844>
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005872:	3301      	adds	r3, #1
 8005874:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29a      	uxth	r2, r3
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005882:	b29b      	uxth	r3, r3
 8005884:	029b      	lsls	r3, r3, #10
 8005886:	b29b      	uxth	r3, r3
 8005888:	4313      	orrs	r3, r2
 800588a:	b29a      	uxth	r2, r3
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e024      	b.n	80058dc <USB_EPStartXfer+0x8a8>
 8005892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d11c      	bne.n	80058dc <USB_EPStartXfer+0x8a8>
 80058a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b6:	4413      	add	r3, r2
 80058b8:	643b      	str	r3, [r7, #64]	; 0x40
 80058ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	011a      	lsls	r2, r3, #4
 80058c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	895b      	ldrh	r3, [r3, #10]
 80058e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6959      	ldr	r1, [r3, #20]
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005902:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005906:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	f001 f881 	bl	8006a12 <USB_WritePMA>
 8005910:	e227      	b.n	8005d62 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005948:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800594c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800597e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800598a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005998:	b29b      	uxth	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800599e:	4413      	add	r3, r2
 80059a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	011a      	lsls	r2, r3, #4
 80059b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b2:	4413      	add	r3, r2
 80059b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80059ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	891b      	ldrh	r3, [r3, #8]
 80059d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6959      	ldr	r1, [r3, #20]
 80059e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059f2:	6800      	ldr	r0, [r0, #0]
 80059f4:	f001 f80d 	bl	8006a12 <USB_WritePMA>
 80059f8:	e1b3      	b.n	8005d62 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80059fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6a1a      	ldr	r2, [r3, #32]
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0a:	1ad2      	subs	r2, r2, r3
 8005a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80c6 	beq.w	8005bcc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d177      	bne.n	8005b4c <USB_EPStartXfer+0xb18>
 8005a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a7c:	4413      	add	r3, r2
 8005a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	011a      	lsls	r2, r3, #4
 8005a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a90:	4413      	add	r3, r2
 8005a92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a96:	667b      	str	r3, [r7, #100]	; 0x64
 8005a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aac:	2b3e      	cmp	r3, #62	; 0x3e
 8005aae:	d921      	bls.n	8005af4 <USB_EPStartXfer+0xac0>
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d104      	bne.n	8005ad0 <USB_EPStartXfer+0xa9c>
 8005ac6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005aca:	3b01      	subs	r3, #1
 8005acc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	e050      	b.n	8005b96 <USB_EPStartXfer+0xb62>
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <USB_EPStartXfer+0xade>
 8005afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	e041      	b.n	8005b96 <USB_EPStartXfer+0xb62>
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <USB_EPStartXfer+0xafe>
 8005b28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	029b      	lsls	r3, r3, #10
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e024      	b.n	8005b96 <USB_EPStartXfer+0xb62>
 8005b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d11c      	bne.n	8005b96 <USB_EPStartXfer+0xb62>
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b70:	4413      	add	r3, r2
 8005b72:	673b      	str	r3, [r7, #112]	; 0x70
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	011a      	lsls	r2, r3, #4
 8005b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b84:	4413      	add	r3, r2
 8005b86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	895b      	ldrh	r3, [r3, #10]
 8005ba2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6959      	ldr	r1, [r3, #20]
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005bbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bc4:	6800      	ldr	r0, [r0, #0]
 8005bc6:	f000 ff24 	bl	8006a12 <USB_WritePMA>
 8005bca:	e0ca      	b.n	8005d62 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d177      	bne.n	8005ccc <USB_EPStartXfer+0xc98>
 8005bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bfc:	4413      	add	r3, r2
 8005bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	011a      	lsls	r2, r3, #4
 8005c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c10:	4413      	add	r3, r2
 8005c12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c16:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c2e:	d921      	bls.n	8005c74 <USB_EPStartXfer+0xc40>
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <USB_EPStartXfer+0xc1c>
 8005c46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	029b      	lsls	r3, r3, #10
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	4313      	orrs	r3, r2
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e05c      	b.n	8005d2e <USB_EPStartXfer+0xcfa>
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <USB_EPStartXfer+0xc5e>
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e04d      	b.n	8005d2e <USB_EPStartXfer+0xcfa>
 8005c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <USB_EPStartXfer+0xc7e>
 8005ca8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cac:	3301      	adds	r3, #1
 8005cae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	029b      	lsls	r3, r3, #10
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	e030      	b.n	8005d2e <USB_EPStartXfer+0xcfa>
 8005ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d128      	bne.n	8005d2e <USB_EPStartXfer+0xcfa>
 8005cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d00:	4413      	add	r3, r2
 8005d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	011a      	lsls	r2, r3, #4
 8005d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d18:	4413      	add	r3, r2
 8005d1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	891b      	ldrh	r3, [r3, #8]
 8005d3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6959      	ldr	r1, [r3, #20]
 8005d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d5c:	6800      	ldr	r0, [r0, #0]
 8005d5e:	f000 fe58 	bl	8006a12 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d88:	817b      	strh	r3, [r7, #10]
 8005d8a:	897b      	ldrh	r3, [r7, #10]
 8005d8c:	f083 0310 	eor.w	r3, r3, #16
 8005d90:	817b      	strh	r3, [r7, #10]
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	f083 0320 	eor.w	r3, r3, #32
 8005d98:	817b      	strh	r3, [r7, #10]
 8005d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	441a      	add	r2, r3
 8005db4:	897b      	ldrh	r3, [r7, #10]
 8005db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	8013      	strh	r3, [r2, #0]
 8005dca:	f000 bcde 	b.w	800678a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	7b1b      	ldrb	r3, [r3, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f040 80bb 	bne.w	8005f56 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d917      	bls.n	8005e2c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1c:	1ad2      	subs	r2, r2, r3
 8005e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	619a      	str	r2, [r3, #24]
 8005e2a:	e00e      	b.n	8005e4a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2200      	movs	r2, #0
 8005e48:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e6e:	4413      	add	r3, r2
 8005e70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	011a      	lsls	r2, r3, #4
 8005e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e86:	4413      	add	r3, r2
 8005e88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8005eaa:	d924      	bls.n	8005ef6 <USB_EPStartXfer+0xec2>
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <USB_EPStartXfer+0xe98>
 8005ec2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	029b      	lsls	r3, r3, #10
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	f000 bc10 	b.w	8006716 <USB_EPStartXfer+0x16e2>
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10c      	bne.n	8005f18 <USB_EPStartXfer+0xee4>
 8005efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	e3fe      	b.n	8006716 <USB_EPStartXfer+0x16e2>
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <USB_EPStartXfer+0xf04>
 8005f2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f32:	3301      	adds	r3, #1
 8005f34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	029b      	lsls	r3, r3, #10
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	e3df      	b.n	8006716 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	78db      	ldrb	r3, [r3, #3]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	f040 8218 	bne.w	8006398 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 809d 	bne.w	80060b4 <USB_EPStartXfer+0x1080>
 8005f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	011a      	lsls	r2, r3, #4
 8005fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe2:	d92b      	bls.n	800603c <USB_EPStartXfer+0x1008>
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <USB_EPStartXfer+0xfe0>
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600e:	3b01      	subs	r3, #1
 8006010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006020:	b29b      	uxth	r3, r3
 8006022:	029b      	lsls	r3, r3, #10
 8006024:	b29b      	uxth	r3, r3
 8006026:	4313      	orrs	r3, r2
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	e070      	b.n	800611e <USB_EPStartXfer+0x10ea>
 800603c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10c      	bne.n	8006066 <USB_EPStartXfer+0x1032>
 800604c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605c:	b29a      	uxth	r2, r3
 800605e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006062:	801a      	strh	r2, [r3, #0]
 8006064:	e05b      	b.n	800611e <USB_EPStartXfer+0x10ea>
 8006066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d004      	beq.n	8006096 <USB_EPStartXfer+0x1062>
 800608c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006090:	3301      	adds	r3, #1
 8006092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29a      	uxth	r2, r3
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	029b      	lsls	r3, r3, #10
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e034      	b.n	800611e <USB_EPStartXfer+0x10ea>
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d12c      	bne.n	800611e <USB_EPStartXfer+0x10ea>
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060e8:	4413      	add	r3, r2
 80060ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	011a      	lsls	r2, r3, #4
 80060fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006100:	4413      	add	r3, r2
 8006102:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800610a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	b29a      	uxth	r2, r3
 8006118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800612c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 809d 	bne.w	8006278 <USB_EPStartXfer+0x1244>
 800613e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615a:	b29b      	uxth	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006162:	4413      	add	r3, r2
 8006164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800617a:	4413      	add	r3, r2
 800617c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006190:	b29a      	uxth	r2, r3
 8006192:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b3e      	cmp	r3, #62	; 0x3e
 80061a6:	d92b      	bls.n	8006200 <USB_EPStartXfer+0x11cc>
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <USB_EPStartXfer+0x11a4>
 80061ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d2:	3b01      	subs	r3, #1
 80061d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	029b      	lsls	r3, r3, #10
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e069      	b.n	80062d4 <USB_EPStartXfer+0x12a0>
 8006200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <USB_EPStartXfer+0x11f6>
 8006210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006220:	b29a      	uxth	r2, r3
 8006222:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	e054      	b.n	80062d4 <USB_EPStartXfer+0x12a0>
 800622a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800623c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <USB_EPStartXfer+0x1226>
 8006250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006254:	3301      	adds	r3, #1
 8006256:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800625a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29a      	uxth	r2, r3
 8006262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006266:	b29b      	uxth	r3, r3
 8006268:	029b      	lsls	r3, r3, #10
 800626a:	b29b      	uxth	r3, r3
 800626c:	4313      	orrs	r3, r2
 800626e:	b29a      	uxth	r2, r3
 8006270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	e02d      	b.n	80062d4 <USB_EPStartXfer+0x12a0>
 8006278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d125      	bne.n	80062d4 <USB_EPStartXfer+0x12a0>
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006296:	b29b      	uxth	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800629e:	4413      	add	r3, r2
 80062a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	011a      	lsls	r2, r3, #4
 80062b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062b6:	4413      	add	r3, r2
 80062b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062d2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80062d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8218 	beq.w	8006716 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80062e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006306:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800630a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <USB_EPStartXfer+0x12ea>
 8006312:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800631e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006326:	2b00      	cmp	r3, #0
 8006328:	f040 81f5 	bne.w	8006716 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800632c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	f040 81ee 	bne.w	8006716 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006360:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]
 8006396:	e1be      	b.n	8006716 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	78db      	ldrb	r3, [r3, #3]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	f040 81b4 	bne.w	8006712 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d917      	bls.n	80063f6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80063c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80063d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	619a      	str	r2, [r3, #24]
 80063f4:	e00e      	b.n	8006414 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80063f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2200      	movs	r2, #0
 8006412:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 8085 	bne.w	8006530 <USB_EPStartXfer+0x14fc>
 8006426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006442:	b29b      	uxth	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800644a:	4413      	add	r3, r2
 800644c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	011a      	lsls	r2, r3, #4
 800645e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006462:	4413      	add	r3, r2
 8006464:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800646c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006478:	b29a      	uxth	r2, r3
 800647a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006484:	2b3e      	cmp	r3, #62	; 0x3e
 8006486:	d923      	bls.n	80064d0 <USB_EPStartXfer+0x149c>
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <USB_EPStartXfer+0x1474>
 800649e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a2:	3b01      	subs	r3, #1
 80064a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	029b      	lsls	r3, r3, #10
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	4313      	orrs	r3, r2
 80064bc:	b29b      	uxth	r3, r3
 80064be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	e060      	b.n	8006592 <USB_EPStartXfer+0x155e>
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10c      	bne.n	80064f2 <USB_EPStartXfer+0x14be>
 80064d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	e04f      	b.n	8006592 <USB_EPStartXfer+0x155e>
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f6:	085b      	lsrs	r3, r3, #1
 80064f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <USB_EPStartXfer+0x14de>
 8006508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800650c:	3301      	adds	r3, #1
 800650e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651e:	b29b      	uxth	r3, r3
 8006520:	029b      	lsls	r3, r3, #10
 8006522:	b29b      	uxth	r3, r3
 8006524:	4313      	orrs	r3, r2
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e030      	b.n	8006592 <USB_EPStartXfer+0x155e>
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d128      	bne.n	8006592 <USB_EPStartXfer+0x155e>
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800654e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006564:	4413      	add	r3, r2
 8006566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	011a      	lsls	r2, r3, #4
 8006578:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800657c:	4413      	add	r3, r2
 800657e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006582:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658a:	b29a      	uxth	r2, r3
 800658c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f040 8085 	bne.w	80066bc <USB_EPStartXfer+0x1688>
 80065b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065d6:	4413      	add	r3, r2
 80065d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	011a      	lsls	r2, r3, #4
 80065ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065ee:	4413      	add	r3, r2
 80065f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006604:	b29a      	uxth	r2, r3
 8006606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006610:	2b3e      	cmp	r3, #62	; 0x3e
 8006612:	d923      	bls.n	800665c <USB_EPStartXfer+0x1628>
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <USB_EPStartXfer+0x1600>
 800662a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800662e:	3b01      	subs	r3, #1
 8006630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006634:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29a      	uxth	r2, r3
 800663c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006640:	b29b      	uxth	r3, r3
 8006642:	029b      	lsls	r3, r3, #10
 8006644:	b29b      	uxth	r3, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	b29b      	uxth	r3, r3
 800664a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006652:	b29a      	uxth	r2, r3
 8006654:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	e05c      	b.n	8006716 <USB_EPStartXfer+0x16e2>
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10c      	bne.n	800667e <USB_EPStartXfer+0x164a>
 8006664:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006674:	b29a      	uxth	r2, r3
 8006676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	e04b      	b.n	8006716 <USB_EPStartXfer+0x16e2>
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <USB_EPStartXfer+0x166a>
 8006694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006698:	3301      	adds	r3, #1
 800669a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800669e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	029b      	lsls	r3, r3, #10
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	4313      	orrs	r3, r2
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e02c      	b.n	8006716 <USB_EPStartXfer+0x16e2>
 80066bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d124      	bne.n	8006716 <USB_EPStartXfer+0x16e2>
 80066cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066da:	b29b      	uxth	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066e2:	4413      	add	r3, r2
 80066e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	011a      	lsls	r2, r3, #4
 80066f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066fa:	4413      	add	r3, r2
 80066fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006700:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	b29a      	uxth	r2, r3
 800670a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	e001      	b.n	8006716 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e03a      	b.n	800678c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006740:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006744:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006748:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800674c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006750:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006754:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	441a      	add	r2, r3
 8006772:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006786:	b29b      	uxth	r3, r3
 8006788:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d020      	beq.n	80067ea <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067be:	81bb      	strh	r3, [r7, #12]
 80067c0:	89bb      	ldrh	r3, [r7, #12]
 80067c2:	f083 0310 	eor.w	r3, r3, #16
 80067c6:	81bb      	strh	r3, [r7, #12]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	441a      	add	r2, r3
 80067d2:	89bb      	ldrh	r3, [r7, #12]
 80067d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	8013      	strh	r3, [r2, #0]
 80067e8:	e01f      	b.n	800682a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006800:	81fb      	strh	r3, [r7, #14]
 8006802:	89fb      	ldrh	r3, [r7, #14]
 8006804:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006808:	81fb      	strh	r3, [r7, #14]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	89fb      	ldrh	r3, [r7, #14]
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006836:	b480      	push	{r7}
 8006838:	b087      	sub	sp, #28
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	7b1b      	ldrb	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f040 809d 	bne.w	8006984 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d04c      	beq.n	80068ec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	823b      	strh	r3, [r7, #16]
 8006860:	8a3b      	ldrh	r3, [r7, #16]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <USB_EPClearStall+0x6c>
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006880:	81fb      	strh	r3, [r7, #14]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	89fb      	ldrh	r3, [r7, #14]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	78db      	ldrb	r3, [r3, #3]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d06c      	beq.n	8006984 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c0:	81bb      	strh	r3, [r7, #12]
 80068c2:	89bb      	ldrh	r3, [r7, #12]
 80068c4:	f083 0320 	eor.w	r3, r3, #32
 80068c8:	81bb      	strh	r3, [r7, #12]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	89bb      	ldrh	r3, [r7, #12]
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
 80068ea:	e04b      	b.n	8006984 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	82fb      	strh	r3, [r7, #22]
 80068fa:	8afb      	ldrh	r3, [r7, #22]
 80068fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01b      	beq.n	800693c <USB_EPClearStall+0x106>
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	82bb      	strh	r3, [r7, #20]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	8abb      	ldrh	r3, [r7, #20]
 8006928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006938:	b29b      	uxth	r3, r3
 800693a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	827b      	strh	r3, [r7, #18]
 8006954:	8a7b      	ldrh	r3, [r7, #18]
 8006956:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800695a:	827b      	strh	r3, [r7, #18]
 800695c:	8a7b      	ldrh	r3, [r7, #18]
 800695e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006962:	827b      	strh	r3, [r7, #18]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	441a      	add	r2, r3
 800696e:	8a7b      	ldrh	r3, [r7, #18]
 8006970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006980:	b29b      	uxth	r3, r3
 8006982:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2280      	movs	r2, #128	; 0x80
 80069a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr

080069b6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr

080069ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80069f0:	68fb      	ldr	r3, [r7, #12]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b08b      	sub	sp, #44	; 0x2c
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	461a      	mov	r2, r3
 8006a20:	460b      	mov	r3, r1
 8006a22:	80fb      	strh	r3, [r7, #6]
 8006a24:	4613      	mov	r3, r2
 8006a26:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a28:	88bb      	ldrh	r3, [r7, #4]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	005a      	lsls	r2, r3, #1
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a44:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4a:	e01e      	b.n	8006a8a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3301      	adds	r3, #1
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	b21a      	sxth	r2, r3
 8006a5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	b21b      	sxth	r3, r3
 8006a64:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	8a7a      	ldrh	r2, [r7, #18]
 8006a6a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	3302      	adds	r3, #2
 8006a70:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	3302      	adds	r3, #2
 8006a76:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	3301      	adds	r3, #1
 8006a82:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	3b01      	subs	r3, #1
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1dd      	bne.n	8006a4c <USB_WritePMA+0x3a>
  }
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	372c      	adds	r7, #44	; 0x2c
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr

08006a9c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b08b      	sub	sp, #44	; 0x2c
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	460b      	mov	r3, r1
 8006aac:	80fb      	strh	r3, [r7, #6]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ab2:	88bb      	ldrh	r3, [r7, #4]
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	005a      	lsls	r2, r3, #1
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ace:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad4:	e01b      	b.n	8006b0e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	3302      	adds	r3, #2
 8006ae2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	0a1b      	lsrs	r3, r3, #8
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	3301      	adds	r3, #1
 8006b00:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	3302      	adds	r3, #2
 8006b06:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e0      	bne.n	8006ad6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b14:	88bb      	ldrh	r3, [r7, #4]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	701a      	strb	r2, [r3, #0]
  }
}
 8006b30:	bf00      	nop
 8006b32:	372c      	adds	r7, #44	; 0x2c
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7c1b      	ldrb	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d115      	bne.n	8006b7e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b56:	2202      	movs	r2, #2
 8006b58:	2181      	movs	r1, #129	; 0x81
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 fecd 	bl	80088fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 fec3 	bl	80088fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006b7c:	e012      	b.n	8006ba4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b7e:	2340      	movs	r3, #64	; 0x40
 8006b80:	2202      	movs	r2, #2
 8006b82:	2181      	movs	r1, #129	; 0x81
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 feb8 	bl	80088fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b90:	2340      	movs	r3, #64	; 0x40
 8006b92:	2202      	movs	r2, #2
 8006b94:	2101      	movs	r1, #1
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 feaf 	bl	80088fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ba4:	2308      	movs	r3, #8
 8006ba6:	2203      	movs	r2, #3
 8006ba8:	2182      	movs	r1, #130	; 0x82
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 fea5 	bl	80088fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bb6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bba:	f001 ffc5 	bl	8008b48 <USBD_static_malloc>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d102      	bne.n	8006bd6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
 8006bd4:	e026      	b.n	8006c24 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7c1b      	ldrb	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 ff65 	bl	8008adc <USBD_LL_PrepareReceive>
 8006c12:	e007      	b.n	8006c24 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 ff5c 	bl	8008adc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c3e:	2181      	movs	r1, #129	; 0x81
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 fe80 	bl	8008946 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fe79 	bl	8008946 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c5c:	2182      	movs	r1, #130	; 0x82
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fe71 	bl	8008946 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00e      	beq.n	8006c92 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 ff6b 	bl	8008b60 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d039      	beq.n	8006d3a <USBD_CDC_Setup+0x9e>
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d17f      	bne.n	8006dca <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	88db      	ldrh	r3, [r3, #6]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d029      	beq.n	8006d26 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b25b      	sxtb	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	da11      	bge.n	8006d00 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006ce8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	88d2      	ldrh	r2, [r2, #6]
 8006cee:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cf0:	6939      	ldr	r1, [r7, #16]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	88db      	ldrh	r3, [r3, #6]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fa24 	bl	8008146 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006cfe:	e06b      	b.n	8006dd8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	785a      	ldrb	r2, [r3, #1]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	88db      	ldrh	r3, [r3, #6]
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d16:	6939      	ldr	r1, [r7, #16]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	88db      	ldrh	r3, [r3, #6]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 fa3f 	bl	80081a2 <USBD_CtlPrepareRx>
      break;
 8006d24:	e058      	b.n	8006dd8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	7850      	ldrb	r0, [r2, #1]
 8006d32:	2200      	movs	r2, #0
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	4798      	blx	r3
      break;
 8006d38:	e04e      	b.n	8006dd8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b0b      	cmp	r3, #11
 8006d40:	d02e      	beq.n	8006da0 <USBD_CDC_Setup+0x104>
 8006d42:	2b0b      	cmp	r3, #11
 8006d44:	dc38      	bgt.n	8006db8 <USBD_CDC_Setup+0x11c>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <USBD_CDC_Setup+0xb4>
 8006d4a:	2b0a      	cmp	r3, #10
 8006d4c:	d014      	beq.n	8006d78 <USBD_CDC_Setup+0xdc>
 8006d4e:	e033      	b.n	8006db8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d107      	bne.n	8006d6a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d5a:	f107 030c 	add.w	r3, r7, #12
 8006d5e:	2202      	movs	r2, #2
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 f9ef 	bl	8008146 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d68:	e02e      	b.n	8006dc8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f980 	bl	8008072 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d72:	2302      	movs	r3, #2
 8006d74:	75fb      	strb	r3, [r7, #23]
          break;
 8006d76:	e027      	b.n	8006dc8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d107      	bne.n	8006d92 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d82:	f107 030f 	add.w	r3, r7, #15
 8006d86:	2201      	movs	r2, #1
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f9db 	bl	8008146 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d90:	e01a      	b.n	8006dc8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 f96c 	bl	8008072 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d9e:	e013      	b.n	8006dc8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d00d      	beq.n	8006dc6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 f960 	bl	8008072 <USBD_CtlError>
            ret = USBD_FAIL;
 8006db2:	2302      	movs	r3, #2
 8006db4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006db6:	e006      	b.n	8006dc6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 f959 	bl	8008072 <USBD_CtlError>
          ret = USBD_FAIL;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	75fb      	strb	r3, [r7, #23]
          break;
 8006dc4:	e000      	b.n	8006dc8 <USBD_CDC_Setup+0x12c>
          break;
 8006dc6:	bf00      	nop
      }
      break;
 8006dc8:	e006      	b.n	8006dd8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f950 	bl	8008072 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd6:	bf00      	nop
  }

  return ret;
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dfc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d03a      	beq.n	8006e7e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	331c      	adds	r3, #28
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d029      	beq.n	8006e72 <USBD_CDC_DataIn+0x90>
 8006e1e:	78fa      	ldrb	r2, [r7, #3]
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	331c      	adds	r3, #28
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	78f9      	ldrb	r1, [r7, #3]
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	460b      	mov	r3, r1
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	4403      	add	r3, r0
 8006e3e:	3338      	adds	r3, #56	; 0x38
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e46:	fb01 f303 	mul.w	r3, r1, r3
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d110      	bne.n	8006e72 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e50:	78fa      	ldrb	r2, [r7, #3]
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	331c      	adds	r3, #28
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e64:	78f9      	ldrb	r1, [r7, #3]
 8006e66:	2300      	movs	r3, #0
 8006e68:	2200      	movs	r2, #0
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fe13 	bl	8008a96 <USBD_LL_Transmit>
 8006e70:	e003      	b.n	8006e7a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e000      	b.n	8006e80 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006e7e:	2302      	movs	r3, #2
  }
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e9c:	78fb      	ldrb	r3, [r7, #3]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 fe3e 	bl	8008b22 <USBD_LL_GetRxDataSize>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00d      	beq.n	8006ed4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ecc:	4611      	mov	r1, r2
 8006ece:	4798      	blx	r3

    return USBD_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e000      	b.n	8006ed6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ed4:	2302      	movs	r3, #2
  }
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <USBD_CDC_EP0_RxReady+0x46>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006efe:	2bff      	cmp	r3, #255	; 0xff
 8006f00:	d010      	beq.n	8006f24 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f10:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f18:	b292      	uxth	r2, r2
 8006f1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	22ff      	movs	r2, #255	; 0xff
 8006f20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2243      	movs	r2, #67	; 0x43
 8006f3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f3e:	4b03      	ldr	r3, [pc, #12]	; (8006f4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20000098 	.word	0x20000098

08006f50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2243      	movs	r2, #67	; 0x43
 8006f5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006f5e:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20000054 	.word	0x20000054

08006f70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2243      	movs	r2, #67	; 0x43
 8006f7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006f7e:	4b03      	ldr	r3, [pc, #12]	; (8006f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	200000dc 	.word	0x200000dc

08006f90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	220a      	movs	r2, #10
 8006f9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f9e:	4b03      	ldr	r3, [pc, #12]	; (8006fac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20000010 	.word	0x20000010

08006fb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006fba:	2302      	movs	r3, #2
 8006fbc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr

08006fdc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr

0800700e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr

08007034 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007042:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d01c      	beq.n	8007088 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007054:	2b00      	cmp	r3, #0
 8007056:	d115      	bne.n	8007084 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007076:	b29b      	uxth	r3, r3
 8007078:	2181      	movs	r1, #129	; 0x81
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fd0b 	bl	8008a96 <USBD_LL_Transmit>

      return USBD_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	e002      	b.n	800708a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007084:	2301      	movs	r3, #1
 8007086:	e000      	b.n	800708a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007088:	2302      	movs	r3, #2
  }
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d017      	beq.n	80070dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7c1b      	ldrb	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d109      	bne.n	80070c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070be:	2101      	movs	r1, #1
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 fd0b 	bl	8008adc <USBD_LL_PrepareReceive>
 80070c6:	e007      	b.n	80070d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ce:	2340      	movs	r3, #64	; 0x40
 80070d0:	2101      	movs	r1, #1
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 fd02 	bl	8008adc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	e000      	b.n	80070de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80070dc:	2302      	movs	r3, #2
  }
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	4613      	mov	r3, r2
 80070f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80070fc:	4814      	ldr	r0, [pc, #80]	; (8007150 <USBD_Init+0x68>)
 80070fe:	f001 fe31 	bl	8008d64 <iprintf>
 8007102:	4814      	ldr	r0, [pc, #80]	; (8007154 <USBD_Init+0x6c>)
 8007104:	f001 fe2e 	bl	8008d64 <iprintf>
 8007108:	200a      	movs	r0, #10
 800710a:	f001 fe3d 	bl	8008d88 <putchar>
#endif
    return USBD_FAIL;
 800710e:	2302      	movs	r3, #2
 8007110:	e01a      	b.n	8007148 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	79fa      	ldrb	r2, [r7, #7]
 800713e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f001 fb65 	bl	8008810 <USBD_LL_Init>

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	08009af0 	.word	0x08009af0
 8007154:	08009af8 	.word	0x08009af8

08007158 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d006      	beq.n	800717a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
 8007178:	e00a      	b.n	8007190 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800717a:	4808      	ldr	r0, [pc, #32]	; (800719c <USBD_RegisterClass+0x44>)
 800717c:	f001 fdf2 	bl	8008d64 <iprintf>
 8007180:	4807      	ldr	r0, [pc, #28]	; (80071a0 <USBD_RegisterClass+0x48>)
 8007182:	f001 fdef 	bl	8008d64 <iprintf>
 8007186:	200a      	movs	r0, #10
 8007188:	f001 fdfe 	bl	8008d88 <putchar>
#endif
    status = USBD_FAIL;
 800718c:	2302      	movs	r3, #2
 800718e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	08009af0 	.word	0x08009af0
 80071a0:	08009b10 	.word	0x08009b10

080071a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fb89 	bl	80088c4 <USBD_LL_Start>

  return USBD_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr

080071d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071dc:	2302      	movs	r3, #2
 80071de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00c      	beq.n	8007204 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	78fa      	ldrb	r2, [r7, #3]
 80071f4:	4611      	mov	r1, r2
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	4611      	mov	r1, r2
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3

  return USBD_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fed7 	bl	8007ffa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	2b02      	cmp	r3, #2
 800726e:	d016      	beq.n	800729e <USBD_LL_SetupStage+0x6a>
 8007270:	2b02      	cmp	r3, #2
 8007272:	d81c      	bhi.n	80072ae <USBD_LL_SetupStage+0x7a>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <USBD_LL_SetupStage+0x4a>
 8007278:	2b01      	cmp	r3, #1
 800727a:	d008      	beq.n	800728e <USBD_LL_SetupStage+0x5a>
 800727c:	e017      	b.n	80072ae <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f9ca 	bl	8007620 <USBD_StdDevReq>
      break;
 800728c:	e01a      	b.n	80072c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fa2c 	bl	80076f4 <USBD_StdItfReq>
      break;
 800729c:	e012      	b.n	80072c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fa6c 	bl	8007784 <USBD_StdEPReq>
      break;
 80072ac:	e00a      	b.n	80072c4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 fb61 	bl	8008984 <USBD_LL_StallEP>
      break;
 80072c2:	bf00      	nop
  }

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b086      	sub	sp, #24
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	460b      	mov	r3, r1
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d14b      	bne.n	800737a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d134      	bne.n	800735e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d919      	bls.n	8007334 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	1ad2      	subs	r2, r2, r3
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007316:	429a      	cmp	r2, r3
 8007318:	d203      	bcs.n	8007322 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800731e:	b29b      	uxth	r3, r3
 8007320:	e002      	b.n	8007328 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007326:	b29b      	uxth	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 ff56 	bl	80081de <USBD_CtlContinueRx>
 8007332:	e038      	b.n	80073a6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007346:	2b03      	cmp	r3, #3
 8007348:	d105      	bne.n	8007356 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 ff53 	bl	8008202 <USBD_CtlSendStatus>
 800735c:	e023      	b.n	80073a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007364:	2b05      	cmp	r3, #5
 8007366:	d11e      	bne.n	80073a6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007370:	2100      	movs	r1, #0
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f001 fb06 	bl	8008984 <USBD_LL_StallEP>
 8007378:	e015      	b.n	80073a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800738c:	2b03      	cmp	r3, #3
 800738e:	d108      	bne.n	80073a2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	7afa      	ldrb	r2, [r7, #11]
 800739a:	4611      	mov	r1, r2
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	4798      	blx	r3
 80073a0:	e001      	b.n	80073a6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073a2:	2302      	movs	r3, #2
 80073a4:	e000      	b.n	80073a8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	460b      	mov	r3, r1
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d17f      	bne.n	80074c4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3314      	adds	r3, #20
 80073c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d15c      	bne.n	800748e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d915      	bls.n	800740c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	1ad2      	subs	r2, r2, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fec0 	bl	800817e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073fe:	2300      	movs	r3, #0
 8007400:	2200      	movs	r2, #0
 8007402:	2100      	movs	r1, #0
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f001 fb69 	bl	8008adc <USBD_LL_PrepareReceive>
 800740a:	e04e      	b.n	80074aa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	6912      	ldr	r2, [r2, #16]
 8007414:	fbb3 f1f2 	udiv	r1, r3, r2
 8007418:	fb01 f202 	mul.w	r2, r1, r2
 800741c:	1a9b      	subs	r3, r3, r2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d11c      	bne.n	800745c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	689a      	ldr	r2, [r3, #8]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800742a:	429a      	cmp	r2, r3
 800742c:	d316      	bcc.n	800745c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007438:	429a      	cmp	r2, r3
 800743a:	d20f      	bcs.n	800745c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800743c:	2200      	movs	r2, #0
 800743e:	2100      	movs	r1, #0
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fe9c 	bl	800817e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800744e:	2300      	movs	r3, #0
 8007450:	2200      	movs	r2, #0
 8007452:	2100      	movs	r1, #0
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f001 fb41 	bl	8008adc <USBD_LL_PrepareReceive>
 800745a:	e026      	b.n	80074aa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800746e:	2b03      	cmp	r3, #3
 8007470:	d105      	bne.n	800747e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800747e:	2180      	movs	r1, #128	; 0x80
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f001 fa7f 	bl	8008984 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fece 	bl	8008228 <USBD_CtlReceiveStatus>
 800748c:	e00d      	b.n	80074aa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007494:	2b04      	cmp	r3, #4
 8007496:	d004      	beq.n	80074a2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d103      	bne.n	80074aa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074a2:	2180      	movs	r1, #128	; 0x80
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f001 fa6d 	bl	8008984 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d11d      	bne.n	80074f0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff fe81 	bl	80071bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074c2:	e015      	b.n	80074f0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00d      	beq.n	80074ec <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d108      	bne.n	80074ec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	7afa      	ldrb	r2, [r7, #11]
 80074e4:	4611      	mov	r1, r2
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	4798      	blx	r3
 80074ea:	e001      	b.n	80074f0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074ec:	2302      	movs	r3, #2
 80074ee:	e000      	b.n	80074f2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007502:	2340      	movs	r3, #64	; 0x40
 8007504:	2200      	movs	r2, #0
 8007506:	2100      	movs	r1, #0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 f9f6 	bl	80088fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2240      	movs	r2, #64	; 0x40
 800751a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800751e:	2340      	movs	r3, #64	; 0x40
 8007520:	2200      	movs	r2, #0
 8007522:	2180      	movs	r1, #128	; 0x80
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f9e8 	bl	80088fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2240      	movs	r2, #64	; 0x40
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6852      	ldr	r2, [r2, #4]
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	4611      	mov	r1, r2
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
  }

  return USBD_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	78fa      	ldrb	r2, [r7, #3]
 800758c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr

0800759a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2204      	movs	r2, #4
 80075b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr

080075c2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d105      	bne.n	80075e0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d10b      	bne.n	8007616 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d005      	beq.n	8007646 <USBD_StdDevReq+0x26>
 800763a:	2b40      	cmp	r3, #64	; 0x40
 800763c:	d84f      	bhi.n	80076de <USBD_StdDevReq+0xbe>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d009      	beq.n	8007656 <USBD_StdDevReq+0x36>
 8007642:	2b20      	cmp	r3, #32
 8007644:	d14b      	bne.n	80076de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
      break;
 8007654:	e048      	b.n	80076e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	2b09      	cmp	r3, #9
 800765c:	d839      	bhi.n	80076d2 <USBD_StdDevReq+0xb2>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <USBD_StdDevReq+0x44>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	080076b5 	.word	0x080076b5
 8007668:	080076c9 	.word	0x080076c9
 800766c:	080076d3 	.word	0x080076d3
 8007670:	080076bf 	.word	0x080076bf
 8007674:	080076d3 	.word	0x080076d3
 8007678:	08007697 	.word	0x08007697
 800767c:	0800768d 	.word	0x0800768d
 8007680:	080076d3 	.word	0x080076d3
 8007684:	080076ab 	.word	0x080076ab
 8007688:	080076a1 	.word	0x080076a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9dc 	bl	8007a4c <USBD_GetDescriptor>
          break;
 8007694:	e022      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fb3f 	bl	8007d1c <USBD_SetAddress>
          break;
 800769e:	e01d      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fb7e 	bl	8007da4 <USBD_SetConfig>
          break;
 80076a8:	e018      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fc07 	bl	8007ec0 <USBD_GetConfig>
          break;
 80076b2:	e013      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fc37 	bl	8007f2a <USBD_GetStatus>
          break;
 80076bc:	e00e      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fc65 	bl	8007f90 <USBD_SetFeature>
          break;
 80076c6:	e009      	b.n	80076dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fc74 	bl	8007fb8 <USBD_ClrFeature>
          break;
 80076d0:	e004      	b.n	80076dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fccc 	bl	8008072 <USBD_CtlError>
          break;
 80076da:	bf00      	nop
      }
      break;
 80076dc:	e004      	b.n	80076e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fcc6 	bl	8008072 <USBD_CtlError>
      break;
 80076e6:	bf00      	nop
  }

  return ret;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop

080076f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d005      	beq.n	800771a <USBD_StdItfReq+0x26>
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	d82e      	bhi.n	8007770 <USBD_StdItfReq+0x7c>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <USBD_StdItfReq+0x26>
 8007716:	2b20      	cmp	r3, #32
 8007718:	d12a      	bne.n	8007770 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007720:	3b01      	subs	r3, #1
 8007722:	2b02      	cmp	r3, #2
 8007724:	d81d      	bhi.n	8007762 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	889b      	ldrh	r3, [r3, #4]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d813      	bhi.n	8007758 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4798      	blx	r3
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88db      	ldrh	r3, [r3, #6]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d110      	bne.n	800776c <USBD_StdItfReq+0x78>
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10d      	bne.n	800776c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fd56 	bl	8008202 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007756:	e009      	b.n	800776c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fc89 	bl	8008072 <USBD_CtlError>
          break;
 8007760:	e004      	b.n	800776c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc84 	bl	8008072 <USBD_CtlError>
          break;
 800776a:	e000      	b.n	800776e <USBD_StdItfReq+0x7a>
          break;
 800776c:	bf00      	nop
      }
      break;
 800776e:	e004      	b.n	800777a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fc7d 	bl	8008072 <USBD_CtlError>
      break;
 8007778:	bf00      	nop
  }

  return USBD_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	889b      	ldrh	r3, [r3, #4]
 8007796:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	d007      	beq.n	80077b4 <USBD_StdEPReq+0x30>
 80077a4:	2b40      	cmp	r3, #64	; 0x40
 80077a6:	f200 8146 	bhi.w	8007a36 <USBD_StdEPReq+0x2b2>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <USBD_StdEPReq+0x40>
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	f040 8141 	bne.w	8007a36 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
      break;
 80077c2:	e13d      	b.n	8007a40 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d10a      	bne.n	80077e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	4798      	blx	r3
 80077de:	4603      	mov	r3, r0
 80077e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	e12d      	b.n	8007a42 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d007      	beq.n	80077fe <USBD_StdEPReq+0x7a>
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	f300 811b 	bgt.w	8007a2a <USBD_StdEPReq+0x2a6>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d072      	beq.n	80078de <USBD_StdEPReq+0x15a>
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d03a      	beq.n	8007872 <USBD_StdEPReq+0xee>
 80077fc:	e115      	b.n	8007a2a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007804:	2b02      	cmp	r3, #2
 8007806:	d002      	beq.n	800780e <USBD_StdEPReq+0x8a>
 8007808:	2b03      	cmp	r3, #3
 800780a:	d015      	beq.n	8007838 <USBD_StdEPReq+0xb4>
 800780c:	e02b      	b.n	8007866 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00c      	beq.n	800782e <USBD_StdEPReq+0xaa>
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b80      	cmp	r3, #128	; 0x80
 8007818:	d009      	beq.n	800782e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 f8b0 	bl	8008984 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007824:	2180      	movs	r1, #128	; 0x80
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 f8ac 	bl	8008984 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800782c:	e020      	b.n	8007870 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc1e 	bl	8008072 <USBD_CtlError>
              break;
 8007836:	e01b      	b.n	8007870 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	885b      	ldrh	r3, [r3, #2]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10e      	bne.n	800785e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <USBD_StdEPReq+0xda>
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d008      	beq.n	800785e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	88db      	ldrh	r3, [r3, #6]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f893 	bl	8008984 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fccf 	bl	8008202 <USBD_CtlSendStatus>

              break;
 8007864:	e004      	b.n	8007870 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fc02 	bl	8008072 <USBD_CtlError>
              break;
 800786e:	bf00      	nop
          }
          break;
 8007870:	e0e0      	b.n	8007a34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007878:	2b02      	cmp	r3, #2
 800787a:	d002      	beq.n	8007882 <USBD_StdEPReq+0xfe>
 800787c:	2b03      	cmp	r3, #3
 800787e:	d015      	beq.n	80078ac <USBD_StdEPReq+0x128>
 8007880:	e026      	b.n	80078d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00c      	beq.n	80078a2 <USBD_StdEPReq+0x11e>
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d009      	beq.n	80078a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 f876 	bl	8008984 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007898:	2180      	movs	r1, #128	; 0x80
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 f872 	bl	8008984 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078a0:	e01c      	b.n	80078dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fbe4 	bl	8008072 <USBD_CtlError>
              break;
 80078aa:	e017      	b.n	80078dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	885b      	ldrh	r3, [r3, #2]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d112      	bne.n	80078da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d004      	beq.n	80078c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 f87d 	bl	80089c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fc9a 	bl	8008202 <USBD_CtlSendStatus>
              }
              break;
 80078ce:	e004      	b.n	80078da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fbcd 	bl	8008072 <USBD_CtlError>
              break;
 80078d8:	e000      	b.n	80078dc <USBD_StdEPReq+0x158>
              break;
 80078da:	bf00      	nop
          }
          break;
 80078dc:	e0aa      	b.n	8007a34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d002      	beq.n	80078ee <USBD_StdEPReq+0x16a>
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d032      	beq.n	8007952 <USBD_StdEPReq+0x1ce>
 80078ec:	e097      	b.n	8007a1e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d007      	beq.n	8007904 <USBD_StdEPReq+0x180>
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b80      	cmp	r3, #128	; 0x80
 80078f8:	d004      	beq.n	8007904 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fbb8 	bl	8008072 <USBD_CtlError>
                break;
 8007902:	e091      	b.n	8007a28 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	da0b      	bge.n	8007924 <USBD_StdEPReq+0x1a0>
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3310      	adds	r3, #16
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	3304      	adds	r3, #4
 8007922:	e00b      	b.n	800793c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	3304      	adds	r3, #4
 800793c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2202      	movs	r2, #2
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fbfb 	bl	8008146 <USBD_CtlSendData>
              break;
 8007950:	e06a      	b.n	8007a28 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007956:	2b00      	cmp	r3, #0
 8007958:	da11      	bge.n	800797e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	3318      	adds	r3, #24
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d117      	bne.n	80079a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fb7b 	bl	8008072 <USBD_CtlError>
                  break;
 800797c:	e054      	b.n	8007a28 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb68 	bl	8008072 <USBD_CtlError>
                  break;
 80079a2:	e041      	b.n	8007a28 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da0b      	bge.n	80079c4 <USBD_StdEPReq+0x240>
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	3310      	adds	r3, #16
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	3304      	adds	r3, #4
 80079c2:	e00b      	b.n	80079dc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <USBD_StdEPReq+0x266>
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d103      	bne.n	80079f2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e00e      	b.n	8007a10 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f802 	bl	8008a00 <USBD_LL_IsStallEP>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2201      	movs	r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	e002      	b.n	8007a10 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2202      	movs	r2, #2
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fb95 	bl	8008146 <USBD_CtlSendData>
              break;
 8007a1c:	e004      	b.n	8007a28 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fb26 	bl	8008072 <USBD_CtlError>
              break;
 8007a26:	bf00      	nop
          }
          break;
 8007a28:	e004      	b.n	8007a34 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fb20 	bl	8008072 <USBD_CtlError>
          break;
 8007a32:	bf00      	nop
      }
      break;
 8007a34:	e004      	b.n	8007a40 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fb1a 	bl	8008072 <USBD_CtlError>
      break;
 8007a3e:	bf00      	nop
  }

  return ret;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b06      	cmp	r3, #6
 8007a6e:	f200 8128 	bhi.w	8007cc2 <USBD_GetDescriptor+0x276>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <USBD_GetDescriptor+0x2c>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007aad 	.word	0x08007aad
 8007a80:	08007aed 	.word	0x08007aed
 8007a84:	08007cc3 	.word	0x08007cc3
 8007a88:	08007cc3 	.word	0x08007cc3
 8007a8c:	08007c63 	.word	0x08007c63
 8007a90:	08007c8f 	.word	0x08007c8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7c12      	ldrb	r2, [r2, #16]
 8007aa0:	f107 0108 	add.w	r1, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
      break;
 8007aaa:	e112      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7c1b      	ldrb	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10d      	bne.n	8007ad0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	f107 0208 	add.w	r2, r7, #8
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	2202      	movs	r2, #2
 8007acc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ace:	e100      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	f107 0208 	add.w	r2, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	701a      	strb	r2, [r3, #0]
      break;
 8007aea:	e0f2      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	885b      	ldrh	r3, [r3, #2]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	f200 80ac 	bhi.w	8007c50 <USBD_GetDescriptor+0x204>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <USBD_GetDescriptor+0xb4>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b4d 	.word	0x08007b4d
 8007b08:	08007b81 	.word	0x08007b81
 8007b0c:	08007bb5 	.word	0x08007bb5
 8007b10:	08007be9 	.word	0x08007be9
 8007b14:	08007c1d 	.word	0x08007c1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	7c12      	ldrb	r2, [r2, #16]
 8007b30:	f107 0108 	add.w	r1, r7, #8
 8007b34:	4610      	mov	r0, r2
 8007b36:	4798      	blx	r3
 8007b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b3a:	e091      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa97 	bl	8008072 <USBD_CtlError>
            err++;
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	3301      	adds	r3, #1
 8007b48:	72fb      	strb	r3, [r7, #11]
          break;
 8007b4a:	e089      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7c12      	ldrb	r2, [r2, #16]
 8007b64:	f107 0108 	add.w	r1, r7, #8
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6e:	e077      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa7d 	bl	8008072 <USBD_CtlError>
            err++;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7e:	e06f      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7c12      	ldrb	r2, [r2, #16]
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ba2:	e05d      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa63 	bl	8008072 <USBD_CtlError>
            err++;
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bb2:	e055      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
 8007bcc:	f107 0108 	add.w	r1, r7, #8
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bd6:	e043      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa49 	bl	8008072 <USBD_CtlError>
            err++;
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	3301      	adds	r3, #1
 8007be4:	72fb      	strb	r3, [r7, #11]
          break;
 8007be6:	e03b      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	7c12      	ldrb	r2, [r2, #16]
 8007c00:	f107 0108 	add.w	r1, r7, #8
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0a:	e029      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa2f 	bl	8008072 <USBD_CtlError>
            err++;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	3301      	adds	r3, #1
 8007c18:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1a:	e021      	b.n	8007c60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3e:	e00f      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa15 	bl	8008072 <USBD_CtlError>
            err++;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4e:	e007      	b.n	8007c60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa0d 	bl	8008072 <USBD_CtlError>
          err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c5e:	e038      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
 8007c60:	e037      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7c1b      	ldrb	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c72:	f107 0208 	add.w	r2, r7, #8
 8007c76:	4610      	mov	r0, r2
 8007c78:	4798      	blx	r3
 8007c7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c7c:	e029      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f9f6 	bl	8008072 <USBD_CtlError>
        err++;
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c8c:	e021      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	7c1b      	ldrb	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10d      	bne.n	8007cb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	f107 0208 	add.w	r2, r7, #8
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	4798      	blx	r3
 8007ca6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	2207      	movs	r2, #7
 8007cae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cb0:	e00f      	b.n	8007cd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f9dc 	bl	8008072 <USBD_CtlError>
        err++;
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc0:	e007      	b.n	8007cd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f9d4 	bl	8008072 <USBD_CtlError>
      err++;
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd0:	bf00      	nop
  }

  if (err != 0U)
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d11c      	bne.n	8007d12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007cd8:	893b      	ldrh	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d011      	beq.n	8007d02 <USBD_GetDescriptor+0x2b6>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	88db      	ldrh	r3, [r3, #6]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00d      	beq.n	8007d02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	88da      	ldrh	r2, [r3, #6]
 8007cea:	893b      	ldrh	r3, [r7, #8]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	bf28      	it	cs
 8007cf0:	4613      	movcs	r3, r2
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cf6:	893b      	ldrh	r3, [r7, #8]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa22 	bl	8008146 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	88db      	ldrh	r3, [r3, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa79 	bl	8008202 <USBD_CtlSendStatus>
 8007d10:	e000      	b.n	8007d14 <USBD_GetDescriptor+0x2c8>
    return;
 8007d12:	bf00      	nop
    }
  }
}
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop

08007d1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	889b      	ldrh	r3, [r3, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d130      	bne.n	8007d90 <USBD_SetAddress+0x74>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	88db      	ldrh	r3, [r3, #6]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d12c      	bne.n	8007d90 <USBD_SetAddress+0x74>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d3c:	d828      	bhi.n	8007d90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	885b      	ldrh	r3, [r3, #2]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d104      	bne.n	8007d5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f98b 	bl	8008072 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5c:	e01d      	b.n	8007d9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	7bfa      	ldrb	r2, [r7, #15]
 8007d62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fe74 	bl	8008a58 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fa46 	bl	8008202 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d84:	e009      	b.n	8007d9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8e:	e004      	b.n	8007d9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f96d 	bl	8008072 <USBD_CtlError>
  }
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	885b      	ldrh	r3, [r3, #2]
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	4b41      	ldr	r3, [pc, #260]	; (8007ebc <USBD_SetConfig+0x118>)
 8007db6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007db8:	4b40      	ldr	r3, [pc, #256]	; (8007ebc <USBD_SetConfig+0x118>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d904      	bls.n	8007dca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f955 	bl	8008072 <USBD_CtlError>
 8007dc8:	e075      	b.n	8007eb6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d002      	beq.n	8007dda <USBD_SetConfig+0x36>
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d023      	beq.n	8007e20 <USBD_SetConfig+0x7c>
 8007dd8:	e062      	b.n	8007ea0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007dda:	4b38      	ldr	r3, [pc, #224]	; (8007ebc <USBD_SetConfig+0x118>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01a      	beq.n	8007e18 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007de2:	4b36      	ldr	r3, [pc, #216]	; (8007ebc <USBD_SetConfig+0x118>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2203      	movs	r2, #3
 8007df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007df4:	4b31      	ldr	r3, [pc, #196]	; (8007ebc <USBD_SetConfig+0x118>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff f9e8 	bl	80071d0 <USBD_SetClassConfig>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d104      	bne.n	8007e10 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f932 	bl	8008072 <USBD_CtlError>
            return;
 8007e0e:	e052      	b.n	8007eb6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f9f6 	bl	8008202 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e16:	e04e      	b.n	8007eb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f9f2 	bl	8008202 <USBD_CtlSendStatus>
        break;
 8007e1e:	e04a      	b.n	8007eb6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e20:	4b26      	ldr	r3, [pc, #152]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d112      	bne.n	8007e4e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e30:	4b22      	ldr	r3, [pc, #136]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e3a:	4b20      	ldr	r3, [pc, #128]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff f9e4 	bl	800720e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9db 	bl	8008202 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e4c:	e033      	b.n	8007eb6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e4e:	4b1b      	ldr	r3, [pc, #108]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d01d      	beq.n	8007e98 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff f9d2 	bl	800720e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e6a:	4b14      	ldr	r3, [pc, #80]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e74:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <USBD_SetConfig+0x118>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff f9a8 	bl	80071d0 <USBD_SetClassConfig>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d104      	bne.n	8007e90 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f8f2 	bl	8008072 <USBD_CtlError>
            return;
 8007e8e:	e012      	b.n	8007eb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f9b6 	bl	8008202 <USBD_CtlSendStatus>
        break;
 8007e96:	e00e      	b.n	8007eb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f9b2 	bl	8008202 <USBD_CtlSendStatus>
        break;
 8007e9e:	e00a      	b.n	8007eb6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f8e5 	bl	8008072 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ea8:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <USBD_SetConfig+0x118>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff f9ad 	bl	800720e <USBD_ClrClassConfig>
        break;
 8007eb4:	bf00      	nop
    }
  }
}
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20000680 	.word	0x20000680

08007ec0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	88db      	ldrh	r3, [r3, #6]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d004      	beq.n	8007edc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8cc 	bl	8008072 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007eda:	e022      	b.n	8007f22 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	dc02      	bgt.n	8007eec <USBD_GetConfig+0x2c>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dc03      	bgt.n	8007ef2 <USBD_GetConfig+0x32>
 8007eea:	e015      	b.n	8007f18 <USBD_GetConfig+0x58>
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d00b      	beq.n	8007f08 <USBD_GetConfig+0x48>
 8007ef0:	e012      	b.n	8007f18 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3308      	adds	r3, #8
 8007efc:	2201      	movs	r2, #1
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f920 	bl	8008146 <USBD_CtlSendData>
        break;
 8007f06:	e00c      	b.n	8007f22 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f918 	bl	8008146 <USBD_CtlSendData>
        break;
 8007f16:	e004      	b.n	8007f22 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f8a9 	bl	8008072 <USBD_CtlError>
        break;
 8007f20:	bf00      	nop
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d81e      	bhi.n	8007f7e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	88db      	ldrh	r3, [r3, #6]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d004      	beq.n	8007f52 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f891 	bl	8008072 <USBD_CtlError>
        break;
 8007f50:	e01a      	b.n	8007f88 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d005      	beq.n	8007f6e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f043 0202 	orr.w	r2, r3, #2
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	330c      	adds	r3, #12
 8007f72:	2202      	movs	r2, #2
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f8e5 	bl	8008146 <USBD_CtlSendData>
      break;
 8007f7c:	e004      	b.n	8007f88 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f876 	bl	8008072 <USBD_CtlError>
      break;
 8007f86:	bf00      	nop
  }
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	885b      	ldrh	r3, [r3, #2]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d106      	bne.n	8007fb0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f929 	bl	8008202 <USBD_CtlSendStatus>
  }
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d80b      	bhi.n	8007fe6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d10c      	bne.n	8007ff0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f90f 	bl	8008202 <USBD_CtlSendStatus>
      }
      break;
 8007fe4:	e004      	b.n	8007ff0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f842 	bl	8008072 <USBD_CtlError>
      break;
 8007fee:	e000      	b.n	8007ff2 <USBD_ClrFeature+0x3a>
      break;
 8007ff0:	bf00      	nop
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	785a      	ldrb	r2, [r3, #1]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	3302      	adds	r3, #2
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	b29a      	uxth	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	3303      	adds	r3, #3
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	b29b      	uxth	r3, r3
 8008028:	4413      	add	r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	3304      	adds	r3, #4
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b29a      	uxth	r2, r3
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	3305      	adds	r3, #5
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	b29b      	uxth	r3, r3
 8008044:	4413      	add	r3, r2
 8008046:	b29a      	uxth	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	3306      	adds	r3, #6
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	b29a      	uxth	r2, r3
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	3307      	adds	r3, #7
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	b29b      	uxth	r3, r3
 8008060:	4413      	add	r3, r2
 8008062:	b29a      	uxth	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	80da      	strh	r2, [r3, #6]

}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	bc80      	pop	{r7}
 8008070:	4770      	bx	lr

08008072 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800807c:	2180      	movs	r1, #128	; 0x80
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fc80 	bl	8008984 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008084:	2100      	movs	r1, #0
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fc7c 	bl	8008984 <USBD_LL_StallEP>
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d032      	beq.n	8008110 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f834 	bl	8008118 <USBD_GetLen>
 80080b0:	4603      	mov	r3, r0
 80080b2:	3301      	adds	r3, #1
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	75fa      	strb	r2, [r7, #23]
 80080c4:	461a      	mov	r2, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4413      	add	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	7812      	ldrb	r2, [r2, #0]
 80080ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	75fa      	strb	r2, [r7, #23]
 80080d6:	461a      	mov	r2, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4413      	add	r3, r2
 80080dc:	2203      	movs	r2, #3
 80080de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80080e0:	e012      	b.n	8008108 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	60fa      	str	r2, [r7, #12]
 80080e8:	7dfa      	ldrb	r2, [r7, #23]
 80080ea:	1c51      	adds	r1, r2, #1
 80080ec:	75f9      	strb	r1, [r7, #23]
 80080ee:	4611      	mov	r1, r2
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	440a      	add	r2, r1
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	75fa      	strb	r2, [r7, #23]
 80080fe:	461a      	mov	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4413      	add	r3, r2
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e8      	bne.n	80080e2 <USBD_GetString+0x4e>
    }
  }
}
 8008110:	bf00      	nop
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008124:	e005      	b.n	8008132 <USBD_GetLen+0x1a>
  {
    len++;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	3301      	adds	r3, #1
 800812a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3301      	adds	r3, #1
 8008130:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1f5      	bne.n	8008126 <USBD_GetLen+0xe>
  }

  return len;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr

08008146 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	4613      	mov	r3, r2
 8008152:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2202      	movs	r2, #2
 8008158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800815c:	88fa      	ldrh	r2, [r7, #6]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008162:	88fa      	ldrh	r2, [r7, #6]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	2100      	movs	r1, #0
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 fc91 	bl	8008a96 <USBD_LL_Transmit>

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	4613      	mov	r3, r2
 800818a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fc7f 	bl	8008a96 <USBD_LL_Transmit>

  return USBD_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	4613      	mov	r3, r2
 80081ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2203      	movs	r2, #3
 80081b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081b8:	88fa      	ldrh	r2, [r7, #6]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80081c0:	88fa      	ldrh	r2, [r7, #6]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	2100      	movs	r1, #0
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 fc84 	bl	8008adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	4613      	mov	r3, r2
 80081ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081ec:	88fb      	ldrh	r3, [r7, #6]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	2100      	movs	r1, #0
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 fc72 	bl	8008adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2204      	movs	r2, #4
 800820e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008212:	2300      	movs	r3, #0
 8008214:	2200      	movs	r2, #0
 8008216:	2100      	movs	r1, #0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fc3c 	bl	8008a96 <USBD_LL_Transmit>

  return USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2205      	movs	r2, #5
 8008234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008238:	2300      	movs	r3, #0
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc4c 	bl	8008adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0

	/* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK){
 8008254:	2200      	movs	r2, #0
 8008256:	4914      	ldr	r1, [pc, #80]	; (80082a8 <MX_USB_DEVICE_Init+0x58>)
 8008258:	4814      	ldr	r0, [pc, #80]	; (80082ac <MX_USB_DEVICE_Init+0x5c>)
 800825a:	f7fe ff45 	bl	80070e8 <USBD_Init>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <MX_USB_DEVICE_Init+0x18>
		Error_Handler();
 8008264:	f7f8 fb88 	bl	8000978 <Error_Handler>
	}

	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK){
 8008268:	4911      	ldr	r1, [pc, #68]	; (80082b0 <MX_USB_DEVICE_Init+0x60>)
 800826a:	4810      	ldr	r0, [pc, #64]	; (80082ac <MX_USB_DEVICE_Init+0x5c>)
 800826c:	f7fe ff74 	bl	8007158 <USBD_RegisterClass>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <MX_USB_DEVICE_Init+0x2a>
		Error_Handler();
 8008276:	f7f8 fb7f 	bl	8000978 <Error_Handler>
	}

	if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK){
 800827a:	490e      	ldr	r1, [pc, #56]	; (80082b4 <MX_USB_DEVICE_Init+0x64>)
 800827c:	480b      	ldr	r0, [pc, #44]	; (80082ac <MX_USB_DEVICE_Init+0x5c>)
 800827e:	f7fe fe97 	bl	8006fb0 <USBD_CDC_RegisterInterface>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <MX_USB_DEVICE_Init+0x3c>
		Error_Handler();
 8008288:	f7f8 fb76 	bl	8000978 <Error_Handler>
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK){
 800828c:	4807      	ldr	r0, [pc, #28]	; (80082ac <MX_USB_DEVICE_Init+0x5c>)
 800828e:	f7fe ff89 	bl	80071a4 <USBD_Start>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <MX_USB_DEVICE_Init+0x4c>
		Error_Handler();
 8008298:	f7f8 fb6e 	bl	8000978 <Error_Handler>
	}

	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	HAL_Delay(1000);
 800829c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082a0:	f7f8 fd8c 	bl	8000dbc <HAL_Delay>
	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082a4:	bf00      	nop
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20000130 	.word	0x20000130
 80082ac:	20000684 	.word	0x20000684
 80082b0:	2000001c 	.word	0x2000001c
 80082b4:	20000120 	.word	0x20000120

080082b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082bc:	2200      	movs	r2, #0
 80082be:	4905      	ldr	r1, [pc, #20]	; (80082d4 <CDC_Init_FS+0x1c>)
 80082c0:	4805      	ldr	r0, [pc, #20]	; (80082d8 <CDC_Init_FS+0x20>)
 80082c2:	f7fe fe8b 	bl	8006fdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082c6:	4905      	ldr	r1, [pc, #20]	; (80082dc <CDC_Init_FS+0x24>)
 80082c8:	4803      	ldr	r0, [pc, #12]	; (80082d8 <CDC_Init_FS+0x20>)
 80082ca:	f7fe fea0 	bl	800700e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000d48 	.word	0x20000d48
 80082d8:	20000684 	.word	0x20000684
 80082dc:	20000948 	.word	0x20000948

080082e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bc80      	pop	{r7}
 80082ec:	4770      	bx	lr
	...

080082f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
 80082fc:	4613      	mov	r3, r2
 80082fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	2b23      	cmp	r3, #35	; 0x23
 8008304:	d84a      	bhi.n	800839c <CDC_Control_FS+0xac>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <CDC_Control_FS+0x1c>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	0800839d 	.word	0x0800839d
 8008310:	0800839d 	.word	0x0800839d
 8008314:	0800839d 	.word	0x0800839d
 8008318:	0800839d 	.word	0x0800839d
 800831c:	0800839d 	.word	0x0800839d
 8008320:	0800839d 	.word	0x0800839d
 8008324:	0800839d 	.word	0x0800839d
 8008328:	0800839d 	.word	0x0800839d
 800832c:	0800839d 	.word	0x0800839d
 8008330:	0800839d 	.word	0x0800839d
 8008334:	0800839d 	.word	0x0800839d
 8008338:	0800839d 	.word	0x0800839d
 800833c:	0800839d 	.word	0x0800839d
 8008340:	0800839d 	.word	0x0800839d
 8008344:	0800839d 	.word	0x0800839d
 8008348:	0800839d 	.word	0x0800839d
 800834c:	0800839d 	.word	0x0800839d
 8008350:	0800839d 	.word	0x0800839d
 8008354:	0800839d 	.word	0x0800839d
 8008358:	0800839d 	.word	0x0800839d
 800835c:	0800839d 	.word	0x0800839d
 8008360:	0800839d 	.word	0x0800839d
 8008364:	0800839d 	.word	0x0800839d
 8008368:	0800839d 	.word	0x0800839d
 800836c:	0800839d 	.word	0x0800839d
 8008370:	0800839d 	.word	0x0800839d
 8008374:	0800839d 	.word	0x0800839d
 8008378:	0800839d 	.word	0x0800839d
 800837c:	0800839d 	.word	0x0800839d
 8008380:	0800839d 	.word	0x0800839d
 8008384:	0800839d 	.word	0x0800839d
 8008388:	0800839d 	.word	0x0800839d
 800838c:	0800839d 	.word	0x0800839d
 8008390:	0800839d 	.word	0x0800839d
 8008394:	0800839d 	.word	0x0800839d
 8008398:	0800839d 	.word	0x0800839d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800839c:	bf00      	nop
  }

  return (USBD_OK);
 800839e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop

080083ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4805      	ldr	r0, [pc, #20]	; (80083d0 <CDC_Receive_FS+0x24>)
 80083ba:	f7fe fe28 	bl	800700e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083be:	4804      	ldr	r0, [pc, #16]	; (80083d0 <CDC_Receive_FS+0x24>)
 80083c0:	f7fe fe67 	bl	8007092 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000684 	.word	0x20000684

080083d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083e4:	4b0d      	ldr	r3, [pc, #52]	; (800841c <CDC_Transmit_FS+0x48>)
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e00b      	b.n	8008412 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083fa:	887b      	ldrh	r3, [r7, #2]
 80083fc:	461a      	mov	r2, r3
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4806      	ldr	r0, [pc, #24]	; (800841c <CDC_Transmit_FS+0x48>)
 8008402:	f7fe fdeb 	bl	8006fdc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008406:	4805      	ldr	r0, [pc, #20]	; (800841c <CDC_Transmit_FS+0x48>)
 8008408:	f7fe fe14 	bl	8007034 <USBD_CDC_TransmitPacket>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000684 	.word	0x20000684

08008420 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2212      	movs	r2, #18
 8008430:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008432:	4b03      	ldr	r3, [pc, #12]	; (8008440 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	2000014c 	.word	0x2000014c

08008444 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2204      	movs	r2, #4
 8008454:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008456:	4b03      	ldr	r3, [pc, #12]	; (8008464 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	bc80      	pop	{r7}
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000160 	.word	0x20000160

08008468 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	4907      	ldr	r1, [pc, #28]	; (800849c <USBD_FS_ProductStrDescriptor+0x34>)
 800847e:	4808      	ldr	r0, [pc, #32]	; (80084a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008480:	f7ff fe08 	bl	8008094 <USBD_GetString>
 8008484:	e004      	b.n	8008490 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	4904      	ldr	r1, [pc, #16]	; (800849c <USBD_FS_ProductStrDescriptor+0x34>)
 800848a:	4805      	ldr	r0, [pc, #20]	; (80084a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800848c:	f7ff fe02 	bl	8008094 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20001148 	.word	0x20001148
 80084a0:	08009b28 	.word	0x08009b28

080084a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	6039      	str	r1, [r7, #0]
 80084ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	4904      	ldr	r1, [pc, #16]	; (80084c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084b4:	4804      	ldr	r0, [pc, #16]	; (80084c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084b6:	f7ff fded 	bl	8008094 <USBD_GetString>
  return USBD_StrDesc;
 80084ba:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20001148 	.word	0x20001148
 80084c8:	08009b40 	.word	0x08009b40

080084cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	221a      	movs	r2, #26
 80084dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084de:	f000 f843 	bl	8008568 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084e2:	4b02      	ldr	r3, [pc, #8]	; (80084ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	20000164 	.word	0x20000164

080084f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4907      	ldr	r1, [pc, #28]	; (8008524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008506:	4808      	ldr	r0, [pc, #32]	; (8008528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008508:	f7ff fdc4 	bl	8008094 <USBD_GetString>
 800850c:	e004      	b.n	8008518 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	4904      	ldr	r1, [pc, #16]	; (8008524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008512:	4805      	ldr	r0, [pc, #20]	; (8008528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008514:	f7ff fdbe 	bl	8008094 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008518:	4b02      	ldr	r3, [pc, #8]	; (8008524 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20001148 	.word	0x20001148
 8008528:	08009b54 	.word	0x08009b54

0800852c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	6039      	str	r1, [r7, #0]
 8008536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	4907      	ldr	r1, [pc, #28]	; (8008560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008542:	4808      	ldr	r0, [pc, #32]	; (8008564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008544:	f7ff fda6 	bl	8008094 <USBD_GetString>
 8008548:	e004      	b.n	8008554 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4904      	ldr	r1, [pc, #16]	; (8008560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800854e:	4805      	ldr	r0, [pc, #20]	; (8008564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008550:	f7ff fda0 	bl	8008094 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20001148 	.word	0x20001148
 8008564:	08009b60 	.word	0x08009b60

08008568 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800856e:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <Get_SerialNum+0x44>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008574:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <Get_SerialNum+0x48>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800857a:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <Get_SerialNum+0x4c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4413      	add	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800858e:	2208      	movs	r2, #8
 8008590:	4909      	ldr	r1, [pc, #36]	; (80085b8 <Get_SerialNum+0x50>)
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f814 	bl	80085c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008598:	2204      	movs	r2, #4
 800859a:	4908      	ldr	r1, [pc, #32]	; (80085bc <Get_SerialNum+0x54>)
 800859c:	68b8      	ldr	r0, [r7, #8]
 800859e:	f000 f80f 	bl	80085c0 <IntToUnicode>
  }
}
 80085a2:	bf00      	nop
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	1ffff7e8 	.word	0x1ffff7e8
 80085b0:	1ffff7ec 	.word	0x1ffff7ec
 80085b4:	1ffff7f0 	.word	0x1ffff7f0
 80085b8:	20000166 	.word	0x20000166
 80085bc:	20000176 	.word	0x20000176

080085c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	4613      	mov	r3, r2
 80085cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085d2:	2300      	movs	r3, #0
 80085d4:	75fb      	strb	r3, [r7, #23]
 80085d6:	e027      	b.n	8008628 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	0f1b      	lsrs	r3, r3, #28
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d80b      	bhi.n	80085f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	0f1b      	lsrs	r3, r3, #28
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	4619      	mov	r1, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	440b      	add	r3, r1
 80085f0:	3230      	adds	r2, #48	; 0x30
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e00a      	b.n	800860e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	0f1b      	lsrs	r3, r3, #28
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	4619      	mov	r1, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	440b      	add	r3, r1
 8008608:	3237      	adds	r2, #55	; 0x37
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	3301      	adds	r3, #1
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	4413      	add	r3, r2
 800861e:	2200      	movs	r2, #0
 8008620:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	3301      	adds	r3, #1
 8008626:	75fb      	strb	r3, [r7, #23]
 8008628:	7dfa      	ldrb	r2, [r7, #23]
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	429a      	cmp	r2, r3
 800862e:	d3d3      	bcc.n	80085d8 <IntToUnicode+0x18>
  }
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	bc80      	pop	{r7}
 800863a:	4770      	bx	lr

0800863c <HAL_PCD_MspInit>:
  }
}
*/

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a20      	ldr	r2, [pc, #128]	; (80086cc <HAL_PCD_MspInit+0x90>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d13a      	bne.n	80086c4 <HAL_PCD_MspInit+0x88>
  {
  // PD: we have to actively drive D+ low to signal host the disconnection!

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800864e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008658:	2300      	movs	r3, #0
 800865a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800865c:	2303      	movs	r3, #3
 800865e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008660:	f107 0310 	add.w	r3, r7, #16
 8008664:	4619      	mov	r1, r3
 8008666:	481a      	ldr	r0, [pc, #104]	; (80086d0 <HAL_PCD_MspInit+0x94>)
 8008668:	f7f8 fd0c 	bl	8001084 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800866c:	2200      	movs	r2, #0
 800866e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008672:	4817      	ldr	r0, [pc, #92]	; (80086d0 <HAL_PCD_MspInit+0x94>)
 8008674:	f7f8 fea1 	bl	80013ba <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8008678:	2005      	movs	r0, #5
 800867a:	f7f8 fb9f 	bl	8000dbc <HAL_Delay>

    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800867e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008684:	2302      	movs	r3, #2
 8008686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008688:	2300      	movs	r3, #0
 800868a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800868c:	2303      	movs	r3, #3
 800868e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008690:	f107 0310 	add.w	r3, r7, #16
 8008694:	4619      	mov	r1, r3
 8008696:	480e      	ldr	r0, [pc, #56]	; (80086d0 <HAL_PCD_MspInit+0x94>)
 8008698:	f7f8 fcf4 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800869c:	4b0d      	ldr	r3, [pc, #52]	; (80086d4 <HAL_PCD_MspInit+0x98>)
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	4a0c      	ldr	r2, [pc, #48]	; (80086d4 <HAL_PCD_MspInit+0x98>)
 80086a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086a6:	61d3      	str	r3, [r2, #28]
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <HAL_PCD_MspInit+0x98>)
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80086b4:	2200      	movs	r2, #0
 80086b6:	2105      	movs	r1, #5
 80086b8:	2014      	movs	r0, #20
 80086ba:	f7f8 fc9e 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80086be:	2014      	movs	r0, #20
 80086c0:	f7f8 fcb7 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80086c4:	bf00      	nop
 80086c6:	3720      	adds	r7, #32
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40005c00 	.word	0x40005c00
 80086d0:	40010800 	.word	0x40010800
 80086d4:	40021000 	.word	0x40021000

080086d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80086ec:	4619      	mov	r1, r3
 80086ee:	4610      	mov	r0, r2
 80086f0:	f7fe fda0 	bl	8007234 <USBD_LL_SetupStage>
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800870e:	78fa      	ldrb	r2, [r7, #3]
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	440b      	add	r3, r1
 800871c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	4619      	mov	r1, r3
 8008726:	f7fe fdd2 	bl	80072ce <USBD_LL_DataOutStage>
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	460b      	mov	r3, r1
 800873c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	440b      	add	r3, r1
 8008752:	333c      	adds	r3, #60	; 0x3c
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	4619      	mov	r1, r3
 800875a:	f7fe fe29 	bl	80073b0 <USBD_LL_DataInStage>
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe ff39 	bl	80075ec <USBD_LL_SOF>
}
 800877a:	bf00      	nop
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800878a:	2301      	movs	r3, #1
 800878c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	2b02      	cmp	r3, #2
 8008794:	d001      	beq.n	800879a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008796:	f7f8 f8ef 	bl	8000978 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087a0:	7bfa      	ldrb	r2, [r7, #15]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fee9 	bl	800757c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fe fea2 	bl	80074fa <USBD_LL_Reset>
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fee3 	bl	800759a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087dc:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <HAL_PCD_SuspendCallback+0x30>)
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	4a03      	ldr	r2, [pc, #12]	; (80087f0 <HAL_PCD_SuspendCallback+0x30>)
 80087e2:	f043 0306 	orr.w	r3, r3, #6
 80087e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	e000ed00 	.word	0xe000ed00

080087f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fedd 	bl	80075c2 <USBD_LL_Resume>
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008818:	4a28      	ldr	r2, [pc, #160]	; (80088bc <USBD_LL_Init+0xac>)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a26      	ldr	r2, [pc, #152]	; (80088bc <USBD_LL_Init+0xac>)
 8008824:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008828:	4b24      	ldr	r3, [pc, #144]	; (80088bc <USBD_LL_Init+0xac>)
 800882a:	4a25      	ldr	r2, [pc, #148]	; (80088c0 <USBD_LL_Init+0xb0>)
 800882c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800882e:	4b23      	ldr	r3, [pc, #140]	; (80088bc <USBD_LL_Init+0xac>)
 8008830:	2208      	movs	r2, #8
 8008832:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008834:	4b21      	ldr	r3, [pc, #132]	; (80088bc <USBD_LL_Init+0xac>)
 8008836:	2202      	movs	r2, #2
 8008838:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800883a:	4b20      	ldr	r3, [pc, #128]	; (80088bc <USBD_LL_Init+0xac>)
 800883c:	2200      	movs	r2, #0
 800883e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008840:	4b1e      	ldr	r3, [pc, #120]	; (80088bc <USBD_LL_Init+0xac>)
 8008842:	2200      	movs	r2, #0
 8008844:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008846:	4b1d      	ldr	r3, [pc, #116]	; (80088bc <USBD_LL_Init+0xac>)
 8008848:	2200      	movs	r2, #0
 800884a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800884c:	481b      	ldr	r0, [pc, #108]	; (80088bc <USBD_LL_Init+0xac>)
 800884e:	f7f8 fe4e 	bl	80014ee <HAL_PCD_Init>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008858:	f7f8 f88e 	bl	8000978 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008862:	2318      	movs	r3, #24
 8008864:	2200      	movs	r2, #0
 8008866:	2100      	movs	r1, #0
 8008868:	f7fa fb6d 	bl	8002f46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008872:	2358      	movs	r3, #88	; 0x58
 8008874:	2200      	movs	r2, #0
 8008876:	2180      	movs	r1, #128	; 0x80
 8008878:	f7fa fb65 	bl	8002f46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008882:	23c0      	movs	r3, #192	; 0xc0
 8008884:	2200      	movs	r2, #0
 8008886:	2181      	movs	r1, #129	; 0x81
 8008888:	f7fa fb5d 	bl	8002f46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008892:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008896:	2200      	movs	r2, #0
 8008898:	2101      	movs	r1, #1
 800889a:	f7fa fb54 	bl	8002f46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a8:	2200      	movs	r2, #0
 80088aa:	2182      	movs	r1, #130	; 0x82
 80088ac:	f7fa fb4b 	bl	8002f46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20001348 	.word	0x20001348
 80088c0:	40005c00 	.word	0x40005c00

080088c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088da:	4618      	mov	r0, r3
 80088dc:	f7f8 ff06 	bl	80016ec <HAL_PCD_Start>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f94e 	bl	8008b88 <USBD_Get_USB_Status>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	4608      	mov	r0, r1
 8008904:	4611      	mov	r1, r2
 8008906:	461a      	mov	r2, r3
 8008908:	4603      	mov	r3, r0
 800890a:	70fb      	strb	r3, [r7, #3]
 800890c:	460b      	mov	r3, r1
 800890e:	70bb      	strb	r3, [r7, #2]
 8008910:	4613      	mov	r3, r2
 8008912:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008922:	78bb      	ldrb	r3, [r7, #2]
 8008924:	883a      	ldrh	r2, [r7, #0]
 8008926:	78f9      	ldrb	r1, [r7, #3]
 8008928:	f7f9 f85b 	bl	80019e2 <HAL_PCD_EP_Open>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f928 	bl	8008b88 <USBD_Get_USB_Status>
 8008938:	4603      	mov	r3, r0
 800893a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800893c:	7bbb      	ldrb	r3, [r7, #14]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f7f9 f899 	bl	8001a9c <HAL_PCD_EP_Close>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 f909 	bl	8008b88 <USBD_Get_USB_Status>
 8008976:	4603      	mov	r3, r0
 8008978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897a:	7bbb      	ldrb	r3, [r7, #14]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800899e:	78fa      	ldrb	r2, [r7, #3]
 80089a0:	4611      	mov	r1, r2
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7f9 f941 	bl	8001c2a <HAL_PCD_EP_SetStall>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f8ea 	bl	8008b88 <USBD_Get_USB_Status>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	460b      	mov	r3, r1
 80089cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f9 f982 	bl	8001cea <HAL_PCD_EP_ClrStall>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f8cb 	bl	8008b88 <USBD_Get_USB_Status>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	da0c      	bge.n	8008a36 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	4613      	mov	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	00db      	lsls	r3, r3, #3
 8008a2e:	440b      	add	r3, r1
 8008a30:	3302      	adds	r3, #2
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	e00b      	b.n	8008a4e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a3c:	68f9      	ldr	r1, [r7, #12]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	440b      	add	r3, r1
 8008a48:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008a4c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bc80      	pop	{r7}
 8008a56:	4770      	bx	lr

08008a58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a72:	78fa      	ldrb	r2, [r7, #3]
 8008a74:	4611      	mov	r1, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7f8 ff8e 	bl	8001998 <HAL_PCD_SetAddress>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 f880 	bl	8008b88 <USBD_Get_USB_Status>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b086      	sub	sp, #24
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	60f8      	str	r0, [r7, #12]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	72fb      	strb	r3, [r7, #11]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ab8:	893b      	ldrh	r3, [r7, #8]
 8008aba:	7af9      	ldrb	r1, [r7, #11]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	f7f9 f87d 	bl	8001bbc <HAL_PCD_EP_Transmit>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 f85d 	bl	8008b88 <USBD_Get_USB_Status>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	607a      	str	r2, [r7, #4]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	460b      	mov	r3, r1
 8008aea:	72fb      	strb	r3, [r7, #11]
 8008aec:	4613      	mov	r3, r2
 8008aee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008afe:	893b      	ldrh	r3, [r7, #8]
 8008b00:	7af9      	ldrb	r1, [r7, #11]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	f7f9 f812 	bl	8001b2c <HAL_PCD_EP_Receive>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f83a 	bl	8008b88 <USBD_Get_USB_Status>
 8008b14:	4603      	mov	r3, r0
 8008b16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b18:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b34:	78fa      	ldrb	r2, [r7, #3]
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7f9 f828 	bl	8001b8e <HAL_PCD_EP_GetRxCount>
 8008b3e:	4603      	mov	r3, r0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b50:	4b02      	ldr	r3, [pc, #8]	; (8008b5c <USBD_static_malloc+0x14>)
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr
 8008b5c:	20001638 	.word	0x20001638

08008b60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]

}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr

08008b72 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d817      	bhi.n	8008bcc <USBD_Get_USB_Status+0x44>
 8008b9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <USBD_Get_USB_Status+0x1c>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bb5 	.word	0x08008bb5
 8008ba8:	08008bbb 	.word	0x08008bbb
 8008bac:	08008bc1 	.word	0x08008bc1
 8008bb0:	08008bc7 	.word	0x08008bc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb8:	e00b      	b.n	8008bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bba:	2302      	movs	r3, #2
 8008bbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bbe:	e008      	b.n	8008bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc4:	e005      	b.n	8008bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bca:	e002      	b.n	8008bd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd0:	bf00      	nop
  }
  return usb_status;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop

08008be0 <std>:
 8008be0:	2300      	movs	r3, #0
 8008be2:	b510      	push	{r4, lr}
 8008be4:	4604      	mov	r4, r0
 8008be6:	e9c0 3300 	strd	r3, r3, [r0]
 8008bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bee:	6083      	str	r3, [r0, #8]
 8008bf0:	8181      	strh	r1, [r0, #12]
 8008bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8008bf4:	81c2      	strh	r2, [r0, #14]
 8008bf6:	6183      	str	r3, [r0, #24]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	2208      	movs	r2, #8
 8008bfc:	305c      	adds	r0, #92	; 0x5c
 8008bfe:	f000 f90e 	bl	8008e1e <memset>
 8008c02:	4b0d      	ldr	r3, [pc, #52]	; (8008c38 <std+0x58>)
 8008c04:	6224      	str	r4, [r4, #32]
 8008c06:	6263      	str	r3, [r4, #36]	; 0x24
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <std+0x5c>)
 8008c0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c0c:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <std+0x60>)
 8008c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c10:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <std+0x64>)
 8008c12:	6323      	str	r3, [r4, #48]	; 0x30
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <std+0x68>)
 8008c16:	429c      	cmp	r4, r3
 8008c18:	d006      	beq.n	8008c28 <std+0x48>
 8008c1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c1e:	4294      	cmp	r4, r2
 8008c20:	d002      	beq.n	8008c28 <std+0x48>
 8008c22:	33d0      	adds	r3, #208	; 0xd0
 8008c24:	429c      	cmp	r4, r3
 8008c26:	d105      	bne.n	8008c34 <std+0x54>
 8008c28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c30:	f000 b96e 	b.w	8008f10 <__retarget_lock_init_recursive>
 8008c34:	bd10      	pop	{r4, pc}
 8008c36:	bf00      	nop
 8008c38:	08008d99 	.word	0x08008d99
 8008c3c:	08008dbb 	.word	0x08008dbb
 8008c40:	08008df3 	.word	0x08008df3
 8008c44:	08008e17 	.word	0x08008e17
 8008c48:	20001858 	.word	0x20001858

08008c4c <stdio_exit_handler>:
 8008c4c:	4a02      	ldr	r2, [pc, #8]	; (8008c58 <stdio_exit_handler+0xc>)
 8008c4e:	4903      	ldr	r1, [pc, #12]	; (8008c5c <stdio_exit_handler+0x10>)
 8008c50:	4803      	ldr	r0, [pc, #12]	; (8008c60 <stdio_exit_handler+0x14>)
 8008c52:	f000 b869 	b.w	8008d28 <_fwalk_sglue>
 8008c56:	bf00      	nop
 8008c58:	20000180 	.word	0x20000180
 8008c5c:	080097b1 	.word	0x080097b1
 8008c60:	2000018c 	.word	0x2000018c

08008c64 <cleanup_stdio>:
 8008c64:	6841      	ldr	r1, [r0, #4]
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <cleanup_stdio+0x34>)
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	4299      	cmp	r1, r3
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	d001      	beq.n	8008c74 <cleanup_stdio+0x10>
 8008c70:	f000 fd9e 	bl	80097b0 <_fflush_r>
 8008c74:	68a1      	ldr	r1, [r4, #8]
 8008c76:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <cleanup_stdio+0x38>)
 8008c78:	4299      	cmp	r1, r3
 8008c7a:	d002      	beq.n	8008c82 <cleanup_stdio+0x1e>
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 fd97 	bl	80097b0 <_fflush_r>
 8008c82:	68e1      	ldr	r1, [r4, #12]
 8008c84:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <cleanup_stdio+0x3c>)
 8008c86:	4299      	cmp	r1, r3
 8008c88:	d004      	beq.n	8008c94 <cleanup_stdio+0x30>
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c90:	f000 bd8e 	b.w	80097b0 <_fflush_r>
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	bf00      	nop
 8008c98:	20001858 	.word	0x20001858
 8008c9c:	200018c0 	.word	0x200018c0
 8008ca0:	20001928 	.word	0x20001928

08008ca4 <global_stdio_init.part.0>:
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <global_stdio_init.part.0+0x30>)
 8008ca8:	4c0b      	ldr	r4, [pc, #44]	; (8008cd8 <global_stdio_init.part.0+0x34>)
 8008caa:	4a0c      	ldr	r2, [pc, #48]	; (8008cdc <global_stdio_init.part.0+0x38>)
 8008cac:	4620      	mov	r0, r4
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	2104      	movs	r1, #4
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f7ff ff94 	bl	8008be0 <std>
 8008cb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	2109      	movs	r1, #9
 8008cc0:	f7ff ff8e 	bl	8008be0 <std>
 8008cc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008cc8:	2202      	movs	r2, #2
 8008cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cce:	2112      	movs	r1, #18
 8008cd0:	f7ff bf86 	b.w	8008be0 <std>
 8008cd4:	20001990 	.word	0x20001990
 8008cd8:	20001858 	.word	0x20001858
 8008cdc:	08008c4d 	.word	0x08008c4d

08008ce0 <__sfp_lock_acquire>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__sfp_lock_acquire+0x8>)
 8008ce2:	f000 b916 	b.w	8008f12 <__retarget_lock_acquire_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	20001999 	.word	0x20001999

08008cec <__sfp_lock_release>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__sfp_lock_release+0x8>)
 8008cee:	f000 b911 	b.w	8008f14 <__retarget_lock_release_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20001999 	.word	0x20001999

08008cf8 <__sinit>:
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	f7ff fff0 	bl	8008ce0 <__sfp_lock_acquire>
 8008d00:	6a23      	ldr	r3, [r4, #32]
 8008d02:	b11b      	cbz	r3, 8008d0c <__sinit+0x14>
 8008d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d08:	f7ff bff0 	b.w	8008cec <__sfp_lock_release>
 8008d0c:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <__sinit+0x28>)
 8008d0e:	6223      	str	r3, [r4, #32]
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <__sinit+0x2c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1f5      	bne.n	8008d04 <__sinit+0xc>
 8008d18:	f7ff ffc4 	bl	8008ca4 <global_stdio_init.part.0>
 8008d1c:	e7f2      	b.n	8008d04 <__sinit+0xc>
 8008d1e:	bf00      	nop
 8008d20:	08008c65 	.word	0x08008c65
 8008d24:	20001990 	.word	0x20001990

08008d28 <_fwalk_sglue>:
 8008d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d2c:	4607      	mov	r7, r0
 8008d2e:	4688      	mov	r8, r1
 8008d30:	4614      	mov	r4, r2
 8008d32:	2600      	movs	r6, #0
 8008d34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d38:	f1b9 0901 	subs.w	r9, r9, #1
 8008d3c:	d505      	bpl.n	8008d4a <_fwalk_sglue+0x22>
 8008d3e:	6824      	ldr	r4, [r4, #0]
 8008d40:	2c00      	cmp	r4, #0
 8008d42:	d1f7      	bne.n	8008d34 <_fwalk_sglue+0xc>
 8008d44:	4630      	mov	r0, r6
 8008d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4a:	89ab      	ldrh	r3, [r5, #12]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d907      	bls.n	8008d60 <_fwalk_sglue+0x38>
 8008d50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d54:	3301      	adds	r3, #1
 8008d56:	d003      	beq.n	8008d60 <_fwalk_sglue+0x38>
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	47c0      	blx	r8
 8008d5e:	4306      	orrs	r6, r0
 8008d60:	3568      	adds	r5, #104	; 0x68
 8008d62:	e7e9      	b.n	8008d38 <_fwalk_sglue+0x10>

08008d64 <iprintf>:
 8008d64:	b40f      	push	{r0, r1, r2, r3}
 8008d66:	b507      	push	{r0, r1, r2, lr}
 8008d68:	4906      	ldr	r1, [pc, #24]	; (8008d84 <iprintf+0x20>)
 8008d6a:	ab04      	add	r3, sp, #16
 8008d6c:	6808      	ldr	r0, [r1, #0]
 8008d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d72:	6881      	ldr	r1, [r0, #8]
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	f000 f9eb 	bl	8009150 <_vfiprintf_r>
 8008d7a:	b003      	add	sp, #12
 8008d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d80:	b004      	add	sp, #16
 8008d82:	4770      	bx	lr
 8008d84:	200001d8 	.word	0x200001d8

08008d88 <putchar>:
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <putchar+0xc>)
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	6818      	ldr	r0, [r3, #0]
 8008d8e:	6882      	ldr	r2, [r0, #8]
 8008d90:	f000 bd36 	b.w	8009800 <_putc_r>
 8008d94:	200001d8 	.word	0x200001d8

08008d98 <__sread>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da0:	f000 f868 	bl	8008e74 <_read_r>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	bfab      	itete	ge
 8008da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008daa:	89a3      	ldrhlt	r3, [r4, #12]
 8008dac:	181b      	addge	r3, r3, r0
 8008dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008db2:	bfac      	ite	ge
 8008db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008db6:	81a3      	strhlt	r3, [r4, #12]
 8008db8:	bd10      	pop	{r4, pc}

08008dba <__swrite>:
 8008dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	898b      	ldrh	r3, [r1, #12]
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	05db      	lsls	r3, r3, #23
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	4616      	mov	r6, r2
 8008dca:	d505      	bpl.n	8008dd8 <__swrite+0x1e>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd4:	f000 f83c 	bl	8008e50 <_lseek_r>
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	4632      	mov	r2, r6
 8008ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	4628      	mov	r0, r5
 8008de4:	463b      	mov	r3, r7
 8008de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dee:	f000 b853 	b.w	8008e98 <_write_r>

08008df2 <__sseek>:
 8008df2:	b510      	push	{r4, lr}
 8008df4:	460c      	mov	r4, r1
 8008df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfa:	f000 f829 	bl	8008e50 <_lseek_r>
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	bf15      	itete	ne
 8008e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e0e:	81a3      	strheq	r3, [r4, #12]
 8008e10:	bf18      	it	ne
 8008e12:	81a3      	strhne	r3, [r4, #12]
 8008e14:	bd10      	pop	{r4, pc}

08008e16 <__sclose>:
 8008e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1a:	f000 b809 	b.w	8008e30 <_close_r>

08008e1e <memset>:
 8008e1e:	4603      	mov	r3, r0
 8008e20:	4402      	add	r2, r0
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d100      	bne.n	8008e28 <memset+0xa>
 8008e26:	4770      	bx	lr
 8008e28:	f803 1b01 	strb.w	r1, [r3], #1
 8008e2c:	e7f9      	b.n	8008e22 <memset+0x4>
	...

08008e30 <_close_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	2300      	movs	r3, #0
 8008e34:	4d05      	ldr	r5, [pc, #20]	; (8008e4c <_close_r+0x1c>)
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7f7 fec9 	bl	8000bd2 <_close>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_close_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_close_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20001994 	.word	0x20001994

08008e50 <_lseek_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	4611      	mov	r1, r2
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4d05      	ldr	r5, [pc, #20]	; (8008e70 <_lseek_r+0x20>)
 8008e5c:	602a      	str	r2, [r5, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	f7f7 fedb 	bl	8000c1a <_lseek>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_lseek_r+0x1e>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_lseek_r+0x1e>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	20001994 	.word	0x20001994

08008e74 <_read_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4d05      	ldr	r5, [pc, #20]	; (8008e94 <_read_r+0x20>)
 8008e80:	602a      	str	r2, [r5, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	f7f7 fe6c 	bl	8000b60 <_read>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_read_r+0x1e>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_read_r+0x1e>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20001994 	.word	0x20001994

08008e98 <_write_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4d05      	ldr	r5, [pc, #20]	; (8008eb8 <_write_r+0x20>)
 8008ea4:	602a      	str	r2, [r5, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f7f7 fe77 	bl	8000b9a <_write>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	d102      	bne.n	8008eb6 <_write_r+0x1e>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	b103      	cbz	r3, 8008eb6 <_write_r+0x1e>
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	20001994 	.word	0x20001994

08008ebc <__errno>:
 8008ebc:	4b01      	ldr	r3, [pc, #4]	; (8008ec4 <__errno+0x8>)
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	200001d8 	.word	0x200001d8

08008ec8 <__libc_init_array>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	2600      	movs	r6, #0
 8008ecc:	4d0c      	ldr	r5, [pc, #48]	; (8008f00 <__libc_init_array+0x38>)
 8008ece:	4c0d      	ldr	r4, [pc, #52]	; (8008f04 <__libc_init_array+0x3c>)
 8008ed0:	1b64      	subs	r4, r4, r5
 8008ed2:	10a4      	asrs	r4, r4, #2
 8008ed4:	42a6      	cmp	r6, r4
 8008ed6:	d109      	bne.n	8008eec <__libc_init_array+0x24>
 8008ed8:	f000 fdfe 	bl	8009ad8 <_init>
 8008edc:	2600      	movs	r6, #0
 8008ede:	4d0a      	ldr	r5, [pc, #40]	; (8008f08 <__libc_init_array+0x40>)
 8008ee0:	4c0a      	ldr	r4, [pc, #40]	; (8008f0c <__libc_init_array+0x44>)
 8008ee2:	1b64      	subs	r4, r4, r5
 8008ee4:	10a4      	asrs	r4, r4, #2
 8008ee6:	42a6      	cmp	r6, r4
 8008ee8:	d105      	bne.n	8008ef6 <__libc_init_array+0x2e>
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef0:	4798      	blx	r3
 8008ef2:	3601      	adds	r6, #1
 8008ef4:	e7ee      	b.n	8008ed4 <__libc_init_array+0xc>
 8008ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efa:	4798      	blx	r3
 8008efc:	3601      	adds	r6, #1
 8008efe:	e7f2      	b.n	8008ee6 <__libc_init_array+0x1e>
 8008f00:	08009bc8 	.word	0x08009bc8
 8008f04:	08009bc8 	.word	0x08009bc8
 8008f08:	08009bc8 	.word	0x08009bc8
 8008f0c:	08009bcc 	.word	0x08009bcc

08008f10 <__retarget_lock_init_recursive>:
 8008f10:	4770      	bx	lr

08008f12 <__retarget_lock_acquire_recursive>:
 8008f12:	4770      	bx	lr

08008f14 <__retarget_lock_release_recursive>:
 8008f14:	4770      	bx	lr
	...

08008f18 <_free_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d040      	beq.n	8008fa2 <_free_r+0x8a>
 8008f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f24:	1f0c      	subs	r4, r1, #4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bfb8      	it	lt
 8008f2a:	18e4      	addlt	r4, r4, r3
 8008f2c:	f000 f8dc 	bl	80090e8 <__malloc_lock>
 8008f30:	4a1c      	ldr	r2, [pc, #112]	; (8008fa4 <_free_r+0x8c>)
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	b933      	cbnz	r3, 8008f44 <_free_r+0x2c>
 8008f36:	6063      	str	r3, [r4, #4]
 8008f38:	6014      	str	r4, [r2, #0]
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f40:	f000 b8d8 	b.w	80090f4 <__malloc_unlock>
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	d908      	bls.n	8008f5a <_free_r+0x42>
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	1821      	adds	r1, r4, r0
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	bf01      	itttt	eq
 8008f50:	6819      	ldreq	r1, [r3, #0]
 8008f52:	685b      	ldreq	r3, [r3, #4]
 8008f54:	1809      	addeq	r1, r1, r0
 8008f56:	6021      	streq	r1, [r4, #0]
 8008f58:	e7ed      	b.n	8008f36 <_free_r+0x1e>
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	b10b      	cbz	r3, 8008f64 <_free_r+0x4c>
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	d9fa      	bls.n	8008f5a <_free_r+0x42>
 8008f64:	6811      	ldr	r1, [r2, #0]
 8008f66:	1850      	adds	r0, r2, r1
 8008f68:	42a0      	cmp	r0, r4
 8008f6a:	d10b      	bne.n	8008f84 <_free_r+0x6c>
 8008f6c:	6820      	ldr	r0, [r4, #0]
 8008f6e:	4401      	add	r1, r0
 8008f70:	1850      	adds	r0, r2, r1
 8008f72:	4283      	cmp	r3, r0
 8008f74:	6011      	str	r1, [r2, #0]
 8008f76:	d1e0      	bne.n	8008f3a <_free_r+0x22>
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	4408      	add	r0, r1
 8008f7e:	6010      	str	r0, [r2, #0]
 8008f80:	6053      	str	r3, [r2, #4]
 8008f82:	e7da      	b.n	8008f3a <_free_r+0x22>
 8008f84:	d902      	bls.n	8008f8c <_free_r+0x74>
 8008f86:	230c      	movs	r3, #12
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	e7d6      	b.n	8008f3a <_free_r+0x22>
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	1821      	adds	r1, r4, r0
 8008f90:	428b      	cmp	r3, r1
 8008f92:	bf01      	itttt	eq
 8008f94:	6819      	ldreq	r1, [r3, #0]
 8008f96:	685b      	ldreq	r3, [r3, #4]
 8008f98:	1809      	addeq	r1, r1, r0
 8008f9a:	6021      	streq	r1, [r4, #0]
 8008f9c:	6063      	str	r3, [r4, #4]
 8008f9e:	6054      	str	r4, [r2, #4]
 8008fa0:	e7cb      	b.n	8008f3a <_free_r+0x22>
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	2000199c 	.word	0x2000199c

08008fa8 <sbrk_aligned>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	4e0e      	ldr	r6, [pc, #56]	; (8008fe4 <sbrk_aligned+0x3c>)
 8008fac:	460c      	mov	r4, r1
 8008fae:	6831      	ldr	r1, [r6, #0]
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	b911      	cbnz	r1, 8008fba <sbrk_aligned+0x12>
 8008fb4:	f000 fcee 	bl	8009994 <_sbrk_r>
 8008fb8:	6030      	str	r0, [r6, #0]
 8008fba:	4621      	mov	r1, r4
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f000 fce9 	bl	8009994 <_sbrk_r>
 8008fc2:	1c43      	adds	r3, r0, #1
 8008fc4:	d00a      	beq.n	8008fdc <sbrk_aligned+0x34>
 8008fc6:	1cc4      	adds	r4, r0, #3
 8008fc8:	f024 0403 	bic.w	r4, r4, #3
 8008fcc:	42a0      	cmp	r0, r4
 8008fce:	d007      	beq.n	8008fe0 <sbrk_aligned+0x38>
 8008fd0:	1a21      	subs	r1, r4, r0
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 fcde 	bl	8009994 <_sbrk_r>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d101      	bne.n	8008fe0 <sbrk_aligned+0x38>
 8008fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	200019a0 	.word	0x200019a0

08008fe8 <_malloc_r>:
 8008fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fec:	1ccd      	adds	r5, r1, #3
 8008fee:	f025 0503 	bic.w	r5, r5, #3
 8008ff2:	3508      	adds	r5, #8
 8008ff4:	2d0c      	cmp	r5, #12
 8008ff6:	bf38      	it	cc
 8008ff8:	250c      	movcc	r5, #12
 8008ffa:	2d00      	cmp	r5, #0
 8008ffc:	4607      	mov	r7, r0
 8008ffe:	db01      	blt.n	8009004 <_malloc_r+0x1c>
 8009000:	42a9      	cmp	r1, r5
 8009002:	d905      	bls.n	8009010 <_malloc_r+0x28>
 8009004:	230c      	movs	r3, #12
 8009006:	2600      	movs	r6, #0
 8009008:	603b      	str	r3, [r7, #0]
 800900a:	4630      	mov	r0, r6
 800900c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009010:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090e4 <_malloc_r+0xfc>
 8009014:	f000 f868 	bl	80090e8 <__malloc_lock>
 8009018:	f8d8 3000 	ldr.w	r3, [r8]
 800901c:	461c      	mov	r4, r3
 800901e:	bb5c      	cbnz	r4, 8009078 <_malloc_r+0x90>
 8009020:	4629      	mov	r1, r5
 8009022:	4638      	mov	r0, r7
 8009024:	f7ff ffc0 	bl	8008fa8 <sbrk_aligned>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	4604      	mov	r4, r0
 800902c:	d155      	bne.n	80090da <_malloc_r+0xf2>
 800902e:	f8d8 4000 	ldr.w	r4, [r8]
 8009032:	4626      	mov	r6, r4
 8009034:	2e00      	cmp	r6, #0
 8009036:	d145      	bne.n	80090c4 <_malloc_r+0xdc>
 8009038:	2c00      	cmp	r4, #0
 800903a:	d048      	beq.n	80090ce <_malloc_r+0xe6>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	4631      	mov	r1, r6
 8009040:	4638      	mov	r0, r7
 8009042:	eb04 0903 	add.w	r9, r4, r3
 8009046:	f000 fca5 	bl	8009994 <_sbrk_r>
 800904a:	4581      	cmp	r9, r0
 800904c:	d13f      	bne.n	80090ce <_malloc_r+0xe6>
 800904e:	6821      	ldr	r1, [r4, #0]
 8009050:	4638      	mov	r0, r7
 8009052:	1a6d      	subs	r5, r5, r1
 8009054:	4629      	mov	r1, r5
 8009056:	f7ff ffa7 	bl	8008fa8 <sbrk_aligned>
 800905a:	3001      	adds	r0, #1
 800905c:	d037      	beq.n	80090ce <_malloc_r+0xe6>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	442b      	add	r3, r5
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	f8d8 3000 	ldr.w	r3, [r8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d038      	beq.n	80090de <_malloc_r+0xf6>
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	42a2      	cmp	r2, r4
 8009070:	d12b      	bne.n	80090ca <_malloc_r+0xe2>
 8009072:	2200      	movs	r2, #0
 8009074:	605a      	str	r2, [r3, #4]
 8009076:	e00f      	b.n	8009098 <_malloc_r+0xb0>
 8009078:	6822      	ldr	r2, [r4, #0]
 800907a:	1b52      	subs	r2, r2, r5
 800907c:	d41f      	bmi.n	80090be <_malloc_r+0xd6>
 800907e:	2a0b      	cmp	r2, #11
 8009080:	d917      	bls.n	80090b2 <_malloc_r+0xca>
 8009082:	1961      	adds	r1, r4, r5
 8009084:	42a3      	cmp	r3, r4
 8009086:	6025      	str	r5, [r4, #0]
 8009088:	bf18      	it	ne
 800908a:	6059      	strne	r1, [r3, #4]
 800908c:	6863      	ldr	r3, [r4, #4]
 800908e:	bf08      	it	eq
 8009090:	f8c8 1000 	streq.w	r1, [r8]
 8009094:	5162      	str	r2, [r4, r5]
 8009096:	604b      	str	r3, [r1, #4]
 8009098:	4638      	mov	r0, r7
 800909a:	f104 060b 	add.w	r6, r4, #11
 800909e:	f000 f829 	bl	80090f4 <__malloc_unlock>
 80090a2:	f026 0607 	bic.w	r6, r6, #7
 80090a6:	1d23      	adds	r3, r4, #4
 80090a8:	1af2      	subs	r2, r6, r3
 80090aa:	d0ae      	beq.n	800900a <_malloc_r+0x22>
 80090ac:	1b9b      	subs	r3, r3, r6
 80090ae:	50a3      	str	r3, [r4, r2]
 80090b0:	e7ab      	b.n	800900a <_malloc_r+0x22>
 80090b2:	42a3      	cmp	r3, r4
 80090b4:	6862      	ldr	r2, [r4, #4]
 80090b6:	d1dd      	bne.n	8009074 <_malloc_r+0x8c>
 80090b8:	f8c8 2000 	str.w	r2, [r8]
 80090bc:	e7ec      	b.n	8009098 <_malloc_r+0xb0>
 80090be:	4623      	mov	r3, r4
 80090c0:	6864      	ldr	r4, [r4, #4]
 80090c2:	e7ac      	b.n	800901e <_malloc_r+0x36>
 80090c4:	4634      	mov	r4, r6
 80090c6:	6876      	ldr	r6, [r6, #4]
 80090c8:	e7b4      	b.n	8009034 <_malloc_r+0x4c>
 80090ca:	4613      	mov	r3, r2
 80090cc:	e7cc      	b.n	8009068 <_malloc_r+0x80>
 80090ce:	230c      	movs	r3, #12
 80090d0:	4638      	mov	r0, r7
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	f000 f80e 	bl	80090f4 <__malloc_unlock>
 80090d8:	e797      	b.n	800900a <_malloc_r+0x22>
 80090da:	6025      	str	r5, [r4, #0]
 80090dc:	e7dc      	b.n	8009098 <_malloc_r+0xb0>
 80090de:	605b      	str	r3, [r3, #4]
 80090e0:	deff      	udf	#255	; 0xff
 80090e2:	bf00      	nop
 80090e4:	2000199c 	.word	0x2000199c

080090e8 <__malloc_lock>:
 80090e8:	4801      	ldr	r0, [pc, #4]	; (80090f0 <__malloc_lock+0x8>)
 80090ea:	f7ff bf12 	b.w	8008f12 <__retarget_lock_acquire_recursive>
 80090ee:	bf00      	nop
 80090f0:	20001998 	.word	0x20001998

080090f4 <__malloc_unlock>:
 80090f4:	4801      	ldr	r0, [pc, #4]	; (80090fc <__malloc_unlock+0x8>)
 80090f6:	f7ff bf0d 	b.w	8008f14 <__retarget_lock_release_recursive>
 80090fa:	bf00      	nop
 80090fc:	20001998 	.word	0x20001998

08009100 <__sfputc_r>:
 8009100:	6893      	ldr	r3, [r2, #8]
 8009102:	b410      	push	{r4}
 8009104:	3b01      	subs	r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	6093      	str	r3, [r2, #8]
 800910a:	da07      	bge.n	800911c <__sfputc_r+0x1c>
 800910c:	6994      	ldr	r4, [r2, #24]
 800910e:	42a3      	cmp	r3, r4
 8009110:	db01      	blt.n	8009116 <__sfputc_r+0x16>
 8009112:	290a      	cmp	r1, #10
 8009114:	d102      	bne.n	800911c <__sfputc_r+0x1c>
 8009116:	bc10      	pop	{r4}
 8009118:	f000 bba6 	b.w	8009868 <__swbuf_r>
 800911c:	6813      	ldr	r3, [r2, #0]
 800911e:	1c58      	adds	r0, r3, #1
 8009120:	6010      	str	r0, [r2, #0]
 8009122:	7019      	strb	r1, [r3, #0]
 8009124:	4608      	mov	r0, r1
 8009126:	bc10      	pop	{r4}
 8009128:	4770      	bx	lr

0800912a <__sfputs_r>:
 800912a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912c:	4606      	mov	r6, r0
 800912e:	460f      	mov	r7, r1
 8009130:	4614      	mov	r4, r2
 8009132:	18d5      	adds	r5, r2, r3
 8009134:	42ac      	cmp	r4, r5
 8009136:	d101      	bne.n	800913c <__sfputs_r+0x12>
 8009138:	2000      	movs	r0, #0
 800913a:	e007      	b.n	800914c <__sfputs_r+0x22>
 800913c:	463a      	mov	r2, r7
 800913e:	4630      	mov	r0, r6
 8009140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009144:	f7ff ffdc 	bl	8009100 <__sfputc_r>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d1f3      	bne.n	8009134 <__sfputs_r+0xa>
 800914c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009150 <_vfiprintf_r>:
 8009150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	460d      	mov	r5, r1
 8009156:	4614      	mov	r4, r2
 8009158:	4698      	mov	r8, r3
 800915a:	4606      	mov	r6, r0
 800915c:	b09d      	sub	sp, #116	; 0x74
 800915e:	b118      	cbz	r0, 8009168 <_vfiprintf_r+0x18>
 8009160:	6a03      	ldr	r3, [r0, #32]
 8009162:	b90b      	cbnz	r3, 8009168 <_vfiprintf_r+0x18>
 8009164:	f7ff fdc8 	bl	8008cf8 <__sinit>
 8009168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800916a:	07d9      	lsls	r1, r3, #31
 800916c:	d405      	bmi.n	800917a <_vfiprintf_r+0x2a>
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	059a      	lsls	r2, r3, #22
 8009172:	d402      	bmi.n	800917a <_vfiprintf_r+0x2a>
 8009174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009176:	f7ff fecc 	bl	8008f12 <__retarget_lock_acquire_recursive>
 800917a:	89ab      	ldrh	r3, [r5, #12]
 800917c:	071b      	lsls	r3, r3, #28
 800917e:	d501      	bpl.n	8009184 <_vfiprintf_r+0x34>
 8009180:	692b      	ldr	r3, [r5, #16]
 8009182:	b99b      	cbnz	r3, 80091ac <_vfiprintf_r+0x5c>
 8009184:	4629      	mov	r1, r5
 8009186:	4630      	mov	r0, r6
 8009188:	f000 fbac 	bl	80098e4 <__swsetup_r>
 800918c:	b170      	cbz	r0, 80091ac <_vfiprintf_r+0x5c>
 800918e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009190:	07dc      	lsls	r4, r3, #31
 8009192:	d504      	bpl.n	800919e <_vfiprintf_r+0x4e>
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	b01d      	add	sp, #116	; 0x74
 800919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	0598      	lsls	r0, r3, #22
 80091a2:	d4f7      	bmi.n	8009194 <_vfiprintf_r+0x44>
 80091a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091a6:	f7ff feb5 	bl	8008f14 <__retarget_lock_release_recursive>
 80091aa:	e7f3      	b.n	8009194 <_vfiprintf_r+0x44>
 80091ac:	2300      	movs	r3, #0
 80091ae:	9309      	str	r3, [sp, #36]	; 0x24
 80091b0:	2320      	movs	r3, #32
 80091b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091b6:	2330      	movs	r3, #48	; 0x30
 80091b8:	f04f 0901 	mov.w	r9, #1
 80091bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80091c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009370 <_vfiprintf_r+0x220>
 80091c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091c8:	4623      	mov	r3, r4
 80091ca:	469a      	mov	sl, r3
 80091cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d0:	b10a      	cbz	r2, 80091d6 <_vfiprintf_r+0x86>
 80091d2:	2a25      	cmp	r2, #37	; 0x25
 80091d4:	d1f9      	bne.n	80091ca <_vfiprintf_r+0x7a>
 80091d6:	ebba 0b04 	subs.w	fp, sl, r4
 80091da:	d00b      	beq.n	80091f4 <_vfiprintf_r+0xa4>
 80091dc:	465b      	mov	r3, fp
 80091de:	4622      	mov	r2, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7ff ffa1 	bl	800912a <__sfputs_r>
 80091e8:	3001      	adds	r0, #1
 80091ea:	f000 80a9 	beq.w	8009340 <_vfiprintf_r+0x1f0>
 80091ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091f0:	445a      	add	r2, fp
 80091f2:	9209      	str	r2, [sp, #36]	; 0x24
 80091f4:	f89a 3000 	ldrb.w	r3, [sl]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 80a1 	beq.w	8009340 <_vfiprintf_r+0x1f0>
 80091fe:	2300      	movs	r3, #0
 8009200:	f04f 32ff 	mov.w	r2, #4294967295
 8009204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009208:	f10a 0a01 	add.w	sl, sl, #1
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	9307      	str	r3, [sp, #28]
 8009210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009214:	931a      	str	r3, [sp, #104]	; 0x68
 8009216:	4654      	mov	r4, sl
 8009218:	2205      	movs	r2, #5
 800921a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921e:	4854      	ldr	r0, [pc, #336]	; (8009370 <_vfiprintf_r+0x220>)
 8009220:	f000 fbc8 	bl	80099b4 <memchr>
 8009224:	9a04      	ldr	r2, [sp, #16]
 8009226:	b9d8      	cbnz	r0, 8009260 <_vfiprintf_r+0x110>
 8009228:	06d1      	lsls	r1, r2, #27
 800922a:	bf44      	itt	mi
 800922c:	2320      	movmi	r3, #32
 800922e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009232:	0713      	lsls	r3, r2, #28
 8009234:	bf44      	itt	mi
 8009236:	232b      	movmi	r3, #43	; 0x2b
 8009238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800923c:	f89a 3000 	ldrb.w	r3, [sl]
 8009240:	2b2a      	cmp	r3, #42	; 0x2a
 8009242:	d015      	beq.n	8009270 <_vfiprintf_r+0x120>
 8009244:	4654      	mov	r4, sl
 8009246:	2000      	movs	r0, #0
 8009248:	f04f 0c0a 	mov.w	ip, #10
 800924c:	9a07      	ldr	r2, [sp, #28]
 800924e:	4621      	mov	r1, r4
 8009250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009254:	3b30      	subs	r3, #48	; 0x30
 8009256:	2b09      	cmp	r3, #9
 8009258:	d94d      	bls.n	80092f6 <_vfiprintf_r+0x1a6>
 800925a:	b1b0      	cbz	r0, 800928a <_vfiprintf_r+0x13a>
 800925c:	9207      	str	r2, [sp, #28]
 800925e:	e014      	b.n	800928a <_vfiprintf_r+0x13a>
 8009260:	eba0 0308 	sub.w	r3, r0, r8
 8009264:	fa09 f303 	lsl.w	r3, r9, r3
 8009268:	4313      	orrs	r3, r2
 800926a:	46a2      	mov	sl, r4
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	e7d2      	b.n	8009216 <_vfiprintf_r+0xc6>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	1d19      	adds	r1, r3, #4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	9103      	str	r1, [sp, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	bfbb      	ittet	lt
 800927c:	425b      	neglt	r3, r3
 800927e:	f042 0202 	orrlt.w	r2, r2, #2
 8009282:	9307      	strge	r3, [sp, #28]
 8009284:	9307      	strlt	r3, [sp, #28]
 8009286:	bfb8      	it	lt
 8009288:	9204      	strlt	r2, [sp, #16]
 800928a:	7823      	ldrb	r3, [r4, #0]
 800928c:	2b2e      	cmp	r3, #46	; 0x2e
 800928e:	d10c      	bne.n	80092aa <_vfiprintf_r+0x15a>
 8009290:	7863      	ldrb	r3, [r4, #1]
 8009292:	2b2a      	cmp	r3, #42	; 0x2a
 8009294:	d134      	bne.n	8009300 <_vfiprintf_r+0x1b0>
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	3402      	adds	r4, #2
 800929a:	1d1a      	adds	r2, r3, #4
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	9203      	str	r2, [sp, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	bfb8      	it	lt
 80092a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80092a8:	9305      	str	r3, [sp, #20]
 80092aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009374 <_vfiprintf_r+0x224>
 80092ae:	2203      	movs	r2, #3
 80092b0:	4650      	mov	r0, sl
 80092b2:	7821      	ldrb	r1, [r4, #0]
 80092b4:	f000 fb7e 	bl	80099b4 <memchr>
 80092b8:	b138      	cbz	r0, 80092ca <_vfiprintf_r+0x17a>
 80092ba:	2240      	movs	r2, #64	; 0x40
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	eba0 000a 	sub.w	r0, r0, sl
 80092c2:	4082      	lsls	r2, r0
 80092c4:	4313      	orrs	r3, r2
 80092c6:	3401      	adds	r4, #1
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ce:	2206      	movs	r2, #6
 80092d0:	4829      	ldr	r0, [pc, #164]	; (8009378 <_vfiprintf_r+0x228>)
 80092d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092d6:	f000 fb6d 	bl	80099b4 <memchr>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d03f      	beq.n	800935e <_vfiprintf_r+0x20e>
 80092de:	4b27      	ldr	r3, [pc, #156]	; (800937c <_vfiprintf_r+0x22c>)
 80092e0:	bb1b      	cbnz	r3, 800932a <_vfiprintf_r+0x1da>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	3307      	adds	r3, #7
 80092e6:	f023 0307 	bic.w	r3, r3, #7
 80092ea:	3308      	adds	r3, #8
 80092ec:	9303      	str	r3, [sp, #12]
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	443b      	add	r3, r7
 80092f2:	9309      	str	r3, [sp, #36]	; 0x24
 80092f4:	e768      	b.n	80091c8 <_vfiprintf_r+0x78>
 80092f6:	460c      	mov	r4, r1
 80092f8:	2001      	movs	r0, #1
 80092fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80092fe:	e7a6      	b.n	800924e <_vfiprintf_r+0xfe>
 8009300:	2300      	movs	r3, #0
 8009302:	f04f 0c0a 	mov.w	ip, #10
 8009306:	4619      	mov	r1, r3
 8009308:	3401      	adds	r4, #1
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	4620      	mov	r0, r4
 800930e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009312:	3a30      	subs	r2, #48	; 0x30
 8009314:	2a09      	cmp	r2, #9
 8009316:	d903      	bls.n	8009320 <_vfiprintf_r+0x1d0>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0c6      	beq.n	80092aa <_vfiprintf_r+0x15a>
 800931c:	9105      	str	r1, [sp, #20]
 800931e:	e7c4      	b.n	80092aa <_vfiprintf_r+0x15a>
 8009320:	4604      	mov	r4, r0
 8009322:	2301      	movs	r3, #1
 8009324:	fb0c 2101 	mla	r1, ip, r1, r2
 8009328:	e7f0      	b.n	800930c <_vfiprintf_r+0x1bc>
 800932a:	ab03      	add	r3, sp, #12
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	462a      	mov	r2, r5
 8009330:	4630      	mov	r0, r6
 8009332:	4b13      	ldr	r3, [pc, #76]	; (8009380 <_vfiprintf_r+0x230>)
 8009334:	a904      	add	r1, sp, #16
 8009336:	f3af 8000 	nop.w
 800933a:	4607      	mov	r7, r0
 800933c:	1c78      	adds	r0, r7, #1
 800933e:	d1d6      	bne.n	80092ee <_vfiprintf_r+0x19e>
 8009340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009342:	07d9      	lsls	r1, r3, #31
 8009344:	d405      	bmi.n	8009352 <_vfiprintf_r+0x202>
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	059a      	lsls	r2, r3, #22
 800934a:	d402      	bmi.n	8009352 <_vfiprintf_r+0x202>
 800934c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800934e:	f7ff fde1 	bl	8008f14 <__retarget_lock_release_recursive>
 8009352:	89ab      	ldrh	r3, [r5, #12]
 8009354:	065b      	lsls	r3, r3, #25
 8009356:	f53f af1d 	bmi.w	8009194 <_vfiprintf_r+0x44>
 800935a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800935c:	e71c      	b.n	8009198 <_vfiprintf_r+0x48>
 800935e:	ab03      	add	r3, sp, #12
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	462a      	mov	r2, r5
 8009364:	4630      	mov	r0, r6
 8009366:	4b06      	ldr	r3, [pc, #24]	; (8009380 <_vfiprintf_r+0x230>)
 8009368:	a904      	add	r1, sp, #16
 800936a:	f000 f87d 	bl	8009468 <_printf_i>
 800936e:	e7e4      	b.n	800933a <_vfiprintf_r+0x1ea>
 8009370:	08009b92 	.word	0x08009b92
 8009374:	08009b98 	.word	0x08009b98
 8009378:	08009b9c 	.word	0x08009b9c
 800937c:	00000000 	.word	0x00000000
 8009380:	0800912b 	.word	0x0800912b

08009384 <_printf_common>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	4616      	mov	r6, r2
 800938a:	4699      	mov	r9, r3
 800938c:	688a      	ldr	r2, [r1, #8]
 800938e:	690b      	ldr	r3, [r1, #16]
 8009390:	4607      	mov	r7, r0
 8009392:	4293      	cmp	r3, r2
 8009394:	bfb8      	it	lt
 8009396:	4613      	movlt	r3, r2
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800939e:	460c      	mov	r4, r1
 80093a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a4:	b10a      	cbz	r2, 80093aa <_printf_common+0x26>
 80093a6:	3301      	adds	r3, #1
 80093a8:	6033      	str	r3, [r6, #0]
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	0699      	lsls	r1, r3, #26
 80093ae:	bf42      	ittt	mi
 80093b0:	6833      	ldrmi	r3, [r6, #0]
 80093b2:	3302      	addmi	r3, #2
 80093b4:	6033      	strmi	r3, [r6, #0]
 80093b6:	6825      	ldr	r5, [r4, #0]
 80093b8:	f015 0506 	ands.w	r5, r5, #6
 80093bc:	d106      	bne.n	80093cc <_printf_common+0x48>
 80093be:	f104 0a19 	add.w	sl, r4, #25
 80093c2:	68e3      	ldr	r3, [r4, #12]
 80093c4:	6832      	ldr	r2, [r6, #0]
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	42ab      	cmp	r3, r5
 80093ca:	dc2b      	bgt.n	8009424 <_printf_common+0xa0>
 80093cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093d0:	1e13      	subs	r3, r2, #0
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	bf18      	it	ne
 80093d6:	2301      	movne	r3, #1
 80093d8:	0692      	lsls	r2, r2, #26
 80093da:	d430      	bmi.n	800943e <_printf_common+0xba>
 80093dc:	4649      	mov	r1, r9
 80093de:	4638      	mov	r0, r7
 80093e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093e4:	47c0      	blx	r8
 80093e6:	3001      	adds	r0, #1
 80093e8:	d023      	beq.n	8009432 <_printf_common+0xae>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	6922      	ldr	r2, [r4, #16]
 80093ee:	f003 0306 	and.w	r3, r3, #6
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	bf14      	ite	ne
 80093f6:	2500      	movne	r5, #0
 80093f8:	6833      	ldreq	r3, [r6, #0]
 80093fa:	f04f 0600 	mov.w	r6, #0
 80093fe:	bf08      	it	eq
 8009400:	68e5      	ldreq	r5, [r4, #12]
 8009402:	f104 041a 	add.w	r4, r4, #26
 8009406:	bf08      	it	eq
 8009408:	1aed      	subeq	r5, r5, r3
 800940a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800940e:	bf08      	it	eq
 8009410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009414:	4293      	cmp	r3, r2
 8009416:	bfc4      	itt	gt
 8009418:	1a9b      	subgt	r3, r3, r2
 800941a:	18ed      	addgt	r5, r5, r3
 800941c:	42b5      	cmp	r5, r6
 800941e:	d11a      	bne.n	8009456 <_printf_common+0xd2>
 8009420:	2000      	movs	r0, #0
 8009422:	e008      	b.n	8009436 <_printf_common+0xb2>
 8009424:	2301      	movs	r3, #1
 8009426:	4652      	mov	r2, sl
 8009428:	4649      	mov	r1, r9
 800942a:	4638      	mov	r0, r7
 800942c:	47c0      	blx	r8
 800942e:	3001      	adds	r0, #1
 8009430:	d103      	bne.n	800943a <_printf_common+0xb6>
 8009432:	f04f 30ff 	mov.w	r0, #4294967295
 8009436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943a:	3501      	adds	r5, #1
 800943c:	e7c1      	b.n	80093c2 <_printf_common+0x3e>
 800943e:	2030      	movs	r0, #48	; 0x30
 8009440:	18e1      	adds	r1, r4, r3
 8009442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800944c:	4422      	add	r2, r4
 800944e:	3302      	adds	r3, #2
 8009450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009454:	e7c2      	b.n	80093dc <_printf_common+0x58>
 8009456:	2301      	movs	r3, #1
 8009458:	4622      	mov	r2, r4
 800945a:	4649      	mov	r1, r9
 800945c:	4638      	mov	r0, r7
 800945e:	47c0      	blx	r8
 8009460:	3001      	adds	r0, #1
 8009462:	d0e6      	beq.n	8009432 <_printf_common+0xae>
 8009464:	3601      	adds	r6, #1
 8009466:	e7d9      	b.n	800941c <_printf_common+0x98>

08009468 <_printf_i>:
 8009468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800946c:	7e0f      	ldrb	r7, [r1, #24]
 800946e:	4691      	mov	r9, r2
 8009470:	2f78      	cmp	r7, #120	; 0x78
 8009472:	4680      	mov	r8, r0
 8009474:	460c      	mov	r4, r1
 8009476:	469a      	mov	sl, r3
 8009478:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800947a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800947e:	d807      	bhi.n	8009490 <_printf_i+0x28>
 8009480:	2f62      	cmp	r7, #98	; 0x62
 8009482:	d80a      	bhi.n	800949a <_printf_i+0x32>
 8009484:	2f00      	cmp	r7, #0
 8009486:	f000 80d5 	beq.w	8009634 <_printf_i+0x1cc>
 800948a:	2f58      	cmp	r7, #88	; 0x58
 800948c:	f000 80c1 	beq.w	8009612 <_printf_i+0x1aa>
 8009490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009498:	e03a      	b.n	8009510 <_printf_i+0xa8>
 800949a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800949e:	2b15      	cmp	r3, #21
 80094a0:	d8f6      	bhi.n	8009490 <_printf_i+0x28>
 80094a2:	a101      	add	r1, pc, #4	; (adr r1, 80094a8 <_printf_i+0x40>)
 80094a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094a8:	08009501 	.word	0x08009501
 80094ac:	08009515 	.word	0x08009515
 80094b0:	08009491 	.word	0x08009491
 80094b4:	08009491 	.word	0x08009491
 80094b8:	08009491 	.word	0x08009491
 80094bc:	08009491 	.word	0x08009491
 80094c0:	08009515 	.word	0x08009515
 80094c4:	08009491 	.word	0x08009491
 80094c8:	08009491 	.word	0x08009491
 80094cc:	08009491 	.word	0x08009491
 80094d0:	08009491 	.word	0x08009491
 80094d4:	0800961b 	.word	0x0800961b
 80094d8:	08009541 	.word	0x08009541
 80094dc:	080095d5 	.word	0x080095d5
 80094e0:	08009491 	.word	0x08009491
 80094e4:	08009491 	.word	0x08009491
 80094e8:	0800963d 	.word	0x0800963d
 80094ec:	08009491 	.word	0x08009491
 80094f0:	08009541 	.word	0x08009541
 80094f4:	08009491 	.word	0x08009491
 80094f8:	08009491 	.word	0x08009491
 80094fc:	080095dd 	.word	0x080095dd
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	1d1a      	adds	r2, r3, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	602a      	str	r2, [r5, #0]
 8009508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800950c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009510:	2301      	movs	r3, #1
 8009512:	e0a0      	b.n	8009656 <_printf_i+0x1ee>
 8009514:	6820      	ldr	r0, [r4, #0]
 8009516:	682b      	ldr	r3, [r5, #0]
 8009518:	0607      	lsls	r7, r0, #24
 800951a:	f103 0104 	add.w	r1, r3, #4
 800951e:	6029      	str	r1, [r5, #0]
 8009520:	d501      	bpl.n	8009526 <_printf_i+0xbe>
 8009522:	681e      	ldr	r6, [r3, #0]
 8009524:	e003      	b.n	800952e <_printf_i+0xc6>
 8009526:	0646      	lsls	r6, r0, #25
 8009528:	d5fb      	bpl.n	8009522 <_printf_i+0xba>
 800952a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800952e:	2e00      	cmp	r6, #0
 8009530:	da03      	bge.n	800953a <_printf_i+0xd2>
 8009532:	232d      	movs	r3, #45	; 0x2d
 8009534:	4276      	negs	r6, r6
 8009536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800953a:	230a      	movs	r3, #10
 800953c:	4859      	ldr	r0, [pc, #356]	; (80096a4 <_printf_i+0x23c>)
 800953e:	e012      	b.n	8009566 <_printf_i+0xfe>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	6820      	ldr	r0, [r4, #0]
 8009544:	1d19      	adds	r1, r3, #4
 8009546:	6029      	str	r1, [r5, #0]
 8009548:	0605      	lsls	r5, r0, #24
 800954a:	d501      	bpl.n	8009550 <_printf_i+0xe8>
 800954c:	681e      	ldr	r6, [r3, #0]
 800954e:	e002      	b.n	8009556 <_printf_i+0xee>
 8009550:	0641      	lsls	r1, r0, #25
 8009552:	d5fb      	bpl.n	800954c <_printf_i+0xe4>
 8009554:	881e      	ldrh	r6, [r3, #0]
 8009556:	2f6f      	cmp	r7, #111	; 0x6f
 8009558:	bf0c      	ite	eq
 800955a:	2308      	moveq	r3, #8
 800955c:	230a      	movne	r3, #10
 800955e:	4851      	ldr	r0, [pc, #324]	; (80096a4 <_printf_i+0x23c>)
 8009560:	2100      	movs	r1, #0
 8009562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009566:	6865      	ldr	r5, [r4, #4]
 8009568:	2d00      	cmp	r5, #0
 800956a:	bfa8      	it	ge
 800956c:	6821      	ldrge	r1, [r4, #0]
 800956e:	60a5      	str	r5, [r4, #8]
 8009570:	bfa4      	itt	ge
 8009572:	f021 0104 	bicge.w	r1, r1, #4
 8009576:	6021      	strge	r1, [r4, #0]
 8009578:	b90e      	cbnz	r6, 800957e <_printf_i+0x116>
 800957a:	2d00      	cmp	r5, #0
 800957c:	d04b      	beq.n	8009616 <_printf_i+0x1ae>
 800957e:	4615      	mov	r5, r2
 8009580:	fbb6 f1f3 	udiv	r1, r6, r3
 8009584:	fb03 6711 	mls	r7, r3, r1, r6
 8009588:	5dc7      	ldrb	r7, [r0, r7]
 800958a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800958e:	4637      	mov	r7, r6
 8009590:	42bb      	cmp	r3, r7
 8009592:	460e      	mov	r6, r1
 8009594:	d9f4      	bls.n	8009580 <_printf_i+0x118>
 8009596:	2b08      	cmp	r3, #8
 8009598:	d10b      	bne.n	80095b2 <_printf_i+0x14a>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	07de      	lsls	r6, r3, #31
 800959e:	d508      	bpl.n	80095b2 <_printf_i+0x14a>
 80095a0:	6923      	ldr	r3, [r4, #16]
 80095a2:	6861      	ldr	r1, [r4, #4]
 80095a4:	4299      	cmp	r1, r3
 80095a6:	bfde      	ittt	le
 80095a8:	2330      	movle	r3, #48	; 0x30
 80095aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095b2:	1b52      	subs	r2, r2, r5
 80095b4:	6122      	str	r2, [r4, #16]
 80095b6:	464b      	mov	r3, r9
 80095b8:	4621      	mov	r1, r4
 80095ba:	4640      	mov	r0, r8
 80095bc:	f8cd a000 	str.w	sl, [sp]
 80095c0:	aa03      	add	r2, sp, #12
 80095c2:	f7ff fedf 	bl	8009384 <_printf_common>
 80095c6:	3001      	adds	r0, #1
 80095c8:	d14a      	bne.n	8009660 <_printf_i+0x1f8>
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	b004      	add	sp, #16
 80095d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	f043 0320 	orr.w	r3, r3, #32
 80095da:	6023      	str	r3, [r4, #0]
 80095dc:	2778      	movs	r7, #120	; 0x78
 80095de:	4832      	ldr	r0, [pc, #200]	; (80096a8 <_printf_i+0x240>)
 80095e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	6829      	ldr	r1, [r5, #0]
 80095e8:	061f      	lsls	r7, r3, #24
 80095ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80095ee:	d402      	bmi.n	80095f6 <_printf_i+0x18e>
 80095f0:	065f      	lsls	r7, r3, #25
 80095f2:	bf48      	it	mi
 80095f4:	b2b6      	uxthmi	r6, r6
 80095f6:	07df      	lsls	r7, r3, #31
 80095f8:	bf48      	it	mi
 80095fa:	f043 0320 	orrmi.w	r3, r3, #32
 80095fe:	6029      	str	r1, [r5, #0]
 8009600:	bf48      	it	mi
 8009602:	6023      	strmi	r3, [r4, #0]
 8009604:	b91e      	cbnz	r6, 800960e <_printf_i+0x1a6>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	f023 0320 	bic.w	r3, r3, #32
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	2310      	movs	r3, #16
 8009610:	e7a6      	b.n	8009560 <_printf_i+0xf8>
 8009612:	4824      	ldr	r0, [pc, #144]	; (80096a4 <_printf_i+0x23c>)
 8009614:	e7e4      	b.n	80095e0 <_printf_i+0x178>
 8009616:	4615      	mov	r5, r2
 8009618:	e7bd      	b.n	8009596 <_printf_i+0x12e>
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	6826      	ldr	r6, [r4, #0]
 800961e:	1d18      	adds	r0, r3, #4
 8009620:	6961      	ldr	r1, [r4, #20]
 8009622:	6028      	str	r0, [r5, #0]
 8009624:	0635      	lsls	r5, r6, #24
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	d501      	bpl.n	800962e <_printf_i+0x1c6>
 800962a:	6019      	str	r1, [r3, #0]
 800962c:	e002      	b.n	8009634 <_printf_i+0x1cc>
 800962e:	0670      	lsls	r0, r6, #25
 8009630:	d5fb      	bpl.n	800962a <_printf_i+0x1c2>
 8009632:	8019      	strh	r1, [r3, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	4615      	mov	r5, r2
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	e7bc      	b.n	80095b6 <_printf_i+0x14e>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	2100      	movs	r1, #0
 8009640:	1d1a      	adds	r2, r3, #4
 8009642:	602a      	str	r2, [r5, #0]
 8009644:	681d      	ldr	r5, [r3, #0]
 8009646:	6862      	ldr	r2, [r4, #4]
 8009648:	4628      	mov	r0, r5
 800964a:	f000 f9b3 	bl	80099b4 <memchr>
 800964e:	b108      	cbz	r0, 8009654 <_printf_i+0x1ec>
 8009650:	1b40      	subs	r0, r0, r5
 8009652:	6060      	str	r0, [r4, #4]
 8009654:	6863      	ldr	r3, [r4, #4]
 8009656:	6123      	str	r3, [r4, #16]
 8009658:	2300      	movs	r3, #0
 800965a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800965e:	e7aa      	b.n	80095b6 <_printf_i+0x14e>
 8009660:	462a      	mov	r2, r5
 8009662:	4649      	mov	r1, r9
 8009664:	4640      	mov	r0, r8
 8009666:	6923      	ldr	r3, [r4, #16]
 8009668:	47d0      	blx	sl
 800966a:	3001      	adds	r0, #1
 800966c:	d0ad      	beq.n	80095ca <_printf_i+0x162>
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	079b      	lsls	r3, r3, #30
 8009672:	d413      	bmi.n	800969c <_printf_i+0x234>
 8009674:	68e0      	ldr	r0, [r4, #12]
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	4298      	cmp	r0, r3
 800967a:	bfb8      	it	lt
 800967c:	4618      	movlt	r0, r3
 800967e:	e7a6      	b.n	80095ce <_printf_i+0x166>
 8009680:	2301      	movs	r3, #1
 8009682:	4632      	mov	r2, r6
 8009684:	4649      	mov	r1, r9
 8009686:	4640      	mov	r0, r8
 8009688:	47d0      	blx	sl
 800968a:	3001      	adds	r0, #1
 800968c:	d09d      	beq.n	80095ca <_printf_i+0x162>
 800968e:	3501      	adds	r5, #1
 8009690:	68e3      	ldr	r3, [r4, #12]
 8009692:	9903      	ldr	r1, [sp, #12]
 8009694:	1a5b      	subs	r3, r3, r1
 8009696:	42ab      	cmp	r3, r5
 8009698:	dcf2      	bgt.n	8009680 <_printf_i+0x218>
 800969a:	e7eb      	b.n	8009674 <_printf_i+0x20c>
 800969c:	2500      	movs	r5, #0
 800969e:	f104 0619 	add.w	r6, r4, #25
 80096a2:	e7f5      	b.n	8009690 <_printf_i+0x228>
 80096a4:	08009ba3 	.word	0x08009ba3
 80096a8:	08009bb4 	.word	0x08009bb4

080096ac <__sflush_r>:
 80096ac:	898a      	ldrh	r2, [r1, #12]
 80096ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b0:	4605      	mov	r5, r0
 80096b2:	0710      	lsls	r0, r2, #28
 80096b4:	460c      	mov	r4, r1
 80096b6:	d457      	bmi.n	8009768 <__sflush_r+0xbc>
 80096b8:	684b      	ldr	r3, [r1, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	dc04      	bgt.n	80096c8 <__sflush_r+0x1c>
 80096be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dc01      	bgt.n	80096c8 <__sflush_r+0x1c>
 80096c4:	2000      	movs	r0, #0
 80096c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096ca:	2e00      	cmp	r6, #0
 80096cc:	d0fa      	beq.n	80096c4 <__sflush_r+0x18>
 80096ce:	2300      	movs	r3, #0
 80096d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096d4:	682f      	ldr	r7, [r5, #0]
 80096d6:	6a21      	ldr	r1, [r4, #32]
 80096d8:	602b      	str	r3, [r5, #0]
 80096da:	d032      	beq.n	8009742 <__sflush_r+0x96>
 80096dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	075a      	lsls	r2, r3, #29
 80096e2:	d505      	bpl.n	80096f0 <__sflush_r+0x44>
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	1ac0      	subs	r0, r0, r3
 80096e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096ea:	b10b      	cbz	r3, 80096f0 <__sflush_r+0x44>
 80096ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096ee:	1ac0      	subs	r0, r0, r3
 80096f0:	2300      	movs	r3, #0
 80096f2:	4602      	mov	r2, r0
 80096f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096f6:	4628      	mov	r0, r5
 80096f8:	6a21      	ldr	r1, [r4, #32]
 80096fa:	47b0      	blx	r6
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	d106      	bne.n	8009710 <__sflush_r+0x64>
 8009702:	6829      	ldr	r1, [r5, #0]
 8009704:	291d      	cmp	r1, #29
 8009706:	d82b      	bhi.n	8009760 <__sflush_r+0xb4>
 8009708:	4a28      	ldr	r2, [pc, #160]	; (80097ac <__sflush_r+0x100>)
 800970a:	410a      	asrs	r2, r1
 800970c:	07d6      	lsls	r6, r2, #31
 800970e:	d427      	bmi.n	8009760 <__sflush_r+0xb4>
 8009710:	2200      	movs	r2, #0
 8009712:	6062      	str	r2, [r4, #4]
 8009714:	6922      	ldr	r2, [r4, #16]
 8009716:	04d9      	lsls	r1, r3, #19
 8009718:	6022      	str	r2, [r4, #0]
 800971a:	d504      	bpl.n	8009726 <__sflush_r+0x7a>
 800971c:	1c42      	adds	r2, r0, #1
 800971e:	d101      	bne.n	8009724 <__sflush_r+0x78>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b903      	cbnz	r3, 8009726 <__sflush_r+0x7a>
 8009724:	6560      	str	r0, [r4, #84]	; 0x54
 8009726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009728:	602f      	str	r7, [r5, #0]
 800972a:	2900      	cmp	r1, #0
 800972c:	d0ca      	beq.n	80096c4 <__sflush_r+0x18>
 800972e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009732:	4299      	cmp	r1, r3
 8009734:	d002      	beq.n	800973c <__sflush_r+0x90>
 8009736:	4628      	mov	r0, r5
 8009738:	f7ff fbee 	bl	8008f18 <_free_r>
 800973c:	2000      	movs	r0, #0
 800973e:	6360      	str	r0, [r4, #52]	; 0x34
 8009740:	e7c1      	b.n	80096c6 <__sflush_r+0x1a>
 8009742:	2301      	movs	r3, #1
 8009744:	4628      	mov	r0, r5
 8009746:	47b0      	blx	r6
 8009748:	1c41      	adds	r1, r0, #1
 800974a:	d1c8      	bne.n	80096de <__sflush_r+0x32>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0c5      	beq.n	80096de <__sflush_r+0x32>
 8009752:	2b1d      	cmp	r3, #29
 8009754:	d001      	beq.n	800975a <__sflush_r+0xae>
 8009756:	2b16      	cmp	r3, #22
 8009758:	d101      	bne.n	800975e <__sflush_r+0xb2>
 800975a:	602f      	str	r7, [r5, #0]
 800975c:	e7b2      	b.n	80096c4 <__sflush_r+0x18>
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	e7ae      	b.n	80096c6 <__sflush_r+0x1a>
 8009768:	690f      	ldr	r7, [r1, #16]
 800976a:	2f00      	cmp	r7, #0
 800976c:	d0aa      	beq.n	80096c4 <__sflush_r+0x18>
 800976e:	0793      	lsls	r3, r2, #30
 8009770:	bf18      	it	ne
 8009772:	2300      	movne	r3, #0
 8009774:	680e      	ldr	r6, [r1, #0]
 8009776:	bf08      	it	eq
 8009778:	694b      	ldreq	r3, [r1, #20]
 800977a:	1bf6      	subs	r6, r6, r7
 800977c:	600f      	str	r7, [r1, #0]
 800977e:	608b      	str	r3, [r1, #8]
 8009780:	2e00      	cmp	r6, #0
 8009782:	dd9f      	ble.n	80096c4 <__sflush_r+0x18>
 8009784:	4633      	mov	r3, r6
 8009786:	463a      	mov	r2, r7
 8009788:	4628      	mov	r0, r5
 800978a:	6a21      	ldr	r1, [r4, #32]
 800978c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009790:	47e0      	blx	ip
 8009792:	2800      	cmp	r0, #0
 8009794:	dc06      	bgt.n	80097a4 <__sflush_r+0xf8>
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a0:	81a3      	strh	r3, [r4, #12]
 80097a2:	e790      	b.n	80096c6 <__sflush_r+0x1a>
 80097a4:	4407      	add	r7, r0
 80097a6:	1a36      	subs	r6, r6, r0
 80097a8:	e7ea      	b.n	8009780 <__sflush_r+0xd4>
 80097aa:	bf00      	nop
 80097ac:	dfbffffe 	.word	0xdfbffffe

080097b0 <_fflush_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	690b      	ldr	r3, [r1, #16]
 80097b4:	4605      	mov	r5, r0
 80097b6:	460c      	mov	r4, r1
 80097b8:	b913      	cbnz	r3, 80097c0 <_fflush_r+0x10>
 80097ba:	2500      	movs	r5, #0
 80097bc:	4628      	mov	r0, r5
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	b118      	cbz	r0, 80097ca <_fflush_r+0x1a>
 80097c2:	6a03      	ldr	r3, [r0, #32]
 80097c4:	b90b      	cbnz	r3, 80097ca <_fflush_r+0x1a>
 80097c6:	f7ff fa97 	bl	8008cf8 <__sinit>
 80097ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d0f3      	beq.n	80097ba <_fflush_r+0xa>
 80097d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097d4:	07d0      	lsls	r0, r2, #31
 80097d6:	d404      	bmi.n	80097e2 <_fflush_r+0x32>
 80097d8:	0599      	lsls	r1, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_fflush_r+0x32>
 80097dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097de:	f7ff fb98 	bl	8008f12 <__retarget_lock_acquire_recursive>
 80097e2:	4628      	mov	r0, r5
 80097e4:	4621      	mov	r1, r4
 80097e6:	f7ff ff61 	bl	80096ac <__sflush_r>
 80097ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ec:	4605      	mov	r5, r0
 80097ee:	07da      	lsls	r2, r3, #31
 80097f0:	d4e4      	bmi.n	80097bc <_fflush_r+0xc>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	059b      	lsls	r3, r3, #22
 80097f6:	d4e1      	bmi.n	80097bc <_fflush_r+0xc>
 80097f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097fa:	f7ff fb8b 	bl	8008f14 <__retarget_lock_release_recursive>
 80097fe:	e7dd      	b.n	80097bc <_fflush_r+0xc>

08009800 <_putc_r>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	460d      	mov	r5, r1
 8009804:	4614      	mov	r4, r2
 8009806:	4606      	mov	r6, r0
 8009808:	b118      	cbz	r0, 8009812 <_putc_r+0x12>
 800980a:	6a03      	ldr	r3, [r0, #32]
 800980c:	b90b      	cbnz	r3, 8009812 <_putc_r+0x12>
 800980e:	f7ff fa73 	bl	8008cf8 <__sinit>
 8009812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009814:	07d8      	lsls	r0, r3, #31
 8009816:	d405      	bmi.n	8009824 <_putc_r+0x24>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	0599      	lsls	r1, r3, #22
 800981c:	d402      	bmi.n	8009824 <_putc_r+0x24>
 800981e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009820:	f7ff fb77 	bl	8008f12 <__retarget_lock_acquire_recursive>
 8009824:	68a3      	ldr	r3, [r4, #8]
 8009826:	3b01      	subs	r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	60a3      	str	r3, [r4, #8]
 800982c:	da05      	bge.n	800983a <_putc_r+0x3a>
 800982e:	69a2      	ldr	r2, [r4, #24]
 8009830:	4293      	cmp	r3, r2
 8009832:	db12      	blt.n	800985a <_putc_r+0x5a>
 8009834:	b2eb      	uxtb	r3, r5
 8009836:	2b0a      	cmp	r3, #10
 8009838:	d00f      	beq.n	800985a <_putc_r+0x5a>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	6022      	str	r2, [r4, #0]
 8009840:	701d      	strb	r5, [r3, #0]
 8009842:	b2ed      	uxtb	r5, r5
 8009844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009846:	07da      	lsls	r2, r3, #31
 8009848:	d405      	bmi.n	8009856 <_putc_r+0x56>
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	059b      	lsls	r3, r3, #22
 800984e:	d402      	bmi.n	8009856 <_putc_r+0x56>
 8009850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009852:	f7ff fb5f 	bl	8008f14 <__retarget_lock_release_recursive>
 8009856:	4628      	mov	r0, r5
 8009858:	bd70      	pop	{r4, r5, r6, pc}
 800985a:	4629      	mov	r1, r5
 800985c:	4622      	mov	r2, r4
 800985e:	4630      	mov	r0, r6
 8009860:	f000 f802 	bl	8009868 <__swbuf_r>
 8009864:	4605      	mov	r5, r0
 8009866:	e7ed      	b.n	8009844 <_putc_r+0x44>

08009868 <__swbuf_r>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	460e      	mov	r6, r1
 800986c:	4614      	mov	r4, r2
 800986e:	4605      	mov	r5, r0
 8009870:	b118      	cbz	r0, 800987a <__swbuf_r+0x12>
 8009872:	6a03      	ldr	r3, [r0, #32]
 8009874:	b90b      	cbnz	r3, 800987a <__swbuf_r+0x12>
 8009876:	f7ff fa3f 	bl	8008cf8 <__sinit>
 800987a:	69a3      	ldr	r3, [r4, #24]
 800987c:	60a3      	str	r3, [r4, #8]
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	071a      	lsls	r2, r3, #28
 8009882:	d525      	bpl.n	80098d0 <__swbuf_r+0x68>
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	b31b      	cbz	r3, 80098d0 <__swbuf_r+0x68>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	6922      	ldr	r2, [r4, #16]
 800988c:	b2f6      	uxtb	r6, r6
 800988e:	1a98      	subs	r0, r3, r2
 8009890:	6963      	ldr	r3, [r4, #20]
 8009892:	4637      	mov	r7, r6
 8009894:	4283      	cmp	r3, r0
 8009896:	dc04      	bgt.n	80098a2 <__swbuf_r+0x3a>
 8009898:	4621      	mov	r1, r4
 800989a:	4628      	mov	r0, r5
 800989c:	f7ff ff88 	bl	80097b0 <_fflush_r>
 80098a0:	b9e0      	cbnz	r0, 80098dc <__swbuf_r+0x74>
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	3b01      	subs	r3, #1
 80098a6:	60a3      	str	r3, [r4, #8]
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	1c5a      	adds	r2, r3, #1
 80098ac:	6022      	str	r2, [r4, #0]
 80098ae:	701e      	strb	r6, [r3, #0]
 80098b0:	6962      	ldr	r2, [r4, #20]
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d004      	beq.n	80098c2 <__swbuf_r+0x5a>
 80098b8:	89a3      	ldrh	r3, [r4, #12]
 80098ba:	07db      	lsls	r3, r3, #31
 80098bc:	d506      	bpl.n	80098cc <__swbuf_r+0x64>
 80098be:	2e0a      	cmp	r6, #10
 80098c0:	d104      	bne.n	80098cc <__swbuf_r+0x64>
 80098c2:	4621      	mov	r1, r4
 80098c4:	4628      	mov	r0, r5
 80098c6:	f7ff ff73 	bl	80097b0 <_fflush_r>
 80098ca:	b938      	cbnz	r0, 80098dc <__swbuf_r+0x74>
 80098cc:	4638      	mov	r0, r7
 80098ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d0:	4621      	mov	r1, r4
 80098d2:	4628      	mov	r0, r5
 80098d4:	f000 f806 	bl	80098e4 <__swsetup_r>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d0d5      	beq.n	8009888 <__swbuf_r+0x20>
 80098dc:	f04f 37ff 	mov.w	r7, #4294967295
 80098e0:	e7f4      	b.n	80098cc <__swbuf_r+0x64>
	...

080098e4 <__swsetup_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4b2a      	ldr	r3, [pc, #168]	; (8009990 <__swsetup_r+0xac>)
 80098e8:	4605      	mov	r5, r0
 80098ea:	6818      	ldr	r0, [r3, #0]
 80098ec:	460c      	mov	r4, r1
 80098ee:	b118      	cbz	r0, 80098f8 <__swsetup_r+0x14>
 80098f0:	6a03      	ldr	r3, [r0, #32]
 80098f2:	b90b      	cbnz	r3, 80098f8 <__swsetup_r+0x14>
 80098f4:	f7ff fa00 	bl	8008cf8 <__sinit>
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098fe:	0718      	lsls	r0, r3, #28
 8009900:	d422      	bmi.n	8009948 <__swsetup_r+0x64>
 8009902:	06d9      	lsls	r1, r3, #27
 8009904:	d407      	bmi.n	8009916 <__swsetup_r+0x32>
 8009906:	2309      	movs	r3, #9
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800990e:	f04f 30ff 	mov.w	r0, #4294967295
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	e034      	b.n	8009980 <__swsetup_r+0x9c>
 8009916:	0758      	lsls	r0, r3, #29
 8009918:	d512      	bpl.n	8009940 <__swsetup_r+0x5c>
 800991a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800991c:	b141      	cbz	r1, 8009930 <__swsetup_r+0x4c>
 800991e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009922:	4299      	cmp	r1, r3
 8009924:	d002      	beq.n	800992c <__swsetup_r+0x48>
 8009926:	4628      	mov	r0, r5
 8009928:	f7ff faf6 	bl	8008f18 <_free_r>
 800992c:	2300      	movs	r3, #0
 800992e:	6363      	str	r3, [r4, #52]	; 0x34
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	2300      	movs	r3, #0
 800993a:	6063      	str	r3, [r4, #4]
 800993c:	6923      	ldr	r3, [r4, #16]
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	f043 0308 	orr.w	r3, r3, #8
 8009946:	81a3      	strh	r3, [r4, #12]
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	b94b      	cbnz	r3, 8009960 <__swsetup_r+0x7c>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009956:	d003      	beq.n	8009960 <__swsetup_r+0x7c>
 8009958:	4621      	mov	r1, r4
 800995a:	4628      	mov	r0, r5
 800995c:	f000 f85d 	bl	8009a1a <__smakebuf_r>
 8009960:	89a0      	ldrh	r0, [r4, #12]
 8009962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009966:	f010 0301 	ands.w	r3, r0, #1
 800996a:	d00a      	beq.n	8009982 <__swsetup_r+0x9e>
 800996c:	2300      	movs	r3, #0
 800996e:	60a3      	str	r3, [r4, #8]
 8009970:	6963      	ldr	r3, [r4, #20]
 8009972:	425b      	negs	r3, r3
 8009974:	61a3      	str	r3, [r4, #24]
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	b943      	cbnz	r3, 800998c <__swsetup_r+0xa8>
 800997a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800997e:	d1c4      	bne.n	800990a <__swsetup_r+0x26>
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	0781      	lsls	r1, r0, #30
 8009984:	bf58      	it	pl
 8009986:	6963      	ldrpl	r3, [r4, #20]
 8009988:	60a3      	str	r3, [r4, #8]
 800998a:	e7f4      	b.n	8009976 <__swsetup_r+0x92>
 800998c:	2000      	movs	r0, #0
 800998e:	e7f7      	b.n	8009980 <__swsetup_r+0x9c>
 8009990:	200001d8 	.word	0x200001d8

08009994 <_sbrk_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	2300      	movs	r3, #0
 8009998:	4d05      	ldr	r5, [pc, #20]	; (80099b0 <_sbrk_r+0x1c>)
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	f7f7 f948 	bl	8000c34 <_sbrk>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_sbrk_r+0x1a>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_sbrk_r+0x1a>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	20001994 	.word	0x20001994

080099b4 <memchr>:
 80099b4:	4603      	mov	r3, r0
 80099b6:	b510      	push	{r4, lr}
 80099b8:	b2c9      	uxtb	r1, r1
 80099ba:	4402      	add	r2, r0
 80099bc:	4293      	cmp	r3, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	d101      	bne.n	80099c6 <memchr+0x12>
 80099c2:	2000      	movs	r0, #0
 80099c4:	e003      	b.n	80099ce <memchr+0x1a>
 80099c6:	7804      	ldrb	r4, [r0, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	428c      	cmp	r4, r1
 80099cc:	d1f6      	bne.n	80099bc <memchr+0x8>
 80099ce:	bd10      	pop	{r4, pc}

080099d0 <__swhatbuf_r>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	460c      	mov	r4, r1
 80099d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d8:	4615      	mov	r5, r2
 80099da:	2900      	cmp	r1, #0
 80099dc:	461e      	mov	r6, r3
 80099de:	b096      	sub	sp, #88	; 0x58
 80099e0:	da0c      	bge.n	80099fc <__swhatbuf_r+0x2c>
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	2100      	movs	r1, #0
 80099e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80099ea:	bf0c      	ite	eq
 80099ec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80099f0:	2340      	movne	r3, #64	; 0x40
 80099f2:	2000      	movs	r0, #0
 80099f4:	6031      	str	r1, [r6, #0]
 80099f6:	602b      	str	r3, [r5, #0]
 80099f8:	b016      	add	sp, #88	; 0x58
 80099fa:	bd70      	pop	{r4, r5, r6, pc}
 80099fc:	466a      	mov	r2, sp
 80099fe:	f000 f849 	bl	8009a94 <_fstat_r>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	dbed      	blt.n	80099e2 <__swhatbuf_r+0x12>
 8009a06:	9901      	ldr	r1, [sp, #4]
 8009a08:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009a0c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009a10:	4259      	negs	r1, r3
 8009a12:	4159      	adcs	r1, r3
 8009a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a18:	e7eb      	b.n	80099f2 <__swhatbuf_r+0x22>

08009a1a <__smakebuf_r>:
 8009a1a:	898b      	ldrh	r3, [r1, #12]
 8009a1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a1e:	079d      	lsls	r5, r3, #30
 8009a20:	4606      	mov	r6, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	d507      	bpl.n	8009a36 <__smakebuf_r+0x1c>
 8009a26:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a2a:	6023      	str	r3, [r4, #0]
 8009a2c:	6123      	str	r3, [r4, #16]
 8009a2e:	2301      	movs	r3, #1
 8009a30:	6163      	str	r3, [r4, #20]
 8009a32:	b002      	add	sp, #8
 8009a34:	bd70      	pop	{r4, r5, r6, pc}
 8009a36:	466a      	mov	r2, sp
 8009a38:	ab01      	add	r3, sp, #4
 8009a3a:	f7ff ffc9 	bl	80099d0 <__swhatbuf_r>
 8009a3e:	9900      	ldr	r1, [sp, #0]
 8009a40:	4605      	mov	r5, r0
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff fad0 	bl	8008fe8 <_malloc_r>
 8009a48:	b948      	cbnz	r0, 8009a5e <__smakebuf_r+0x44>
 8009a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4e:	059a      	lsls	r2, r3, #22
 8009a50:	d4ef      	bmi.n	8009a32 <__smakebuf_r+0x18>
 8009a52:	f023 0303 	bic.w	r3, r3, #3
 8009a56:	f043 0302 	orr.w	r3, r3, #2
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	e7e3      	b.n	8009a26 <__smakebuf_r+0xc>
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	6020      	str	r0, [r4, #0]
 8009a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	9b00      	ldr	r3, [sp, #0]
 8009a6a:	6120      	str	r0, [r4, #16]
 8009a6c:	6163      	str	r3, [r4, #20]
 8009a6e:	9b01      	ldr	r3, [sp, #4]
 8009a70:	b15b      	cbz	r3, 8009a8a <__smakebuf_r+0x70>
 8009a72:	4630      	mov	r0, r6
 8009a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a78:	f000 f81e 	bl	8009ab8 <_isatty_r>
 8009a7c:	b128      	cbz	r0, 8009a8a <__smakebuf_r+0x70>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	f023 0303 	bic.w	r3, r3, #3
 8009a84:	f043 0301 	orr.w	r3, r3, #1
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	431d      	orrs	r5, r3
 8009a8e:	81a5      	strh	r5, [r4, #12]
 8009a90:	e7cf      	b.n	8009a32 <__smakebuf_r+0x18>
	...

08009a94 <_fstat_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	2300      	movs	r3, #0
 8009a98:	4d06      	ldr	r5, [pc, #24]	; (8009ab4 <_fstat_r+0x20>)
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	f7f7 f8a1 	bl	8000be8 <_fstat>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	d102      	bne.n	8009ab0 <_fstat_r+0x1c>
 8009aaa:	682b      	ldr	r3, [r5, #0]
 8009aac:	b103      	cbz	r3, 8009ab0 <_fstat_r+0x1c>
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	bd38      	pop	{r3, r4, r5, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20001994 	.word	0x20001994

08009ab8 <_isatty_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	2300      	movs	r3, #0
 8009abc:	4d05      	ldr	r5, [pc, #20]	; (8009ad4 <_isatty_r+0x1c>)
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4608      	mov	r0, r1
 8009ac2:	602b      	str	r3, [r5, #0]
 8009ac4:	f7f7 f89f 	bl	8000c06 <_isatty>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d102      	bne.n	8009ad2 <_isatty_r+0x1a>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <_isatty_r+0x1a>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	20001994 	.word	0x20001994

08009ad8 <_init>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	bf00      	nop
 8009adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ade:	bc08      	pop	{r3}
 8009ae0:	469e      	mov	lr, r3
 8009ae2:	4770      	bx	lr

08009ae4 <_fini>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr
