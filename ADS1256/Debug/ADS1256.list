
ADS1256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a094  0800a094  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a094  0800a094  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a094  0800a094  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a098  0800a098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca0  200001dc  0800a278  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e7c  0800a278  00021e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc86  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d6  00000000  00000000  0002fece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2d  00000000  00000000  00034180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001afb5  00000000  00000000  00034bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013983  00000000  00000000  0004fb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008900e  00000000  00000000  000634e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f88  00000000  00000000  000ec4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000f047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08009f64 	.word	0x08009f64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08009f64 	.word	0x08009f64

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <readRegister>:
#include <ads1256.h>

uint8_t readRegister(uint8_t reg){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
    uint8_t dat;

    uint8_t command[2];
    command[0] = CMD_RREG_BASE | reg;
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f043 0310 	orr.w	r3, r3, #16
 800016c:	b2db      	uxtb	r3, r3
 800016e:	733b      	strb	r3, [r7, #12]
    command[1] = 0; // read (this + 1) registers
 8000170:	2300      	movs	r3, #0
 8000172:	737b      	strb	r3, [r7, #13]

    HAL_SPI_Transmit(&hspi1, command, 2, HAL_MAX_DELAY); // Send register address and data
 8000174:	f107 010c 	add.w	r1, r7, #12
 8000178:	f04f 33ff 	mov.w	r3, #4294967295
 800017c:	2202      	movs	r2, #2
 800017e:	4808      	ldr	r0, [pc, #32]	; (80001a0 <readRegister+0x44>)
 8000180:	f003 fcac 	bl	8003adc <HAL_SPI_Transmit>
    ;
    ;
    ;
    ;
    ;
    HAL_SPI_Receive(&hspi1, &dat, 1, HAL_MAX_DELAY); // read register
 8000184:	f107 010f 	add.w	r1, r7, #15
 8000188:	f04f 33ff 	mov.w	r3, #4294967295
 800018c:	2201      	movs	r2, #1
 800018e:	4804      	ldr	r0, [pc, #16]	; (80001a0 <readRegister+0x44>)
 8000190:	f003 fde7 	bl	8003d62 <HAL_SPI_Receive>
    return dat;
 8000194:	7bfb      	ldrb	r3, [r7, #15]
}
 8000196:	4618      	mov	r0, r3
 8000198:	3710      	adds	r7, #16
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	20000204 	.word	0x20000204

080001a4 <sendCommand>:


void sendCommand(uint8_t cmd){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80001ae:	1df9      	adds	r1, r7, #7
 80001b0:	f04f 33ff 	mov.w	r3, #4294967295
 80001b4:	2201      	movs	r2, #1
 80001b6:	4803      	ldr	r0, [pc, #12]	; (80001c4 <sendCommand+0x20>)
 80001b8:	f003 fc90 	bl	8003adc <HAL_SPI_Transmit>
    ;
}
 80001bc:	bf00      	nop
 80001be:	3708      	adds	r7, #8
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	20000204 	.word	0x20000204

080001c8 <writeRegister>:


void writeRegister(uint8_t reg, uint8_t data){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[3];

    txData[0] = CMD_WREG_BASE | reg;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	733b      	strb	r3, [r7, #12]
    txData[1] = 0;          // (this + 1) registers will be written (0+1=1)
 80001e2:	2300      	movs	r3, #0
 80001e4:	737b      	strb	r3, [r7, #13]
    txData[2] = data;
 80001e6:	79bb      	ldrb	r3, [r7, #6]
 80001e8:	73bb      	strb	r3, [r7, #14]

    HAL_SPI_Transmit(&hspi1, txData, 3, HAL_MAX_DELAY); // Send register address and data
 80001ea:	f107 010c 	add.w	r1, r7, #12
 80001ee:	f04f 33ff 	mov.w	r3, #4294967295
 80001f2:	2203      	movs	r2, #3
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <writeRegister+0x3c>)
 80001f6:	f003 fc71 	bl	8003adc <HAL_SPI_Transmit>
    ;
}
 80001fa:	bf00      	nop
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000204 	.word	0x20000204

08000208 <setupADS1256>:


// Set up ADS1256 configuration registers
// Initialize SPI communication with ADS1256
// Configure the ADC settings
uint8_t setupADS1256() {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0

	HAL_Delay(100);
 800020e:	2064      	movs	r0, #100	; 0x64
 8000210:	f000 fe44 	bl	8000e9c <HAL_Delay>
	sendCommand(CMD_RESET);
 8000214:	20fe      	movs	r0, #254	; 0xfe
 8000216:	f7ff ffc5 	bl	80001a4 <sendCommand>
	HAL_Delay(100);
 800021a:	2064      	movs	r0, #100	; 0x64
 800021c:	f000 fe3e 	bl	8000e9c <HAL_Delay>

    // read the STATUS register
	uint8_t status = readRegister(REG_STATUS);
 8000220:	2000      	movs	r0, #0
 8000222:	f7ff ff9b 	bl	800015c <readRegister>
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
    writeRegister(REG_STATUS, (status & 0xF0) | 0x02); //enable buffer amplifier
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	f023 030f 	bic.w	r3, r3, #15
 8000232:	b25b      	sxtb	r3, r3
 8000234:	f043 0302 	orr.w	r3, r3, #2
 8000238:	b25b      	sxtb	r3, r3
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4619      	mov	r1, r3
 800023e:	2000      	movs	r0, #0
 8000240:	f7ff ffc2 	bl	80001c8 <writeRegister>
    while(NOT_DRDY) ;	//wait for calibration to complete
 8000244:	bf00      	nop
 8000246:	2102      	movs	r1, #2
 8000248:	4816      	ldr	r0, [pc, #88]	; (80002a4 <setupADS1256+0x9c>)
 800024a:	f001 f90f 	bl	800146c <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d1f8      	bne.n	8000246 <setupADS1256+0x3e>

    // Configure the DRATE register for desired data rate
    writeRegister(REG_DRATE, SPS_50); // Set data rate to 50Hz
 8000254:	2163      	movs	r1, #99	; 0x63
 8000256:	2003      	movs	r0, #3
 8000258:	f7ff ffb6 	bl	80001c8 <writeRegister>
    while(NOT_DRDY) ;	//wait to complete
 800025c:	bf00      	nop
 800025e:	2102      	movs	r1, #2
 8000260:	4810      	ldr	r0, [pc, #64]	; (80002a4 <setupADS1256+0x9c>)
 8000262:	f001 f903 	bl	800146c <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1f8      	bne.n	800025e <setupADS1256+0x56>

    // Configure the ADCON register
    writeRegister(REG_ADCON, PGA1 ); // Set PGA gain to 1
 800026c:	2100      	movs	r1, #0
 800026e:	2002      	movs	r0, #2
 8000270:	f7ff ffaa 	bl	80001c8 <writeRegister>
    while(NOT_DRDY) ;	//wait to complete
 8000274:	bf00      	nop
 8000276:	2102      	movs	r1, #2
 8000278:	480a      	ldr	r0, [pc, #40]	; (80002a4 <setupADS1256+0x9c>)
 800027a:	f001 f8f7 	bl	800146c <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f8      	bne.n	8000276 <setupADS1256+0x6e>
    
    sendCommand(CMD_SELFCAL); //start Offset and Gain Self-Calibration
 8000284:	20f0      	movs	r0, #240	; 0xf0
 8000286:	f7ff ff8d 	bl	80001a4 <sendCommand>
    //can last up to 2 seconds for low data rates
    while(NOT_DRDY) ;	//wait for calibration to complete
 800028a:	bf00      	nop
 800028c:	2102      	movs	r1, #2
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <setupADS1256+0x9c>)
 8000290:	f001 f8ec 	bl	800146c <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1f8      	bne.n	800028c <setupADS1256+0x84>


    return status;
 800029a:	79fb      	ldrb	r3, [r7, #7]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40010c00 	.word	0x40010c00

080002a8 <stopSampling>:

void stopSampling(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
    while(NOT_DRDY) ;	//wait to complete
 80002ac:	bf00      	nop
 80002ae:	2102      	movs	r1, #2
 80002b0:	4809      	ldr	r0, [pc, #36]	; (80002d8 <stopSampling+0x30>)
 80002b2:	f001 f8db 	bl	800146c <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f8      	bne.n	80002ae <stopSampling+0x6>
    sendCommand(CMD_SDATAC);
 80002bc:	200f      	movs	r0, #15
 80002be:	f7ff ff71 	bl	80001a4 <sendCommand>
    while(NOT_DRDY) ;	//wait to complete
 80002c2:	bf00      	nop
 80002c4:	2102      	movs	r1, #2
 80002c6:	4804      	ldr	r0, [pc, #16]	; (80002d8 <stopSampling+0x30>)
 80002c8:	f001 f8d0 	bl	800146c <HAL_GPIO_ReadPin>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d1f8      	bne.n	80002c4 <stopSampling+0x1c>
    //sendCommand(CMD_RESET);
}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40010c00 	.word	0x40010c00

080002dc <setChannel>:

// Channel Switching for differential mode. Use -1 to set input channel to
// AINCOM
uint8_t setChannel(int8_t AIN_P, int8_t AIN_N) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	460a      	mov	r2, r1
 80002e6:	71fb      	strb	r3, [r7, #7]
 80002e8:	4613      	mov	r3, r2
 80002ea:	71bb      	strb	r3, [r7, #6]
	uint8_t MUX_CHANNEL;
	uint8_t MUXP;
	uint8_t MUXN;

	switch (AIN_P) {
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b07      	cmp	r3, #7
 80002f2:	d82b      	bhi.n	800034c <setChannel+0x70>
 80002f4:	a201      	add	r2, pc, #4	; (adr r2, 80002fc <setChannel+0x20>)
 80002f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fa:	bf00      	nop
 80002fc:	0800031d 	.word	0x0800031d
 8000300:	08000323 	.word	0x08000323
 8000304:	08000329 	.word	0x08000329
 8000308:	0800032f 	.word	0x0800032f
 800030c:	08000335 	.word	0x08000335
 8000310:	0800033b 	.word	0x0800033b
 8000314:	08000341 	.word	0x08000341
 8000318:	08000347 	.word	0x08000347
		case 0:
		  MUXP = MUXP_AIN0;
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]
		  break;
 8000320:	e016      	b.n	8000350 <setChannel+0x74>
		case 1:
		  MUXP = MUXP_AIN1;
 8000322:	2310      	movs	r3, #16
 8000324:	73fb      	strb	r3, [r7, #15]
		  break;
 8000326:	e013      	b.n	8000350 <setChannel+0x74>
		case 2:
		  MUXP = MUXP_AIN2;
 8000328:	2320      	movs	r3, #32
 800032a:	73fb      	strb	r3, [r7, #15]
		  break;
 800032c:	e010      	b.n	8000350 <setChannel+0x74>
		case 3:
		  MUXP = MUXP_AIN3;
 800032e:	2330      	movs	r3, #48	; 0x30
 8000330:	73fb      	strb	r3, [r7, #15]
		  break;
 8000332:	e00d      	b.n	8000350 <setChannel+0x74>
		case 4:
		  MUXP = MUXP_AIN4;
 8000334:	2340      	movs	r3, #64	; 0x40
 8000336:	73fb      	strb	r3, [r7, #15]
		  break;
 8000338:	e00a      	b.n	8000350 <setChannel+0x74>
		case 5:
		  MUXP = MUXP_AIN5;
 800033a:	2350      	movs	r3, #80	; 0x50
 800033c:	73fb      	strb	r3, [r7, #15]
		  break;
 800033e:	e007      	b.n	8000350 <setChannel+0x74>
		case 6:
		  MUXP = MUXP_AIN6;
 8000340:	2360      	movs	r3, #96	; 0x60
 8000342:	73fb      	strb	r3, [r7, #15]
		  break;
 8000344:	e004      	b.n	8000350 <setChannel+0x74>
		case 7:
		  MUXP = MUXP_AIN7;
 8000346:	2370      	movs	r3, #112	; 0x70
 8000348:	73fb      	strb	r3, [r7, #15]
		  break;
 800034a:	e001      	b.n	8000350 <setChannel+0x74>
		default:
		  MUXP = MUXP_AINCOM;
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	73fb      	strb	r3, [r7, #15]
	}

	switch (AIN_N) {
 8000350:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000354:	2b07      	cmp	r3, #7
 8000356:	d82b      	bhi.n	80003b0 <setChannel+0xd4>
 8000358:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <setChannel+0x84>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	08000381 	.word	0x08000381
 8000364:	08000387 	.word	0x08000387
 8000368:	0800038d 	.word	0x0800038d
 800036c:	08000393 	.word	0x08000393
 8000370:	08000399 	.word	0x08000399
 8000374:	0800039f 	.word	0x0800039f
 8000378:	080003a5 	.word	0x080003a5
 800037c:	080003ab 	.word	0x080003ab
		case 0:
		  MUXN = MUXN_AIN0;
 8000380:	2300      	movs	r3, #0
 8000382:	73bb      	strb	r3, [r7, #14]
		  break;
 8000384:	e016      	b.n	80003b4 <setChannel+0xd8>
		case 1:
		  MUXN = MUXN_AIN1;
 8000386:	2301      	movs	r3, #1
 8000388:	73bb      	strb	r3, [r7, #14]
		  break;
 800038a:	e013      	b.n	80003b4 <setChannel+0xd8>
		case 2:
		  MUXN = MUXN_AIN2;
 800038c:	2302      	movs	r3, #2
 800038e:	73bb      	strb	r3, [r7, #14]
		  break;
 8000390:	e010      	b.n	80003b4 <setChannel+0xd8>
		case 3:
		  MUXN = MUXN_AIN3;
 8000392:	2303      	movs	r3, #3
 8000394:	73bb      	strb	r3, [r7, #14]
		  break;
 8000396:	e00d      	b.n	80003b4 <setChannel+0xd8>
		case 4:
		  MUXN = MUXN_AIN4;
 8000398:	2304      	movs	r3, #4
 800039a:	73bb      	strb	r3, [r7, #14]
		  break;
 800039c:	e00a      	b.n	80003b4 <setChannel+0xd8>
		case 5:
		  MUXN = MUXN_AIN5;
 800039e:	2305      	movs	r3, #5
 80003a0:	73bb      	strb	r3, [r7, #14]
		  break;
 80003a2:	e007      	b.n	80003b4 <setChannel+0xd8>
		case 6:
		  MUXN = MUXN_AIN6;
 80003a4:	2306      	movs	r3, #6
 80003a6:	73bb      	strb	r3, [r7, #14]
		  break;
 80003a8:	e004      	b.n	80003b4 <setChannel+0xd8>
		case 7:
		  MUXN = MUXN_AIN7;
 80003aa:	2307      	movs	r3, #7
 80003ac:	73bb      	strb	r3, [r7, #14]
		  break;
 80003ae:	e001      	b.n	80003b4 <setChannel+0xd8>
		default:
		  MUXN = MUXN_AINCOM;
 80003b0:	2308      	movs	r3, #8
 80003b2:	73bb      	strb	r3, [r7, #14]
	}

	MUX_CHANNEL = MUXP | MUXN;
 80003b4:	7bfa      	ldrb	r2, [r7, #15]
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	737b      	strb	r3, [r7, #13]

    while(NOT_DRDY) ; 	//wait to be ready
 80003bc:	bf00      	nop
 80003be:	2102      	movs	r1, #2
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <setChannel+0x118>)
 80003c2:	f001 f853 	bl	800146c <HAL_GPIO_ReadPin>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d1f8      	bne.n	80003be <setChannel+0xe2>
    writeRegister(REG_MUX, MUX_CHANNEL);
 80003cc:	7b7b      	ldrb	r3, [r7, #13]
 80003ce:	4619      	mov	r1, r3
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff fef9 	bl	80001c8 <writeRegister>
    if (readRegister(REG_MUX) == MUX_CHANNEL){
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff fec0 	bl	800015c <readRegister>
 80003dc:	4603      	mov	r3, r0
 80003de:	461a      	mov	r2, r3
 80003e0:	7b7b      	ldrb	r3, [r7, #13]
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d101      	bne.n	80003ea <setChannel+0x10e>
    	return 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	e000      	b.n	80003ec <setChannel+0x110>
    }
    return 1;
 80003ea:	2301      	movs	r3, #1

}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3710      	adds	r7, #16
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <setGain>:

void setGain(uint8_t drate, uint8_t gain) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	460a      	mov	r2, r1
 8000402:	71fb      	strb	r3, [r7, #7]
 8000404:	4613      	mov	r3, r2
 8000406:	71bb      	strb	r3, [r7, #6]
	sendCommand(CMD_SDATAC);  // send out SDATAC command to stop continuous reading mode.
 8000408:	200f      	movs	r0, #15
 800040a:	f7ff fecb 	bl	80001a4 <sendCommand>

	writeRegister(REG_DRATE, drate);  // write data rate register
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	4619      	mov	r1, r3
 8000412:	2003      	movs	r0, #3
 8000414:	f7ff fed8 	bl	80001c8 <writeRegister>
	while(NOT_DRDY) ;	//wait to complete
 8000418:	bf00      	nop
 800041a:	2102      	movs	r1, #2
 800041c:	4813      	ldr	r0, [pc, #76]	; (800046c <setGain+0x74>)
 800041e:	f001 f825 	bl	800146c <HAL_GPIO_ReadPin>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1f8      	bne.n	800041a <setGain+0x22>


	writeRegister(REG_ADCON, 0x07 & gain);
 8000428:	79bb      	ldrb	r3, [r7, #6]
 800042a:	f003 0307 	and.w	r3, r3, #7
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4619      	mov	r1, r3
 8000432:	2002      	movs	r0, #2
 8000434:	f7ff fec8 	bl	80001c8 <writeRegister>
	while(NOT_DRDY) ;	//wait to complete
 8000438:	bf00      	nop
 800043a:	2102      	movs	r1, #2
 800043c:	480b      	ldr	r0, [pc, #44]	; (800046c <setGain+0x74>)
 800043e:	f001 f815 	bl	800146c <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1f8      	bne.n	800043a <setGain+0x42>

    sendCommand(CMD_SELFCAL); //start Offset and Gain Self-Calibration
 8000448:	20f0      	movs	r0, #240	; 0xf0
 800044a:	f7ff feab 	bl	80001a4 <sendCommand>
    //can last up to 2 seconds for low data rates
    while(NOT_DRDY) ;	//wait to complete
 800044e:	bf00      	nop
 8000450:	2102      	movs	r1, #2
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <setGain+0x74>)
 8000454:	f001 f80a 	bl	800146c <HAL_GPIO_ReadPin>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d1f8      	bne.n	8000450 <setGain+0x58>

    sendCommand(CMD_RDATAC);
 800045e:	2003      	movs	r0, #3
 8000460:	f7ff fea0 	bl	80001a4 <sendCommand>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010c00 	.word	0x40010c00

08000470 <concatenateToInt32>:

int32_t concatenateToInt32(uint8_t *adcData){
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	uint8_t highbyte = *adcData;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	72fb      	strb	r3, [r7, #11]
	uint8_t midbyte = *(adcData + 1);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	785b      	ldrb	r3, [r3, #1]
 8000482:	72bb      	strb	r3, [r7, #10]
	uint8_t lowbyte = *(adcData + 2);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	789b      	ldrb	r3, [r3, #2]
 8000488:	727b      	strb	r3, [r7, #9]

    // Concatenate the bytes in the correct order to form a single integer value
    int adcValue = ((int32_t)highbyte << 16) + ((int32_t)midbyte << 8) + (int32_t)lowbyte;
 800048a:	7afb      	ldrb	r3, [r7, #11]
 800048c:	041a      	lsls	r2, r3, #16
 800048e:	7abb      	ldrb	r3, [r7, #10]
 8000490:	021b      	lsls	r3, r3, #8
 8000492:	441a      	add	r2, r3
 8000494:	7a7b      	ldrb	r3, [r7, #9]
 8000496:	4413      	add	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
    if (adcValue & 0x00800000) {	//transfer sign bit from pos. 23 to pos. 31
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d003      	beq.n	80004ac <concatenateToInt32+0x3c>
    	adcValue |= 0xff000000;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80004aa:	60fb      	str	r3, [r7, #12]
    }
    return adcValue;
 80004ac:	68fb      	ldr	r3, [r7, #12]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <startSampling>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_IWDG_Init(void);


static uint8_t startSampling(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	//configure single ended: AIN0 referred to AINCOM
	// test if communication to ADC works (read by register)
	if (setChannel(0,-1)){	//if not succeeded
 80004bc:	f04f 31ff 	mov.w	r1, #4294967295
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff ff0b 	bl	80002dc <setChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <startSampling+0x18>
		return 1;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e019      	b.n	8000504 <startSampling+0x4c>
	}
	setGain(SPS_50, PGA1);	//continuous conversation starts here
 80004d0:	2100      	movs	r1, #0
 80004d2:	2063      	movs	r0, #99	; 0x63
 80004d4:	f7ff ff90 	bl	80003f8 <setGain>

	adcDataArray.length = ADCBUFLEN;
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <startSampling+0x50>)
 80004da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004de:	801a      	strh	r2, [r3, #0]
	adcDataArray.sps = 50;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <startSampling+0x50>)
 80004e2:	2232      	movs	r2, #50	; 0x32
 80004e4:	805a      	strh	r2, [r3, #2]
	adcDataArray.INP = 0;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <startSampling+0x50>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	711a      	strb	r2, [r3, #4]
	adcDataArray.INM = -1;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <startSampling+0x50>)
 80004ee:	22ff      	movs	r2, #255	; 0xff
 80004f0:	715a      	strb	r2, [r3, #5]

	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 7);
 80004f2:	2207      	movs	r2, #7
 80004f4:	2105      	movs	r1, #5
 80004f6:	2006      	movs	r0, #6
 80004f8:	f000 fdef 	bl	80010da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn); //enable DRDY interrupt
 80004fc:	2006      	movs	r0, #6
 80004fe:	f000 fe08 	bl	8001112 <HAL_NVIC_EnableIRQ>
	return 0; //for success
 8000502:	2300      	movs	r3, #0
}
 8000504:	4618      	mov	r0, r3
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000370 	.word	0x20000370

0800050c <keepBlueLEDFlashing>:


static void keepBlueLEDFlashing(void){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	// produce a non-blocking 1s OFF and 50ms ON timer (heartbeat signal green LED)
	static bool initialized = false;
	static uint32_t tick_s, tick_r;

	if (!initialized) {
 8000510:	4b26      	ldr	r3, [pc, #152]	; (80005ac <keepBlueLEDFlashing+0xa0>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	f083 0301 	eor.w	r3, r3, #1
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d00c      	beq.n	8000538 <keepBlueLEDFlashing+0x2c>
		tick_s = HAL_GetTick();
 800051e:	f000 fcb3 	bl	8000e88 <HAL_GetTick>
 8000522:	4603      	mov	r3, r0
 8000524:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <keepBlueLEDFlashing+0xa4>)
 8000526:	6013      	str	r3, [r2, #0]
		tick_r = HAL_GetTick();
 8000528:	f000 fcae 	bl	8000e88 <HAL_GetTick>
 800052c:	4603      	mov	r3, r0
 800052e:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <keepBlueLEDFlashing+0xa8>)
 8000530:	6013      	str	r3, [r2, #0]
		initialized = true;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <keepBlueLEDFlashing+0xa0>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
	}


	if (HAL_GetTick() - tick_s == 1000  &&  !get_BLED()){
 8000538:	f000 fca6 	bl	8000e88 <HAL_GetTick>
 800053c:	4602      	mov	r2, r0
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <keepBlueLEDFlashing+0xa4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000548:	d112      	bne.n	8000570 <keepBlueLEDFlashing+0x64>
 800054a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054e:	481a      	ldr	r0, [pc, #104]	; (80005b8 <keepBlueLEDFlashing+0xac>)
 8000550:	f000 fa6c 	bl	8000a2c <HAL_GPIO_GetOutputPin>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d00a      	beq.n	8000570 <keepBlueLEDFlashing+0x64>
		//TODO: tick_s may overflow in 49 days
		tick_r = HAL_GetTick();	//start reset timer
 800055a:	f000 fc95 	bl	8000e88 <HAL_GetTick>
 800055e:	4603      	mov	r3, r0
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <keepBlueLEDFlashing+0xa8>)
 8000562:	6013      	str	r3, [r2, #0]
		BLED(1)
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056a:	4813      	ldr	r0, [pc, #76]	; (80005b8 <keepBlueLEDFlashing+0xac>)
 800056c:	f000 ff95 	bl	800149a <HAL_GPIO_WritePin>
	}
	if (HAL_GetTick() - tick_r == 50 && get_BLED()){
 8000570:	f000 fc8a 	bl	8000e88 <HAL_GetTick>
 8000574:	4602      	mov	r2, r0
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <keepBlueLEDFlashing+0xa8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	2b32      	cmp	r3, #50	; 0x32
 800057e:	d112      	bne.n	80005a6 <keepBlueLEDFlashing+0x9a>
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <keepBlueLEDFlashing+0xac>)
 8000586:	f000 fa51 	bl	8000a2c <HAL_GPIO_GetOutputPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d10a      	bne.n	80005a6 <keepBlueLEDFlashing+0x9a>
		tick_s = HAL_GetTick(); //start set timer
 8000590:	f000 fc7a 	bl	8000e88 <HAL_GetTick>
 8000594:	4603      	mov	r3, r0
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <keepBlueLEDFlashing+0xa4>)
 8000598:	6013      	str	r3, [r2, #0]
		BLED(0)
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <keepBlueLEDFlashing+0xac>)
 80005a2:	f000 ff7a 	bl	800149a <HAL_GPIO_WritePin>
	}

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000035c 	.word	0x2000035c
 80005b0:	20000360 	.word	0x20000360
 80005b4:	20000364 	.word	0x20000364
 80005b8:	40010c00 	.word	0x40010c00

080005bc <main>:


//-----------------------------------------------------------------------------
int main(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	static USBD_StatusTypeDef usb_status=USBD_FAIL;	//initialize with NOK at beginning
	static uint32_t tick_1s;

	HAL_Init();
 80005c2:	f000 fc09 	bl	8000dd8 <HAL_Init>
	SystemClock_Config();
 80005c6:	f000 f901 	bl	80007cc <SystemClock_Config>

	MX_GPIO_Init();
 80005ca:	f000 f9ab 	bl	8000924 <MX_GPIO_Init>
	BLED(1) 	// signaling the start of the INIT
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d4:	483f      	ldr	r0, [pc, #252]	; (80006d4 <main+0x118>)
 80005d6:	f000 ff60 	bl	800149a <HAL_GPIO_WritePin>

	MX_IWDG_Init();
 80005da:	f000 f953 	bl	8000884 <MX_IWDG_Init>
	MX_USB_DEVICE_Init();
 80005de:	f007 fea7 	bl	8008330 <MX_USB_DEVICE_Init>


	MX_SPI1_Init();
 80005e2:	f000 f969 	bl	80008b8 <MX_SPI1_Init>
	uint8_t status;
	status = setupADS1256();	//should be 0x30 for this particular piece of AD1256 (ID)
 80005e6:	f7ff fe0f 	bl	8000208 <setupADS1256>
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	sprintf((char *)usbTx, "ADS1256 data logger (status:0x%02X) on the 72MHz SMT32F108\r\n",status);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4939      	ldr	r1, [pc, #228]	; (80006d8 <main+0x11c>)
 80005f4:	4839      	ldr	r0, [pc, #228]	; (80006dc <main+0x120>)
 80005f6:	f008 fc3f 	bl	8008e78 <siprintf>

	BLED(0)	//end INIT
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	4834      	ldr	r0, [pc, #208]	; (80006d4 <main+0x118>)
 8000602:	f000 ff4a 	bl	800149a <HAL_GPIO_WritePin>

	tick_1s = HAL_GetTick();	//start 1s timer
 8000606:	f000 fc3f 	bl	8000e88 <HAL_GetTick>
 800060a:	4603      	mov	r3, r0
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <main+0x124>)
 800060e:	6013      	str	r3, [r2, #0]

	while (1){


		if (usb_status ==  USBD_OK){
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <main+0x128>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d124      	bne.n	8000662 <main+0xa6>
			if (!is_REC_ON()) {
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	482d      	ldr	r0, [pc, #180]	; (80006d4 <main+0x118>)
 800061e:	f000 fa05 	bl	8000a2c <HAL_GPIO_GetOutputPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10a      	bne.n	800063e <main+0x82>
				if (startSampling() == 0){	//if succeeded starting
 8000628:	f7ff ff46 	bl	80004b8 <startSampling>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d105      	bne.n	800063e <main+0x82>
					REC_ON()
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	4826      	ldr	r0, [pc, #152]	; (80006d4 <main+0x118>)
 800063a:	f000 ff2e 	bl	800149a <HAL_GPIO_WritePin>
				}
			}
			if (flagBufferFull){  //ADC receive ring buffer full
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <main+0x12c>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00a      	beq.n	800065c <main+0xa0>
				flagBufferFull = 0;
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <main+0x12c>)
 8000648:	2200      	movs	r2, #0
 800064a:	801a      	strh	r2, [r3, #0]
				transmitArrayOverUSB(&adcDataArray);
 800064c:	4827      	ldr	r0, [pc, #156]	; (80006ec <main+0x130>)
 800064e:	f000 f851 	bl	80006f4 <transmitArrayOverUSB>
				toggle_GLED()
 8000652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000656:	481f      	ldr	r0, [pc, #124]	; (80006d4 <main+0x118>)
 8000658:	f000 ff37 	bl	80014ca <HAL_GPIO_TogglePin>
			}
			keepBlueLEDFlashing();
 800065c:	f7ff ff56 	bl	800050c <keepBlueLEDFlashing>
 8000660:	e034      	b.n	80006cc <main+0x110>
		}
		else { //if USB status not OK
			if (!is_REC_ON()) {	//and if it was not connected before
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	481b      	ldr	r0, [pc, #108]	; (80006d4 <main+0x118>)
 8000668:	f000 f9e0 	bl	8000a2c <HAL_GPIO_GetOutputPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d11b      	bne.n	80006aa <main+0xee>
				if (HAL_GetTick() - tick_1s > 1000){ //check if 1s ellapsed
 8000672:	f000 fc09 	bl	8000e88 <HAL_GetTick>
 8000676:	4602      	mov	r2, r0
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <main+0x124>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000682:	d91d      	bls.n	80006c0 <main+0x104>
					usb_status = CDC_Transmit_FS(usbTx, strlen((char *)usbTx));	//transmit msg
 8000684:	4815      	ldr	r0, [pc, #84]	; (80006dc <main+0x120>)
 8000686:	f7ff fd61 	bl	800014c <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29b      	uxth	r3, r3
 800068e:	4619      	mov	r1, r3
 8000690:	4812      	ldr	r0, [pc, #72]	; (80006dc <main+0x120>)
 8000692:	f007 ff0f 	bl	80084b4 <CDC_Transmit_FS>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <main+0x128>)
 800069c:	701a      	strb	r2, [r3, #0]
					tick_1s = HAL_GetTick();	//update timer with present value of time
 800069e:	f000 fbf3 	bl	8000e88 <HAL_GetTick>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <main+0x124>)
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	e00a      	b.n	80006c0 <main+0x104>
				}
			}
			else {	//but it was recording and lost somehow USB connection
				REC_OFF()
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <main+0x118>)
 80006b2:	f000 fef2 	bl	800149a <HAL_GPIO_WritePin>
				HAL_NVIC_DisableIRQ(EXTI0_IRQn); //disable DRDY interrupt
 80006b6:	2006      	movs	r0, #6
 80006b8:	f000 fd39 	bl	800112e <HAL_NVIC_DisableIRQ>
				stopSampling();
 80006bc:	f7ff fdf4 	bl	80002a8 <stopSampling>
			}
			BLED(0)
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <main+0x118>)
 80006c8:	f000 fee7 	bl	800149a <HAL_GPIO_WritePin>
		}

		HAL_IWDG_Refresh(&hiwdg);
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <main+0x134>)
 80006ce:	f000 ff6f 	bl	80015b0 <HAL_IWDG_Refresh>
		if (usb_status ==  USBD_OK){
 80006d2:	e79d      	b.n	8000610 <main+0x54>
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	08009f7c 	.word	0x08009f7c
 80006dc:	2000025c 	.word	0x2000025c
 80006e0:	20000368 	.word	0x20000368
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000b4c 	.word	0x20000b4c
 80006ec:	20000370 	.word	0x20000370
 80006f0:	200001f8 	.word	0x200001f8

080006f4 <transmitArrayOverUSB>:




// Function to transmit variable length int32_t array over USB CDC
void transmitArrayOverUSB(AdcDataArrayStruct *arr){
 80006f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006f8:	b087      	sub	sp, #28
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	466b      	mov	r3, sp
 8000700:	461e      	mov	r6, r3
    int8_t INM;
    int32_t data[ADCBUFLEN];
} AdcDataArrayStruct;*/

    // Calculate the total size of the data to be sent
    size_t totalSize = sizeof(AdcDataArrayStruct);
 8000702:	f44f 63fb 	mov.w	r3, #2008	; 0x7d8
 8000706:	617b      	str	r3, [r7, #20]
    size_t ofs;

    // Buffer to store the data to be sent
    uint8_t buffer[totalSize];
 8000708:	6979      	ldr	r1, [r7, #20]
 800070a:	460b      	mov	r3, r1
 800070c:	3b01      	subs	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	2300      	movs	r3, #0
 8000712:	4688      	mov	r8, r1
 8000714:	4699      	mov	r9, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800072a:	2300      	movs	r3, #0
 800072c:	460c      	mov	r4, r1
 800072e:	461d      	mov	r5, r3
 8000730:	f04f 0200 	mov.w	r2, #0
 8000734:	f04f 0300 	mov.w	r3, #0
 8000738:	00eb      	lsls	r3, r5, #3
 800073a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800073e:	00e2      	lsls	r2, r4, #3
 8000740:	1dcb      	adds	r3, r1, #7
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	ebad 0d03 	sub.w	sp, sp, r3
 800074a:	466b      	mov	r3, sp
 800074c:	3300      	adds	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]

    memcpy(buffer, &arr->length,sizeof(uint16_t));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	b29a      	uxth	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	801a      	strh	r2, [r3, #0]
    ofs = sizeof(uint16_t);
 800075a:	2302      	movs	r3, #2
 800075c:	60bb      	str	r3, [r7, #8]

    memcpy(buffer+ofs, &arr->sps, 	sizeof(uint16_t));
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4413      	add	r3, r2
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	3202      	adds	r2, #2
 8000768:	8812      	ldrh	r2, [r2, #0]
 800076a:	b292      	uxth	r2, r2
 800076c:	801a      	strh	r2, [r3, #0]
    ofs += sizeof(uint16_t);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	3302      	adds	r3, #2
 8000772:	60bb      	str	r3, [r7, #8]

    memcpy(buffer+ofs, &arr->INP, 	sizeof(int8_t));
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	4413      	add	r3, r2
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	3204      	adds	r2, #4
 800077e:	7812      	ldrb	r2, [r2, #0]
 8000780:	701a      	strb	r2, [r3, #0]
    ofs += sizeof(int8_t);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	3301      	adds	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]

    memcpy(buffer+ofs, &arr->INM, 	sizeof(int8_t));
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	4413      	add	r3, r2
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	3205      	adds	r2, #5
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
    ofs += sizeof(int8_t);
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	3301      	adds	r3, #1
 800079a:	60bb      	str	r3, [r7, #8]

    memcpy(buffer+ofs, arr->data, arr->length * sizeof(int32_t));
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	18d0      	adds	r0, r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f103 0108 	add.w	r1, r3, #8
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	461a      	mov	r2, r3
 80007b0:	f008 fc41 	bl	8009036 <memcpy>

    // Transmit the data over USB CDC
    CDC_Transmit_FS(buffer, totalSize);
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	4619      	mov	r1, r3
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f007 fe7a 	bl	80084b4 <CDC_Transmit_FS>
 80007c0:	46b5      	mov	sp, r6
}
 80007c2:	bf00      	nop
 80007c4:	371c      	adds	r7, #28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d6:	2228      	movs	r2, #40	; 0x28
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f008 fbaf 	bl	8008f3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007fc:	2309      	movs	r3, #9
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080a:	2301      	movs	r3, #1
 800080c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800080e:	2301      	movs	r3, #1
 8000810:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800081c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000820:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fc40 	bl	80030ac <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000832:	f000 f911 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	230f      	movs	r3, #15
 8000838:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000846:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2102      	movs	r1, #2
 8000852:	4618      	mov	r0, r3
 8000854:	f002 feac 	bl	80035b0 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800085e:	f000 f8fb 	bl	8000a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000862:	2310      	movs	r3, #16
 8000864:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fffb 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000878:	f000 f8ee 	bl	8000a58 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3750      	adds	r7, #80	; 0x50
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_IWDG_Init+0x2c>)
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <MX_IWDG_Init+0x30>)
 800088c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_IWDG_Init+0x2c>)
 8000890:	2203      	movs	r2, #3
 8000892:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_IWDG_Init+0x2c>)
 8000896:	f640 72ff 	movw	r2, #4095	; 0xfff
 800089a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_IWDG_Init+0x2c>)
 800089e:	f000 fe45 	bl	800152c <HAL_IWDG_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80008a8:	f000 f8d6 	bl	8000a58 <Error_Handler>
  }

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001f8 	.word	0x200001f8
 80008b4:	40003000 	.word	0x40003000

080008b8 <MX_SPI1_Init>:
/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

	hspi1.Instance = SPI1;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI1_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_SPI1_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI1_Init+0x64>)
 80008c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI1_Init+0x64>)
 80008de:	2201      	movs	r2, #1
 80008e0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI1_Init+0x64>)
 80008e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008e8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI1_Init+0x64>)
 80008ec:	2228      	movs	r2, #40	; 0x28
 80008ee:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_SPI1_Init+0x64>)
 8000904:	220a      	movs	r2, #10
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK){
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_SPI1_Init+0x64>)
 800090a:	f003 f863 	bl	80039d4 <HAL_SPI_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000914:	f000 f8a0 	bl	8000a58 <Error_Handler>
	}

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000204 	.word	0x20000204
 8000920:	40013000 	.word	0x40013000

08000924 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000938:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <MX_GPIO_Init+0xf8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <MX_GPIO_Init+0xf8>)
 800093e:	f043 0320 	orr.w	r3, r3, #32
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <MX_GPIO_Init+0xf8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0320 	and.w	r3, r3, #32
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <MX_GPIO_Init+0xf8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a31      	ldr	r2, [pc, #196]	; (8000a1c <MX_GPIO_Init+0xf8>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <MX_GPIO_Init+0xf8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <MX_GPIO_Init+0xf8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a2b      	ldr	r2, [pc, #172]	; (8000a1c <MX_GPIO_Init+0xf8>)
 800096e:	f043 0308 	orr.w	r3, r3, #8
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <MX_GPIO_Init+0xf8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]



   /*Configure GPIOA pin 4 NSS (chip select) */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000980:	2310      	movs	r3, #16
 8000982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000984:	2312      	movs	r3, #18
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	4822      	ldr	r0, [pc, #136]	; (8000a20 <MX_GPIO_Init+0xfc>)
 8000998:	f000 fbe4 	bl	8001164 <HAL_GPIO_Init>

    /*Configure GPIOA pin 6 MISO */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800099c:	2340      	movs	r3, #64	; 0x40
 800099e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4619      	mov	r1, r3
 80009b2:	481b      	ldr	r0, [pc, #108]	; (8000a20 <MX_GPIO_Init+0xfc>)
 80009b4:	f000 fbd6 	bl	8001164 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_EXTI0_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0;				//INT0: DRDY
 80009b8:	2301      	movs	r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_GPIO_Init+0x100>)
 80009be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <MX_GPIO_Init+0x104>)
 80009cc:	f000 fbca 	bl	8001164 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); //B12 blue LED (1: off, 0: on)
 80009d0:	2201      	movs	r2, #1
 80009d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d6:	4814      	ldr	r0, [pc, #80]	; (8000a28 <MX_GPIO_Init+0x104>)
 80009d8:	f000 fd5f 	bl	800149a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //B13 red LED
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e2:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_GPIO_Init+0x104>)
 80009e4:	f000 fd59 	bl	800149a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); //B15 green LED
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ee:	480e      	ldr	r0, [pc, #56]	; (8000a28 <MX_GPIO_Init+0x104>)
 80009f0:	f000 fd53 	bl	800149a <HAL_GPIO_WritePin>
	/*Configure GPIO pins : PB13 and PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 80009f4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80009f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_GPIO_Init+0x104>)
 8000a0e:	f000 fba9 	bl	8001164 <HAL_GPIO_Init>

}
 8000a12:	bf00      	nop
 8000a14:	3720      	adds	r7, #32
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010800 	.word	0x40010800
 8000a24:	10210000 	.word	0x10210000
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <HAL_GPIO_GetOutputPin>:

GPIO_PinState HAL_GPIO_GetOutputPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  uint32_t odr = GPIOx->ODR;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60fb      	str	r3, [r7, #12]

  return (GPIO_PinState)((odr & GPIO_Pin) != 0);
 8000a3e:	887a      	ldrh	r2, [r7, #2]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_MspInit+0x5c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_MspInit+0x60>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_MspInit+0x60>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <HAL_SPI_MspInit+0x88>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d12f      	bne.n	8000b48 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <HAL_SPI_MspInit+0x8c>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <HAL_SPI_MspInit+0x8c>)
 8000aee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_SPI_MspInit+0x8c>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_SPI_MspInit+0x8c>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <HAL_SPI_MspInit+0x8c>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_SPI_MspInit+0x8c>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000b18:	23b0      	movs	r3, #176	; 0xb0
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <HAL_SPI_MspInit+0x90>)
 8000b2c:	f000 fb1a 	bl	8001164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b30:	2340      	movs	r3, #64	; 0x40
 8000b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <HAL_SPI_MspInit+0x90>)
 8000b44:	f000 fb0e 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40013000 	.word	0x40013000
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800

08000b5c <EXTI0_IRQHandler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void EXTI0_IRQHandler(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f000 fccb 	bl	80014fc <HAL_GPIO_EXTI_IRQHandler>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_GPIO_EXTI_Callback>:

 /* DATA READY INTTERUPT FROM ADS1256 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
	//will be called on a falling edge of DRDY
	if (GPIO_Pin == GPIO_PIN_0){
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d121      	bne.n	8000bc0 <HAL_GPIO_EXTI_Callback+0x54>
		HAL_SPI_Receive(&hspi1, adcData, 3, HAL_MAX_DELAY); // Receive 3 bytes of data
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	2203      	movs	r2, #3
 8000b82:	4911      	ldr	r1, [pc, #68]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000b84:	4811      	ldr	r0, [pc, #68]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x60>)
 8000b86:	f003 f8ec 	bl	8003d62 <HAL_SPI_Receive>

		//store in a ring buffer
		adcDataArray.data[idx] = concatenateToInt32(adcData);
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000b8c:	681c      	ldr	r4, [r3, #0]
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000b90:	f7ff fc6e 	bl	8000470 <concatenateToInt32>
 8000b94:	4602      	mov	r2, r0
 8000b96:	490f      	ldr	r1, [pc, #60]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000b98:	1ca3      	adds	r3, r4, #2
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		idx++;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ba6:	6013      	str	r3, [r2, #0]
		if(idx >= ADCBUFLEN){
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bb0:	d306      	bcc.n	8000bc0 <HAL_GPIO_EXTI_Callback+0x54>
			idx=0;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
			flagBufferFull = adcDataArray.length;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000bba:	881a      	ldrh	r2, [r3, #0]
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000bbe:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	2000036c 	.word	0x2000036c
 8000bcc:	20000204 	.word	0x20000204
 8000bd0:	20000b48 	.word	0x20000b48
 8000bd4:	20000370 	.word	0x20000370
 8000bd8:	20000b4c 	.word	0x20000b4c

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f000 f91f 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c32:	f000 fdf1 	bl	8001818 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20001820 	.word	0x20001820

08000c40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e00a      	b.n	8000c68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c52:	f3af 8000 	nop.w
 8000c56:	4601      	mov	r1, r0
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	b2ca      	uxtb	r2, r1
 8000c60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf0      	blt.n	8000c52 <_read+0x12>
  }

  return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e009      	b.n	8000ca0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf1      	blt.n	8000c8c <_write+0x12>
  }
  return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_close>:

int _close(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd8:	605a      	str	r2, [r3, #4]
  return 0;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <_isatty>:

int _isatty(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
	...

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f008 f94a 	bl	8008fdc <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20005000 	.word	0x20005000
 8000d74:	00000400 	.word	0x00000400
 8000d78:	20000b50 	.word	0x20000b50
 8000d7c:	20001e80 	.word	0x20001e80

08000d80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff fff8 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d92:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da8:	4c09      	ldr	r4, [pc, #36]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f008 f917 	bl	8008fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dba:	f7ff fbff 	bl	80005bc <main>
  bx lr
 8000dbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000dc8:	0800a09c 	.word	0x0800a09c
  ldr r2, =_sbss
 8000dcc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000dd0:	20001e7c 	.word	0x20001e7c

08000dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_2_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x28>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x28>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f96b 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fe36 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40022000 	.word	0x40022000

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f991 	bl	800114a <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f94b 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	20000008 	.word	0x20000008

08000e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x1c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x20>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <HAL_IncTick+0x20>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	2000000c 	.word	0x2000000c
 8000e84:	20000b54 	.word	0x20000b54

08000e88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <HAL_GetTick+0x10>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	20000b54 	.word	0x20000b54

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff fff0 	bl	8000e88 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffe0 	bl	8000e88 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000000c 	.word	0x2000000c

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4906      	ldr	r1, [pc, #24]	; (8000f7c <__NVIC_EnableIRQ+0x34>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db12      	blt.n	8000fb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	490a      	ldr	r1, [pc, #40]	; (8000fc4 <__NVIC_DisableIRQ+0x44>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	3320      	adds	r3, #32
 8000fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fac:	f3bf 8f4f 	dsb	sy
}
 8000fb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb2:	f3bf 8f6f 	isb	sy
}
 8000fb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff90 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff09 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff1e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff90 	bl	800101c <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5f 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff11 	bl	8000f48 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff1f 	bl	8000f80 <__NVIC_DisableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff94 	bl	8001080 <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b08b      	sub	sp, #44	; 0x2c
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001176:	e169      	b.n	800144c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001178:	2201      	movs	r2, #1
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 8158 	bne.w	8001446 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a9a      	ldr	r2, [pc, #616]	; (8001404 <HAL_GPIO_Init+0x2a0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d05e      	beq.n	800125e <HAL_GPIO_Init+0xfa>
 80011a0:	4a98      	ldr	r2, [pc, #608]	; (8001404 <HAL_GPIO_Init+0x2a0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d875      	bhi.n	8001292 <HAL_GPIO_Init+0x12e>
 80011a6:	4a98      	ldr	r2, [pc, #608]	; (8001408 <HAL_GPIO_Init+0x2a4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d058      	beq.n	800125e <HAL_GPIO_Init+0xfa>
 80011ac:	4a96      	ldr	r2, [pc, #600]	; (8001408 <HAL_GPIO_Init+0x2a4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d86f      	bhi.n	8001292 <HAL_GPIO_Init+0x12e>
 80011b2:	4a96      	ldr	r2, [pc, #600]	; (800140c <HAL_GPIO_Init+0x2a8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d052      	beq.n	800125e <HAL_GPIO_Init+0xfa>
 80011b8:	4a94      	ldr	r2, [pc, #592]	; (800140c <HAL_GPIO_Init+0x2a8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d869      	bhi.n	8001292 <HAL_GPIO_Init+0x12e>
 80011be:	4a94      	ldr	r2, [pc, #592]	; (8001410 <HAL_GPIO_Init+0x2ac>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d04c      	beq.n	800125e <HAL_GPIO_Init+0xfa>
 80011c4:	4a92      	ldr	r2, [pc, #584]	; (8001410 <HAL_GPIO_Init+0x2ac>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d863      	bhi.n	8001292 <HAL_GPIO_Init+0x12e>
 80011ca:	4a92      	ldr	r2, [pc, #584]	; (8001414 <HAL_GPIO_Init+0x2b0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d046      	beq.n	800125e <HAL_GPIO_Init+0xfa>
 80011d0:	4a90      	ldr	r2, [pc, #576]	; (8001414 <HAL_GPIO_Init+0x2b0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d85d      	bhi.n	8001292 <HAL_GPIO_Init+0x12e>
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d82a      	bhi.n	8001230 <HAL_GPIO_Init+0xcc>
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d859      	bhi.n	8001292 <HAL_GPIO_Init+0x12e>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <HAL_GPIO_Init+0x80>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	0800125f 	.word	0x0800125f
 80011e8:	08001239 	.word	0x08001239
 80011ec:	0800124b 	.word	0x0800124b
 80011f0:	0800128d 	.word	0x0800128d
 80011f4:	08001293 	.word	0x08001293
 80011f8:	08001293 	.word	0x08001293
 80011fc:	08001293 	.word	0x08001293
 8001200:	08001293 	.word	0x08001293
 8001204:	08001293 	.word	0x08001293
 8001208:	08001293 	.word	0x08001293
 800120c:	08001293 	.word	0x08001293
 8001210:	08001293 	.word	0x08001293
 8001214:	08001293 	.word	0x08001293
 8001218:	08001293 	.word	0x08001293
 800121c:	08001293 	.word	0x08001293
 8001220:	08001293 	.word	0x08001293
 8001224:	08001293 	.word	0x08001293
 8001228:	08001241 	.word	0x08001241
 800122c:	08001255 	.word	0x08001255
 8001230:	4a79      	ldr	r2, [pc, #484]	; (8001418 <HAL_GPIO_Init+0x2b4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001236:	e02c      	b.n	8001292 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	623b      	str	r3, [r7, #32]
          break;
 800123e:	e029      	b.n	8001294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	3304      	adds	r3, #4
 8001246:	623b      	str	r3, [r7, #32]
          break;
 8001248:	e024      	b.n	8001294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	3308      	adds	r3, #8
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e01f      	b.n	8001294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	330c      	adds	r3, #12
 800125a:	623b      	str	r3, [r7, #32]
          break;
 800125c:	e01a      	b.n	8001294 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001266:	2304      	movs	r3, #4
 8001268:	623b      	str	r3, [r7, #32]
          break;
 800126a:	e013      	b.n	8001294 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001274:	2308      	movs	r3, #8
 8001276:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	611a      	str	r2, [r3, #16]
          break;
 800127e:	e009      	b.n	8001294 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001280:	2308      	movs	r3, #8
 8001282:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	615a      	str	r2, [r3, #20]
          break;
 800128a:	e003      	b.n	8001294 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x130>
          break;
 8001292:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2bff      	cmp	r3, #255	; 0xff
 8001298:	d801      	bhi.n	800129e <HAL_GPIO_Init+0x13a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	e001      	b.n	80012a2 <HAL_GPIO_Init+0x13e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3304      	adds	r3, #4
 80012a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2bff      	cmp	r3, #255	; 0xff
 80012a8:	d802      	bhi.n	80012b0 <HAL_GPIO_Init+0x14c>
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	e002      	b.n	80012b6 <HAL_GPIO_Init+0x152>
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	3b08      	subs	r3, #8
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	210f      	movs	r1, #15
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	401a      	ands	r2, r3
 80012c8:	6a39      	ldr	r1, [r7, #32]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	431a      	orrs	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 80b1 	beq.w	8001446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012e4:	4b4d      	ldr	r3, [pc, #308]	; (800141c <HAL_GPIO_Init+0x2b8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a4c      	ldr	r2, [pc, #304]	; (800141c <HAL_GPIO_Init+0x2b8>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b4a      	ldr	r3, [pc, #296]	; (800141c <HAL_GPIO_Init+0x2b8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012fc:	4a48      	ldr	r2, [pc, #288]	; (8001420 <HAL_GPIO_Init+0x2bc>)
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001308:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a40      	ldr	r2, [pc, #256]	; (8001424 <HAL_GPIO_Init+0x2c0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d013      	beq.n	8001350 <HAL_GPIO_Init+0x1ec>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a3f      	ldr	r2, [pc, #252]	; (8001428 <HAL_GPIO_Init+0x2c4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d00d      	beq.n	800134c <HAL_GPIO_Init+0x1e8>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a3e      	ldr	r2, [pc, #248]	; (800142c <HAL_GPIO_Init+0x2c8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d007      	beq.n	8001348 <HAL_GPIO_Init+0x1e4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a3d      	ldr	r2, [pc, #244]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d101      	bne.n	8001344 <HAL_GPIO_Init+0x1e0>
 8001340:	2303      	movs	r3, #3
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001344:	2304      	movs	r3, #4
 8001346:	e004      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001348:	2302      	movs	r3, #2
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_GPIO_Init+0x1ee>
 8001350:	2300      	movs	r3, #0
 8001352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001354:	f002 0203 	and.w	r2, r2, #3
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	4093      	lsls	r3, r2
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001362:	492f      	ldr	r1, [pc, #188]	; (8001420 <HAL_GPIO_Init+0x2bc>)
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800137c:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	492c      	ldr	r1, [pc, #176]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	608b      	str	r3, [r1, #8]
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	43db      	mvns	r3, r3
 8001392:	4928      	ldr	r1, [pc, #160]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 8001394:	4013      	ands	r3, r2
 8001396:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	4922      	ldr	r1, [pc, #136]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	60cb      	str	r3, [r1, #12]
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	491e      	ldr	r1, [pc, #120]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013bc:	4013      	ands	r3, r2
 80013be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4918      	ldr	r1, [pc, #96]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4914      	ldr	r1, [pc, #80]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d021      	beq.n	8001438 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	490e      	ldr	r1, [pc, #56]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	e021      	b.n	8001446 <HAL_GPIO_Init+0x2e2>
 8001402:	bf00      	nop
 8001404:	10320000 	.word	0x10320000
 8001408:	10310000 	.word	0x10310000
 800140c:	10220000 	.word	0x10220000
 8001410:	10210000 	.word	0x10210000
 8001414:	10120000 	.word	0x10120000
 8001418:	10110000 	.word	0x10110000
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000
 8001424:	40010800 	.word	0x40010800
 8001428:	40010c00 	.word	0x40010c00
 800142c:	40011000 	.word	0x40011000
 8001430:	40011400 	.word	0x40011400
 8001434:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_GPIO_Init+0x304>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	43db      	mvns	r3, r3
 8001440:	4909      	ldr	r1, [pc, #36]	; (8001468 <HAL_GPIO_Init+0x304>)
 8001442:	4013      	ands	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	3301      	adds	r3, #1
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	fa22 f303 	lsr.w	r3, r2, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	f47f ae8e 	bne.w	8001178 <HAL_GPIO_Init+0x14>
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	372c      	adds	r7, #44	; 0x2c
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	40010400 	.word	0x40010400

0800146c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e001      	b.n	800148e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	807b      	strh	r3, [r7, #2]
 80014a6:	4613      	mov	r3, r2
 80014a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014aa:	787b      	ldrb	r3, [r7, #1]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b0:	887a      	ldrh	r2, [r7, #2]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b6:	e003      	b.n	80014c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	041a      	lsls	r2, r3, #16
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	611a      	str	r2, [r3, #16]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	041a      	lsls	r2, r3, #16
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	400b      	ands	r3, r1
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	611a      	str	r2, [r3, #16]
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fb26 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e034      	b.n	80015a8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001546:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f245 5255 	movw	r2, #21845	; 0x5555
 8001550:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6852      	ldr	r2, [r2, #4]
 800155a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6892      	ldr	r2, [r2, #8]
 8001564:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001566:	f7ff fc8f 	bl	8000e88 <HAL_GetTick>
 800156a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800156c:	e00f      	b.n	800158e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800156e:	f7ff fc8b 	bl	8000e88 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b27      	cmp	r3, #39	; 0x27
 800157a:	d908      	bls.n	800158e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e00c      	b.n	80015a8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e8      	bne.n	800156e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80015a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80015c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d0:	b08b      	sub	sp, #44	; 0x2c
 80015d2:	af06      	add	r7, sp, #24
 80015d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0f1      	b.n	80017c4 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d106      	bne.n	80015fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f007 f891 	bl	800871c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f002 ff92 	bl	8004530 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	687e      	ldr	r6, [r7, #4]
 8001614:	466d      	mov	r5, sp
 8001616:	f106 0410 	add.w	r4, r6, #16
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	602b      	str	r3, [r5, #0]
 8001622:	1d33      	adds	r3, r6, #4
 8001624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001626:	6838      	ldr	r0, [r7, #0]
 8001628:	f002 ff5c 	bl	80044e4 <USB_CoreInit>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0c2      	b.n	80017c4 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f002 ff8d 	bl	8004564 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e040      	b.n	80016d2 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3301      	adds	r3, #1
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	3303      	adds	r3, #3
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3338      	adds	r3, #56	; 0x38
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	333c      	adds	r3, #60	; 0x3c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016b8:	7bfa      	ldrb	r2, [r7, #15]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	3340      	adds	r3, #64	; 0x40
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	3301      	adds	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3b9      	bcc.n	8001650 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e044      	b.n	800176c <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	d3b5      	bcc.n	80016e2 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	687e      	ldr	r6, [r7, #4]
 800177e:	466d      	mov	r5, sp
 8001780:	f106 0410 	add.w	r4, r6, #16
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	602b      	str	r3, [r5, #0]
 800178c:	1d33      	adds	r3, r6, #4
 800178e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f002 fef3 	bl	800457c <USB_DevInit>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2202      	movs	r2, #2
 80017a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e00d      	b.n	80017c4 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 f974 	bl	8006aaa <USB_DevDisconnect>

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_PCD_Start+0x16>
 80017de:	2302      	movs	r3, #2
 80017e0:	e016      	b.n	8001810 <HAL_PCD_Start+0x44>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fe88 	bl	8004504 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017f4:	2101      	movs	r1, #1
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f007 fa2b 	bl	8008c52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f005 f948 	bl	8006a96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f005 f94a 	bl	8006abe <USB_ReadInterrupts>
 800182a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fb1b 	bl	8001e72 <PCD_EP_ISR_Handler>

    return;
 800183c:	e119      	b.n	8001a72 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185a:	b292      	uxth	r2, r2
 800185c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f006 fffe 	bl	8008862 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001866:	2100      	movs	r1, #0
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f905 	bl	8001a78 <HAL_PCD_SetAddress>

    return;
 800186e:	e100      	b.n	8001a72 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00c      	beq.n	8001894 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001882:	b29a      	uxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800188c:	b292      	uxth	r2, r2
 800188e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001892:	e0ee      	b.n	8001a72 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00c      	beq.n	80018b8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018b0:	b292      	uxth	r2, r2
 80018b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018b6:	e0dc      	b.n	8001a72 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d027      	beq.n	8001912 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0204 	bic.w	r2, r2, #4
 80018d4:	b292      	uxth	r2, r2
 80018d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0208 	bic.w	r2, r2, #8
 80018ec:	b292      	uxth	r2, r2
 80018ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f006 ffee 	bl	80088d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001900:	b29a      	uxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800190a:	b292      	uxth	r2, r2
 800190c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001910:	e0af      	b.n	8001a72 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 8083 	beq.w	8001a24 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	77fb      	strb	r3, [r7, #31]
 8001922:	e010      	b.n	8001946 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	7ffb      	ldrb	r3, [r7, #31]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	441a      	add	r2, r3
 8001930:	7ffb      	ldrb	r3, [r7, #31]
 8001932:	8812      	ldrh	r2, [r2, #0]
 8001934:	b292      	uxth	r2, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	3320      	adds	r3, #32
 800193a:	443b      	add	r3, r7
 800193c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001940:	7ffb      	ldrb	r3, [r7, #31]
 8001942:	3301      	adds	r3, #1
 8001944:	77fb      	strb	r3, [r7, #31]
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b07      	cmp	r3, #7
 800194a:	d9eb      	bls.n	8001924 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	b292      	uxth	r2, r2
 8001960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	b292      	uxth	r2, r2
 8001978:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800197c:	bf00      	nop
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001986:	b29b      	uxth	r3, r3
 8001988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f6      	beq.n	800197e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a2:	b292      	uxth	r2, r2
 80019a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	77fb      	strb	r3, [r7, #31]
 80019ac:	e00f      	b.n	80019ce <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	4611      	mov	r1, r2
 80019b6:	7ffa      	ldrb	r2, [r7, #31]
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	440a      	add	r2, r1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	3320      	adds	r3, #32
 80019c0:	443b      	add	r3, r7
 80019c2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80019c6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019c8:	7ffb      	ldrb	r3, [r7, #31]
 80019ca:	3301      	adds	r3, #1
 80019cc:	77fb      	strb	r3, [r7, #31]
 80019ce:	7ffb      	ldrb	r3, [r7, #31]
 80019d0:	2b07      	cmp	r3, #7
 80019d2:	d9ec      	bls.n	80019ae <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0208 	orr.w	r2, r2, #8
 80019e6:	b292      	uxth	r2, r2
 80019e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019fe:	b292      	uxth	r2, r2
 8001a00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0204 	orr.w	r2, r2, #4
 8001a16:	b292      	uxth	r2, r2
 8001a18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f006 ff3f 	bl	80088a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a22:	e026      	b.n	8001a72 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a40:	b292      	uxth	r2, r2
 8001a42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f006 fefd 	bl	8008846 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a4c:	e011      	b.n	8001a72 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00c      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a6a:	b292      	uxth	r2, r2
 8001a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a70:	bf00      	nop
  }
}
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_PCD_SetAddress+0x1a>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e013      	b.n	8001aba <HAL_PCD_SetAddress+0x42>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 ffe0 	bl	8006a70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	4608      	mov	r0, r1
 8001acc:	4611      	mov	r1, r2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	70fb      	strb	r3, [r7, #3]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	803b      	strh	r3, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da0e      	bge.n	8001b06 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	705a      	strb	r2, [r3, #1]
 8001b04:	e00e      	b.n	8001b24 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 0207 	and.w	r2, r3, #7
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b30:	883a      	ldrh	r2, [r7, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	78ba      	ldrb	r2, [r7, #2]
 8001b3a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b3c:	78bb      	ldrb	r3, [r7, #2]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d102      	bne.n	8001b48 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_PCD_EP_Open+0x94>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e00e      	b.n	8001b74 <HAL_PCD_EP_Open+0xb2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68f9      	ldr	r1, [r7, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fd29 	bl	80045bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b72:	7afb      	ldrb	r3, [r7, #11]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da0e      	bge.n	8001bae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	705a      	strb	r2, [r3, #1]
 8001bac:	e00e      	b.n	8001bcc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 0207 	and.w	r2, r3, #7
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_PCD_EP_Close+0x6a>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e00e      	b.n	8001c04 <HAL_PCD_EP_Close+0x88>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 f8a1 	bl	8004d3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6979      	ldr	r1, [r7, #20]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fa58 	bl	8005114 <USB_EPStartXfer>

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	f003 0207 	and.w	r2, r3, #7
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c90:	681b      	ldr	r3, [r3, #0]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6979      	ldr	r1, [r7, #20]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fa0a 	bl	8005114 <USB_EPStartXfer>

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f003 0207 	and.w	r2, r3, #7
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d901      	bls.n	8001d28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e04c      	b.n	8001dc2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	da0e      	bge.n	8001d4e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	705a      	strb	r2, [r3, #1]
 8001d4c:	e00c      	b.n	8001d68 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_PCD_EP_SetStall+0x7e>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e01c      	b.n	8001dc2 <HAL_PCD_EP_SetStall+0xb8>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 fd6d 	bl	8006876 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d108      	bne.n	8001db8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f004 fe92 	bl	8006adc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 020f 	and.w	r2, r3, #15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d901      	bls.n	8001de8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e040      	b.n	8001e6a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	da0e      	bge.n	8001e0e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	705a      	strb	r2, [r3, #1]
 8001e0c:	e00e      	b.n	8001e2c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0207 	and.w	r2, r3, #7
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_PCD_EP_ClrStall+0x82>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e00e      	b.n	8001e6a <HAL_PCD_EP_ClrStall+0xa0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 fd5b 	bl	8006916 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b096      	sub	sp, #88	; 0x58
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e7a:	e3bf      	b.n	80025fc <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001e96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 8179 	bne.w	8002192 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ea0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d152      	bne.n	8001f52 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebc:	81fb      	strh	r3, [r7, #14]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
 8001ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3328      	adds	r3, #40	; 0x28
 8001ed4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3302      	adds	r3, #2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	441a      	add	r2, r3
 8001f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f10:	2100      	movs	r1, #0
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f006 fc7d 	bl	8008812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 836b 	beq.w	80025fc <PCD_EP_ISR_Handler+0x78a>
 8001f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 8366 	bne.w	80025fc <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b292      	uxth	r2, r2
 8001f44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f50:	e354      	b.n	80025fc <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f58:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d034      	beq.n	8001fda <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	3306      	adds	r3, #6
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f004 fde4 	bl	8006b7c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	823b      	strh	r3, [r7, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	8a3a      	ldrh	r2, [r7, #16]
 8001fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fce:	b292      	uxth	r2, r2
 8001fd0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f006 fbf0 	bl	80087b8 <HAL_PCD_SetupStageCallback>
 8001fd8:	e310      	b.n	80025fc <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fda:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f280 830c 	bge.w	80025fc <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	83fb      	strh	r3, [r7, #30]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	8bfa      	ldrh	r2, [r7, #30]
 8001ffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ffe:	b292      	uxth	r2, r2
 8002000:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	3306      	adds	r3, #6
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800202e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d019      	beq.n	800206a <PCD_EP_ISR_Handler+0x1f8>
 8002036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d015      	beq.n	800206a <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002044:	6959      	ldr	r1, [r3, #20]
 8002046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002048:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800204a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800204e:	b29b      	uxth	r3, r3
 8002050:	f004 fd94 	bl	8006b7c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	441a      	add	r2, r3
 800205e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002060:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002062:	2100      	movs	r1, #0
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f006 fbb9 	bl	80087dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002074:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 82bd 	bne.w	80025fc <PCD_EP_ISR_Handler+0x78a>
 8002082:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002086:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800208a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800208e:	f000 82b5 	beq.w	80025fc <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4413      	add	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020bc:	b29a      	uxth	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	801a      	strh	r2, [r3, #0]
 80020c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b3e      	cmp	r3, #62	; 0x3e
 80020c8:	d91d      	bls.n	8002106 <PCD_EP_ISR_Handler+0x294>
 80020ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
 80020d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <PCD_EP_ISR_Handler+0x272>
 80020de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e0:	3b01      	subs	r3, #1
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	029b      	lsls	r3, r3, #10
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020fe:	b29a      	uxth	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	e026      	b.n	8002154 <PCD_EP_ISR_Handler+0x2e2>
 8002106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <PCD_EP_ISR_Handler+0x2b2>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800211c:	b29a      	uxth	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	801a      	strh	r2, [r3, #0]
 8002122:	e017      	b.n	8002154 <PCD_EP_ISR_Handler+0x2e2>
 8002124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	647b      	str	r3, [r7, #68]	; 0x44
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <PCD_EP_ISR_Handler+0x2cc>
 8002138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213a:	3301      	adds	r3, #1
 800213c:	647b      	str	r3, [r7, #68]	; 0x44
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29a      	uxth	r2, r3
 8002144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002146:	b29b      	uxth	r3, r3
 8002148:	029b      	lsls	r3, r3, #10
 800214a:	b29b      	uxth	r3, r3
 800214c:	4313      	orrs	r3, r2
 800214e:	b29a      	uxth	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002164:	827b      	strh	r3, [r7, #18]
 8002166:	8a7b      	ldrh	r3, [r7, #18]
 8002168:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800216c:	827b      	strh	r3, [r7, #18]
 800216e:	8a7b      	ldrh	r3, [r7, #18]
 8002170:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002174:	827b      	strh	r3, [r7, #18]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	8a7b      	ldrh	r3, [r7, #18]
 800217c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218c:	b29b      	uxth	r3, r3
 800218e:	8013      	strh	r3, [r2, #0]
 8002190:	e234      	b.n	80025fc <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f280 80fc 	bge.w	80023a8 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021c6:	4013      	ands	r3, r2
 80021c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80021de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e2:	b292      	uxth	r2, r2
 80021e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021e6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fe:	7b1b      	ldrb	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d125      	bne.n	8002250 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	3306      	adds	r3, #6
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002230:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8092 	beq.w	800235e <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002240:	6959      	ldr	r1, [r3, #20]
 8002242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002244:	88da      	ldrh	r2, [r3, #6]
 8002246:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800224a:	f004 fc97 	bl	8006b7c <USB_ReadPMA>
 800224e:	e086      	b.n	800235e <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002252:	78db      	ldrb	r3, [r3, #3]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d10a      	bne.n	800226e <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002258:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800225c:	461a      	mov	r2, r3
 800225e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f9d9 	bl	8002618 <HAL_PCD_EP_DB_Receive>
 8002266:	4603      	mov	r3, r0
 8002268:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800226c:	e077      	b.n	800235e <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002288:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	441a      	add	r2, r3
 800229a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800229e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d024      	beq.n	8002316 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	3302      	adds	r3, #2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80022f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d02e      	beq.n	800235e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002306:	6959      	ldr	r1, [r3, #20]
 8002308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230a:	891a      	ldrh	r2, [r3, #8]
 800230c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002310:	f004 fc34 	bl	8006b7c <USB_ReadPMA>
 8002314:	e023      	b.n	800235e <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	3306      	adds	r3, #6
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800233e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002342:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002350:	6959      	ldr	r1, [r3, #20]
 8002352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002354:	895a      	ldrh	r2, [r3, #10]
 8002356:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800235a:	f004 fc0f 	bl	8006b7c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002366:	441a      	add	r2, r3
 8002368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800236c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002374:	441a      	add	r2, r3
 8002376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002378:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <PCD_EP_ISR_Handler+0x51c>
 8002382:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	429a      	cmp	r2, r3
 800238c:	d206      	bcs.n	800239c <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800238e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f006 fa21 	bl	80087dc <HAL_PCD_DataOutStageCallback>
 800239a:	e005      	b.n	80023a8 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 feb6 	bl	8005114 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8123 	beq.w	80025fc <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80023b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80023fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002402:	b29b      	uxth	r3, r3
 8002404:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002408:	78db      	ldrb	r3, [r3, #3]
 800240a:	2b01      	cmp	r3, #1
 800240c:	f040 80a2 	bne.w	8002554 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002418:	7b1b      	ldrb	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8093 	beq.w	8002546 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002420:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d046      	beq.n	80024ba <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800242c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242e:	785b      	ldrb	r3, [r3, #1]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d126      	bne.n	8002482 <PCD_EP_ISR_Handler+0x610>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	4413      	add	r3, r2
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
 800244c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	011a      	lsls	r2, r3, #4
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	4413      	add	r3, r2
 8002456:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800245a:	623b      	str	r3, [r7, #32]
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002466:	b29a      	uxth	r2, r3
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	801a      	strh	r2, [r3, #0]
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247a:	b29a      	uxth	r2, r3
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	e061      	b.n	8002546 <PCD_EP_ISR_Handler+0x6d4>
 8002482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002484:	785b      	ldrb	r3, [r3, #1]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d15d      	bne.n	8002546 <PCD_EP_ISR_Handler+0x6d4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	4413      	add	r3, r2
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	011a      	lsls	r2, r3, #4
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	4413      	add	r3, r2
 80024ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	2200      	movs	r2, #0
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	e045      	b.n	8002546 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d126      	bne.n	8002516 <PCD_EP_ISR_Handler+0x6a4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024dc:	4413      	add	r3, r2
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
 80024e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	011a      	lsls	r2, r3, #4
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	4413      	add	r3, r2
 80024ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	801a      	strh	r2, [r3, #0]
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800250a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250e:	b29a      	uxth	r2, r3
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	e017      	b.n	8002546 <PCD_EP_ISR_Handler+0x6d4>
 8002516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d113      	bne.n	8002546 <PCD_EP_ISR_Handler+0x6d4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252c:	4413      	add	r3, r2
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	011a      	lsls	r2, r3, #4
 8002536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002538:	4413      	add	r3, r2
 800253a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800253e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002542:	2200      	movs	r2, #0
 8002544:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f006 f960 	bl	8008812 <HAL_PCD_DataInStageCallback>
 8002552:	e053      	b.n	80025fc <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002554:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d146      	bne.n	80025ee <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002568:	b29b      	uxth	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	3302      	adds	r3, #2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002588:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258e:	699a      	ldr	r2, [r3, #24]
 8002590:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002594:	429a      	cmp	r2, r3
 8002596:	d907      	bls.n	80025a8 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025a0:	1ad2      	subs	r2, r2, r3
 80025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a4:	619a      	str	r2, [r3, #24]
 80025a6:	e002      	b.n	80025ae <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80025a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80025ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	4619      	mov	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f006 f928 	bl	8008812 <HAL_PCD_DataInStageCallback>
 80025c2:	e01b      	b.n	80025fc <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80025c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025cc:	441a      	add	r2, r3
 80025ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80025d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025da:	441a      	add	r2, r3
 80025dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025de:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fd94 	bl	8005114 <USB_EPStartXfer>
 80025ec:	e006      	b.n	80025fc <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025f2:	461a      	mov	r2, r3
 80025f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f91b 	bl	8002832 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002604:	b29b      	uxth	r3, r3
 8002606:	b21b      	sxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	f6ff ac37 	blt.w	8001e7c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3758      	adds	r7, #88	; 0x58
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d07e      	beq.n	800272e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002638:	b29b      	uxth	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	3302      	adds	r3, #2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002658:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	8b7b      	ldrh	r3, [r7, #26]
 8002660:	429a      	cmp	r2, r3
 8002662:	d306      	bcc.n	8002672 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	8b7b      	ldrh	r3, [r7, #26]
 800266a:	1ad2      	subs	r2, r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	619a      	str	r2, [r3, #24]
 8002670:	e002      	b.n	8002678 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d123      	bne.n	80026c8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269a:	833b      	strh	r3, [r7, #24]
 800269c:	8b3b      	ldrh	r3, [r7, #24]
 800269e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026a2:	833b      	strh	r3, [r7, #24]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	441a      	add	r2, r3
 80026b2:	8b3b      	ldrh	r3, [r7, #24]
 80026b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01f      	beq.n	8002712 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ec:	82fb      	strh	r3, [r7, #22]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	441a      	add	r2, r3
 80026fc:	8afb      	ldrh	r3, [r7, #22]
 80026fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800270e:	b29b      	uxth	r3, r3
 8002710:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002712:	8b7b      	ldrh	r3, [r7, #26]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8087 	beq.w	8002828 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6959      	ldr	r1, [r3, #20]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	891a      	ldrh	r2, [r3, #8]
 8002726:	8b7b      	ldrh	r3, [r7, #26]
 8002728:	f004 fa28 	bl	8006b7c <USB_ReadPMA>
 800272c:	e07c      	b.n	8002828 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	3306      	adds	r3, #6
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002756:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	8b7b      	ldrh	r3, [r7, #26]
 800275e:	429a      	cmp	r2, r3
 8002760:	d306      	bcc.n	8002770 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	8b7b      	ldrh	r3, [r7, #26]
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	619a      	str	r2, [r3, #24]
 800276e:	e002      	b.n	8002776 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d123      	bne.n	80027c6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002798:	83fb      	strh	r3, [r7, #30]
 800279a:	8bfb      	ldrh	r3, [r7, #30]
 800279c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027a0:	83fb      	strh	r3, [r7, #30]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	441a      	add	r2, r3
 80027b0:	8bfb      	ldrh	r3, [r7, #30]
 80027b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d11f      	bne.n	8002810 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	83bb      	strh	r3, [r7, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	441a      	add	r2, r3
 80027fa:	8bbb      	ldrh	r3, [r7, #28]
 80027fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002808:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800280c:	b29b      	uxth	r3, r3
 800280e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002810:	8b7b      	ldrh	r3, [r7, #26]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6959      	ldr	r1, [r3, #20]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	895a      	ldrh	r2, [r3, #10]
 8002822:	8b7b      	ldrh	r3, [r7, #26]
 8002824:	f004 f9aa 	bl	8006b7c <USB_ReadPMA>
    }
  }

  return count;
 8002828:	8b7b      	ldrh	r3, [r7, #26]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b0a4      	sub	sp, #144	; 0x90
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 81dd 	beq.w	8002c06 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	3302      	adds	r3, #2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002874:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002880:	429a      	cmp	r2, r3
 8002882:	d907      	bls.n	8002894 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800288c:	1ad2      	subs	r2, r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	e002      	b.n	800289a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 80b9 	bne.w	8002a16 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	785b      	ldrb	r3, [r3, #1]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d126      	bne.n	80028fa <HAL_PCD_EP_DB_Transmit+0xc8>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	4413      	add	r3, r2
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	011a      	lsls	r2, r3, #4
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	4413      	add	r3, r2
 80028ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028de:	b29a      	uxth	r2, r3
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	801a      	strh	r2, [r3, #0]
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	e01a      	b.n	8002930 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	785b      	ldrb	r3, [r3, #1]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d116      	bne.n	8002930 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	4413      	add	r3, r2
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	011a      	lsls	r2, r3, #4
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	4413      	add	r3, r2
 8002924:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	2200      	movs	r2, #0
 800292e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d126      	bne.n	800298c <HAL_PCD_EP_DB_Transmit+0x15a>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	011a      	lsls	r2, r3, #4
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002970:	b29a      	uxth	r2, r3
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	801a      	strh	r2, [r3, #0]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002984:	b29a      	uxth	r2, r3
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	e017      	b.n	80029bc <HAL_PCD_EP_DB_Transmit+0x18a>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	785b      	ldrb	r3, [r3, #1]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d113      	bne.n	80029bc <HAL_PCD_EP_DB_Transmit+0x18a>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299c:	b29b      	uxth	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	4413      	add	r3, r2
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	011a      	lsls	r2, r3, #4
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	4413      	add	r3, r2
 80029b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029b4:	623b      	str	r3, [r7, #32]
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	2200      	movs	r2, #0
 80029ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f005 ff25 	bl	8008812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 82fc 	beq.w	8002fcc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	82fb      	strh	r3, [r7, #22]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	8afb      	ldrh	r3, [r7, #22]
 8002a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	8013      	strh	r3, [r2, #0]
 8002a14:	e2da      	b.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d021      	beq.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	441a      	add	r2, r3
 8002a4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	f040 82ae 	bne.w	8002fcc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a78:	441a      	add	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a86:	441a      	add	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	6a1a      	ldr	r2, [r3, #32]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d30b      	bcc.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa8:	1ad2      	subs	r2, r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	621a      	str	r2, [r3, #32]
 8002aae:	e017      	b.n	8002ae0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d108      	bne.n	8002aca <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002ab8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002abc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ac8:	e00a      	b.n	8002ae0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	785b      	ldrb	r3, [r3, #1]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d165      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x382>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afc:	4413      	add	r3, r2
 8002afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	011a      	lsls	r2, r3, #4
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b08:	4413      	add	r3, r2
 8002b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b24:	2b3e      	cmp	r3, #62	; 0x3e
 8002b26:	d91d      	bls.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x332>
 8002b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x310>
 8002b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	029b      	lsls	r3, r3, #10
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e044      	b.n	8002bee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x350>
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	e035      	b.n	8002bee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b98:	3301      	adds	r3, #1
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	029b      	lsls	r3, r3, #10
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e01c      	b.n	8002bee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d118      	bne.n	8002bee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd0:	4413      	add	r3, r2
 8002bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	011a      	lsls	r2, r3, #4
 8002bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bdc:	4413      	add	r3, r2
 8002bde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
 8002be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	6959      	ldr	r1, [r3, #20]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	891a      	ldrh	r2, [r3, #8]
 8002bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f003 ff77 	bl	8006af2 <USB_WritePMA>
 8002c04:	e1e2      	b.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3306      	adds	r3, #6
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d307      	bcc.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	619a      	str	r2, [r3, #24]
 8002c4c:	e002      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f040 80c0 	bne.w	8002dde <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	785b      	ldrb	r3, [r3, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d126      	bne.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x482>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c7a:	4413      	add	r3, r2
 8002c7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	011a      	lsls	r2, r3, #4
 8002c84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c86:	4413      	add	r3, r2
 8002c88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9c:	801a      	strh	r2, [r3, #0]
 8002c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cb0:	801a      	strh	r2, [r3, #0]
 8002cb2:	e01a      	b.n	8002cea <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	785b      	ldrb	r3, [r3, #1]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d116      	bne.n	8002cea <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cd0:	4413      	add	r3, r2
 8002cd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	011a      	lsls	r2, r3, #4
 8002cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cdc:	4413      	add	r3, r2
 8002cde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ce2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	677b      	str	r3, [r7, #116]	; 0x74
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	785b      	ldrb	r3, [r3, #1]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d12b      	bne.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0c:	4413      	add	r3, r2
 8002d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	011a      	lsls	r2, r3, #4
 8002d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d18:	4413      	add	r3, r2
 8002d1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	e017      	b.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d113      	bne.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d66:	4413      	add	r3, r2
 8002d68:	677b      	str	r3, [r7, #116]	; 0x74
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	011a      	lsls	r2, r3, #4
 8002d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d72:	4413      	add	r3, r2
 8002d74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d78:	673b      	str	r3, [r7, #112]	; 0x70
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	4619      	mov	r1, r3
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f005 fd43 	bl	8008812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 811a 	bne.w	8002fcc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	441a      	add	r2, r3
 8002dc4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	8013      	strh	r3, [r2, #0]
 8002ddc:	e0f6      	b.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d121      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	441a      	add	r2, r3
 8002e14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	f040 80ca 	bne.w	8002fcc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e40:	441a      	add	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e4e:	441a      	add	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d30b      	bcc.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e70:	1ad2      	subs	r2, r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	621a      	str	r2, [r3, #32]
 8002e76:	e017      	b.n	8002ea8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002e80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e90:	e00a      	b.n	8002ea8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	657b      	str	r3, [r7, #84]	; 0x54
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	785b      	ldrb	r3, [r3, #1]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d165      	bne.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x750>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eca:	4413      	add	r3, r2
 8002ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	011a      	lsls	r2, r3, #4
 8002ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002edc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ef4:	d91d      	bls.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x700>
 8002ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	029b      	lsls	r3, r3, #10
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2e:	801a      	strh	r2, [r3, #0]
 8002f30:	e041      	b.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f4c:	801a      	strh	r2, [r3, #0]
 8002f4e:	e032      	b.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x738>
 8002f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f66:	3301      	adds	r3, #1
 8002f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	029b      	lsls	r3, r3, #10
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7e:	801a      	strh	r2, [r3, #0]
 8002f80:	e019      	b.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	785b      	ldrb	r3, [r3, #1]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d115      	bne.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f98:	4413      	add	r3, r2
 8002f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	011a      	lsls	r2, r3, #4
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002faa:	653b      	str	r3, [r7, #80]	; 0x50
 8002fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	6959      	ldr	r1, [r3, #20]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	895a      	ldrh	r2, [r3, #10]
 8002fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f003 fd93 	bl	8006af2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe6:	82bb      	strh	r3, [r7, #20]
 8002fe8:	8abb      	ldrh	r3, [r7, #20]
 8002fea:	f083 0310 	eor.w	r3, r3, #16
 8002fee:	82bb      	strh	r3, [r7, #20]
 8002ff0:	8abb      	ldrh	r3, [r7, #20]
 8002ff2:	f083 0320 	eor.w	r3, r3, #32
 8002ff6:	82bb      	strh	r3, [r7, #20]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	441a      	add	r2, r3
 8003006:	8abb      	ldrh	r3, [r7, #20]
 8003008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800300c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003018:	b29b      	uxth	r3, r3
 800301a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3790      	adds	r7, #144	; 0x90
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003026:	b480      	push	{r7}
 8003028:	b087      	sub	sp, #28
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
 8003034:	4613      	mov	r3, r2
 8003036:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003038:	897b      	ldrh	r3, [r7, #10]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003044:	897b      	ldrh	r3, [r7, #10]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e009      	b.n	8003070 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800305c:	897a      	ldrh	r2, [r7, #10]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003070:	893b      	ldrh	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	b29a      	uxth	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	80da      	strh	r2, [r3, #6]
 8003084:	e00b      	b.n	800309e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2201      	movs	r2, #1
 800308a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	b29a      	uxth	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0c1b      	lsrs	r3, r3, #16
 8003098:	b29a      	uxth	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
	...

080030ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e272      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8087 	beq.w	80031da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030cc:	4b92      	ldr	r3, [pc, #584]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d00c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030d8:	4b8f      	ldr	r3, [pc, #572]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d112      	bne.n	800310a <HAL_RCC_OscConfig+0x5e>
 80030e4:	4b8c      	ldr	r3, [pc, #560]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d10b      	bne.n	800310a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f2:	4b89      	ldr	r3, [pc, #548]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d06c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x12c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d168      	bne.n	80031d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e24c      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x76>
 8003114:	4b80      	ldr	r3, [pc, #512]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a7f      	ldr	r2, [pc, #508]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e02e      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x98>
 800312a:	4b7b      	ldr	r3, [pc, #492]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7a      	ldr	r2, [pc, #488]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b78      	ldr	r3, [pc, #480]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a77      	ldr	r2, [pc, #476]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800313c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0xbc>
 800314e:	4b72      	ldr	r3, [pc, #456]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a71      	ldr	r2, [pc, #452]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b6f      	ldr	r3, [pc, #444]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6e      	ldr	r2, [pc, #440]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003168:	4b6b      	ldr	r3, [pc, #428]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6a      	ldr	r2, [pc, #424]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b68      	ldr	r3, [pc, #416]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a67      	ldr	r2, [pc, #412]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd fe7e 	bl	8000e88 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7fd fe7a 	bl	8000e88 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e200      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b5d      	ldr	r3, [pc, #372]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xe4>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd fe6a 	bl	8000e88 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fd fe66 	bl	8000e88 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1ec      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x10c>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e6:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031f2:	4b49      	ldr	r3, [pc, #292]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d11c      	bne.n	8003238 <HAL_RCC_OscConfig+0x18c>
 80031fe:	4b46      	ldr	r3, [pc, #280]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d116      	bne.n	8003238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	4b43      	ldr	r3, [pc, #268]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x176>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e1c0      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4939      	ldr	r1, [pc, #228]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e03a      	b.n	80032ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b36      	ldr	r3, [pc, #216]	; (800331c <HAL_RCC_OscConfig+0x270>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fd fe1f 	bl	8000e88 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324e:	f7fd fe1b 	bl	8000e88 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e1a1      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4927      	ldr	r1, [pc, #156]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
 8003280:	e015      	b.n	80032ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <HAL_RCC_OscConfig+0x270>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fdfe 	bl	8000e88 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003290:	f7fd fdfa 	bl	8000e88 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e180      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d03a      	beq.n	8003330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d019      	beq.n	80032f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c2:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c8:	f7fd fdde 	bl	8000e88 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fd fdda 	bl	8000e88 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e160      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f000 fa9c 	bl	800382c <RCC_Delay>
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_RCC_OscConfig+0x274>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fc:	f7fd fdc4 	bl	8000e88 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003302:	e00f      	b.n	8003324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003304:	f7fd fdc0 	bl	8000e88 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d908      	bls.n	8003324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e146      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	42420000 	.word	0x42420000
 8003320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	4b92      	ldr	r3, [pc, #584]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e9      	bne.n	8003304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80a6 	beq.w	800348a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b8b      	ldr	r3, [pc, #556]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4a87      	ldr	r2, [pc, #540]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	61d3      	str	r3, [r2, #28]
 800335a:	4b85      	ldr	r3, [pc, #532]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b82      	ldr	r3, [pc, #520]	; (8003574 <HAL_RCC_OscConfig+0x4c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b7f      	ldr	r3, [pc, #508]	; (8003574 <HAL_RCC_OscConfig+0x4c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7e      	ldr	r2, [pc, #504]	; (8003574 <HAL_RCC_OscConfig+0x4c8>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fd fd81 	bl	8000e88 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fd fd7d 	bl	8000e88 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	; 0x64
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e103      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	4b75      	ldr	r3, [pc, #468]	; (8003574 <HAL_RCC_OscConfig+0x4c8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x312>
 80033b0:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6213      	str	r3, [r2, #32]
 80033bc:	e02d      	b.n	800341a <HAL_RCC_OscConfig+0x36e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x334>
 80033c6:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a69      	ldr	r2, [pc, #420]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6213      	str	r3, [r2, #32]
 80033d2:	4b67      	ldr	r3, [pc, #412]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a66      	ldr	r2, [pc, #408]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	6213      	str	r3, [r2, #32]
 80033de:	e01c      	b.n	800341a <HAL_RCC_OscConfig+0x36e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d10c      	bne.n	8003402 <HAL_RCC_OscConfig+0x356>
 80033e8:	4b61      	ldr	r3, [pc, #388]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4a60      	ldr	r2, [pc, #384]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	f043 0304 	orr.w	r3, r3, #4
 80033f2:	6213      	str	r3, [r2, #32]
 80033f4:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4a5d      	ldr	r2, [pc, #372]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6213      	str	r3, [r2, #32]
 8003400:	e00b      	b.n	800341a <HAL_RCC_OscConfig+0x36e>
 8003402:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a5a      	ldr	r2, [pc, #360]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6213      	str	r3, [r2, #32]
 800340e:	4b58      	ldr	r3, [pc, #352]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	4a57      	ldr	r2, [pc, #348]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d015      	beq.n	800344e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fd fd31 	bl	8000e88 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fd fd2d 	bl	8000e88 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0b1      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	4b4b      	ldr	r3, [pc, #300]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ee      	beq.n	800342a <HAL_RCC_OscConfig+0x37e>
 800344c:	e014      	b.n	8003478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fd fd1b 	bl	8000e88 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd fd17 	bl	8000e88 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e09b      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346c:	4b40      	ldr	r3, [pc, #256]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ee      	bne.n	8003456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d105      	bne.n	800348a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347e:	4b3c      	ldr	r3, [pc, #240]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a3b      	ldr	r2, [pc, #236]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8087 	beq.w	80035a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003494:	4b36      	ldr	r3, [pc, #216]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d061      	beq.n	8003564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d146      	bne.n	8003536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a8:	4b33      	ldr	r3, [pc, #204]	; (8003578 <HAL_RCC_OscConfig+0x4cc>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fd fceb 	bl	8000e88 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fd fce7 	bl	8000e88 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e06d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034dc:	d108      	bne.n	80034f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4921      	ldr	r1, [pc, #132]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f0:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a19      	ldr	r1, [r3, #32]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	430b      	orrs	r3, r1
 8003502:	491b      	ldr	r1, [pc, #108]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003508:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fd fcbb 	bl	8000e88 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fd fcb7 	bl	8000e88 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e03d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x46a>
 8003534:	e035      	b.n	80035a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_RCC_OscConfig+0x4cc>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fd fca4 	bl	8000e88 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fd fca0 	bl	8000e88 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e026      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x498>
 8003562:	e01e      	b.n	80035a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e019      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_OscConfig+0x500>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	429a      	cmp	r2, r3
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d0      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 0207 	bic.w	r2, r3, #7
 80035da:	4965      	ldr	r1, [pc, #404]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b63      	ldr	r3, [pc, #396]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0b8      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800360c:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a58      	ldr	r2, [pc, #352]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003624:	4b53      	ldr	r3, [pc, #332]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800362e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b50      	ldr	r3, [pc, #320]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	494d      	ldr	r1, [pc, #308]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d040      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d115      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e073      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06b      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b39      	ldr	r3, [pc, #228]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4936      	ldr	r1, [pc, #216]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a0:	f7fd fbf2 	bl	8000e88 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fd fbee 	bl	8000e88 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e053      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	4922      	ldr	r1, [pc, #136]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e032      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4916      	ldr	r1, [pc, #88]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	490e      	ldr	r1, [pc, #56]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373e:	f000 f821 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	490a      	ldr	r1, [pc, #40]	; (8003778 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1cc>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x1d0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fb50 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40022000 	.word	0x40022000
 8003774:	40021000 	.word	0x40021000
 8003778:	0800a03c 	.word	0x0800a03c
 800377c:	20000004 	.word	0x20000004
 8003780:	20000008 	.word	0x20000008

08003784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800379e:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <HAL_RCC_GetSysClockFreq+0x94>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x30>
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x36>
 80037b2:	e027      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037b6:	613b      	str	r3, [r7, #16]
      break;
 80037b8:	e027      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0c9b      	lsrs	r3, r3, #18
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	4a17      	ldr	r2, [pc, #92]	; (8003820 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d010      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCC_GetSysClockFreq+0x94>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	0c5b      	lsrs	r3, r3, #17
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	4a11      	ldr	r2, [pc, #68]	; (8003824 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037e6:	fb03 f202 	mul.w	r2, r3, r2
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e004      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	613b      	str	r3, [r7, #16]
      break;
 8003802:	e002      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 8003806:	613b      	str	r3, [r7, #16]
      break;
 8003808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380a:	693b      	ldr	r3, [r7, #16]
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	007a1200 	.word	0x007a1200
 8003820:	0800a04c 	.word	0x0800a04c
 8003824:	0800a05c 	.word	0x0800a05c
 8003828:	003d0900 	.word	0x003d0900

0800382c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <RCC_Delay+0x34>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <RCC_Delay+0x38>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0a5b      	lsrs	r3, r3, #9
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003848:	bf00      	nop
  }
  while (Delay --);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	60fa      	str	r2, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f9      	bne.n	8003848 <RCC_Delay+0x1c>
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	20000004 	.word	0x20000004
 8003864:	10624dd3 	.word	0x10624dd3

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d07d      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	61d3      	str	r3, [r2, #28]
 80038a0:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b46      	ldr	r3, [pc, #280]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d118      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a42      	ldr	r2, [pc, #264]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c8:	f7fd fade 	bl	8000e88 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	e008      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d0:	f7fd fada 	bl	8000e88 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e06d      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02e      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	429a      	cmp	r2, r3
 800390a:	d027      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800390c:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391c:	4b2c      	ldr	r3, [pc, #176]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003922:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d014      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fd faa9 	bl	8000e88 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fd faa5 	bl	8000e88 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e036      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ee      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4917      	ldr	r1, [pc, #92]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	4313      	orrs	r3, r2
 800396c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	490b      	ldr	r1, [pc, #44]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40007000 	.word	0x40007000
 80039d0:	42420440 	.word	0x42420440

080039d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e076      	b.n	8003ad4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f6:	d009      	beq.n	8003a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	61da      	str	r2, [r3, #28]
 80039fe:	e005      	b.n	8003a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd f84e 	bl	8000ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	ea42 0103 	orr.w	r1, r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	0c1a      	lsrs	r2, r3, #16
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f002 0204 	and.w	r2, r2, #4
 8003ab2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_SPI_Transmit+0x22>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e12d      	b.n	8003d5a <HAL_SPI_Transmit+0x27e>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b06:	f7fd f9bf 	bl	8000e88 <HAL_GetTick>
 8003b0a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b20:	e116      	b.n	8003d50 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_SPI_Transmit+0x52>
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b32:	e10d      	b.n	8003d50 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2203      	movs	r2, #3
 8003b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7a:	d10f      	bne.n	8003b9c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d007      	beq.n	8003bba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc2:	d14f      	bne.n	8003c64 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_SPI_Transmit+0xf6>
 8003bcc:	8afb      	ldrh	r3, [r7, #22]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d142      	bne.n	8003c58 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	881a      	ldrh	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bf6:	e02f      	b.n	8003c58 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d112      	bne.n	8003c2c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	881a      	ldrh	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	1c9a      	adds	r2, r3, #2
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c2a:	e015      	b.n	8003c58 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c2c:	f7fd f92c 	bl	8000e88 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d803      	bhi.n	8003c44 <HAL_SPI_Transmit+0x168>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d102      	bne.n	8003c4a <HAL_SPI_Transmit+0x16e>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c56:	e07b      	b.n	8003d50 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ca      	bne.n	8003bf8 <HAL_SPI_Transmit+0x11c>
 8003c62:	e050      	b.n	8003d06 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_Transmit+0x196>
 8003c6c:	8afb      	ldrh	r3, [r7, #22]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d144      	bne.n	8003cfc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c98:	e030      	b.n	8003cfc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d113      	bne.n	8003cd0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	7812      	ldrb	r2, [r2, #0]
 8003cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cce:	e015      	b.n	8003cfc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd0:	f7fd f8da 	bl	8000e88 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d803      	bhi.n	8003ce8 <HAL_SPI_Transmit+0x20c>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d102      	bne.n	8003cee <HAL_SPI_Transmit+0x212>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003cfa:	e029      	b.n	8003d50 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1c9      	bne.n	8003c9a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fbcc 	bl	80044a8 <SPI_EndRxTxTransaction>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e003      	b.n	8003d50 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b088      	sub	sp, #32
 8003d66:	af02      	add	r7, sp, #8
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d002      	beq.n	8003d88 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d86:	e0fb      	b.n	8003f80 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d90:	d112      	bne.n	8003db8 <HAL_SPI_Receive+0x56>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10e      	bne.n	8003db8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003da2:	88fa      	ldrh	r2, [r7, #6]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f8ef 	bl	8003f92 <HAL_SPI_TransmitReceive>
 8003db4:	4603      	mov	r3, r0
 8003db6:	e0e8      	b.n	8003f8a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_SPI_Receive+0x64>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0e1      	b.n	8003f8a <HAL_SPI_Receive+0x228>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dce:	f7fd f85b 	bl	8000e88 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_SPI_Receive+0x7e>
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003de4:	e0cc      	b.n	8003f80 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2204      	movs	r2, #4
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2c:	d10f      	bne.n	8003e4e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d007      	beq.n	8003e6c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d16a      	bne.n	8003f4a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e74:	e032      	b.n	8003edc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d115      	bne.n	8003eb0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f103 020c 	add.w	r2, r3, #12
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	7812      	ldrb	r2, [r2, #0]
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eae:	e015      	b.n	8003edc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb0:	f7fc ffea 	bl	8000e88 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d803      	bhi.n	8003ec8 <HAL_SPI_Receive+0x166>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d102      	bne.n	8003ece <HAL_SPI_Receive+0x16c>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003eda:	e051      	b.n	8003f80 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1c7      	bne.n	8003e76 <HAL_SPI_Receive+0x114>
 8003ee6:	e035      	b.n	8003f54 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d113      	bne.n	8003f1e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	b292      	uxth	r2, r2
 8003f02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f1c:	e015      	b.n	8003f4a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f1e:	f7fc ffb3 	bl	8000e88 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d803      	bhi.n	8003f36 <HAL_SPI_Receive+0x1d4>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d102      	bne.n	8003f3c <HAL_SPI_Receive+0x1da>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f48:	e01a      	b.n	8003f80 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1c9      	bne.n	8003ee8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	6839      	ldr	r1, [r7, #0]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fa53 	bl	8004404 <SPI_EndRxTransaction>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]
 8003f76:	e003      	b.n	8003f80 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b08c      	sub	sp, #48	; 0x30
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x26>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e198      	b.n	80042ea <HAL_SPI_TransmitReceive+0x358>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc0:	f7fc ff62 	bl	8000e88 <HAL_GetTick>
 8003fc4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d00f      	beq.n	8004002 <HAL_SPI_TransmitReceive+0x70>
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe8:	d107      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x68>
 8003ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d003      	beq.n	8004002 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004000:	e16d      	b.n	80042de <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x82>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x82>
 800400e:	887b      	ldrh	r3, [r7, #2]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800401a:	e160      	b.n	80042de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b04      	cmp	r3, #4
 8004026:	d003      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2205      	movs	r2, #5
 800402c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	887a      	ldrh	r2, [r7, #2]
 8004046:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	887a      	ldrh	r2, [r7, #2]
 8004052:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d007      	beq.n	8004084 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408c:	d17c      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_SPI_TransmitReceive+0x10a>
 8004096:	8b7b      	ldrh	r3, [r7, #26]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d16a      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c0:	e057      	b.n	8004172 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d11b      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x176>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_SPI_TransmitReceive+0x176>
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d113      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	881a      	ldrh	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d119      	bne.n	800414a <HAL_SPI_TransmitReceive+0x1b8>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d014      	beq.n	800414a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	b292      	uxth	r2, r2
 800412c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	1c9a      	adds	r2, r3, #2
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004146:	2301      	movs	r3, #1
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800414a:	f7fc fe9d 	bl	8000e88 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004156:	429a      	cmp	r2, r3
 8004158:	d80b      	bhi.n	8004172 <HAL_SPI_TransmitReceive+0x1e0>
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d007      	beq.n	8004172 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004170:	e0b5      	b.n	80042de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1a2      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x130>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d19d      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x130>
 8004186:	e080      	b.n	800428a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x204>
 8004190:	8b7b      	ldrh	r3, [r7, #26]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d16f      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	7812      	ldrb	r2, [r2, #0]
 80041a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041bc:	e05b      	b.n	8004276 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d11c      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x274>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d017      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x274>
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d114      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	7812      	ldrb	r2, [r2, #0]
 80041e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d119      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x2b6>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d014      	beq.n	8004248 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004244:	2301      	movs	r3, #1
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004248:	f7fc fe1e 	bl	8000e88 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004254:	429a      	cmp	r2, r3
 8004256:	d803      	bhi.n	8004260 <HAL_SPI_TransmitReceive+0x2ce>
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d102      	bne.n	8004266 <HAL_SPI_TransmitReceive+0x2d4>
 8004260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004262:	2b00      	cmp	r3, #0
 8004264:	d107      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004274:	e033      	b.n	80042de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d19e      	bne.n	80041be <HAL_SPI_TransmitReceive+0x22c>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d199      	bne.n	80041be <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800428a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f90a 	bl	80044a8 <SPI_EndRxTxTransaction>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042a6:	e01a      	b.n	80042de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d4:	e003      	b.n	80042de <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3730      	adds	r7, #48	; 0x30
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004304:	f7fc fdc0 	bl	8000e88 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	4413      	add	r3, r2
 8004312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004314:	f7fc fdb8 	bl	8000e88 <HAL_GetTick>
 8004318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800431a:	4b39      	ldr	r3, [pc, #228]	; (8004400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	015b      	lsls	r3, r3, #5
 8004320:	0d1b      	lsrs	r3, r3, #20
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	fb02 f303 	mul.w	r3, r2, r3
 8004328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800432a:	e054      	b.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d050      	beq.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004334:	f7fc fda8 	bl	8000e88 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	429a      	cmp	r2, r3
 8004342:	d902      	bls.n	800434a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d13d      	bne.n	80043c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004362:	d111      	bne.n	8004388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	d004      	beq.n	8004378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004376:	d107      	bne.n	8004388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004390:	d10f      	bne.n	80043b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e017      	b.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	bf0c      	ite	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	2300      	movne	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d19b      	bne.n	800432c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000004 	.word	0x20000004

08004404 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004418:	d111      	bne.n	800443e <SPI_EndRxTransaction+0x3a>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004422:	d004      	beq.n	800442e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442c:	d107      	bne.n	800443e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004446:	d117      	bne.n	8004478 <SPI_EndRxTransaction+0x74>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d112      	bne.n	8004478 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2200      	movs	r2, #0
 800445a:	2101      	movs	r1, #1
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff ff49 	bl	80042f4 <SPI_WaitFlagStateUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01a      	beq.n	800449e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	f043 0220 	orr.w	r2, r3, #32
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e013      	b.n	80044a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	2180      	movs	r1, #128	; 0x80
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff ff36 	bl	80042f4 <SPI_WaitFlagStateUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e000      	b.n	80044a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2200      	movs	r2, #0
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff ff18 	bl	80042f4 <SPI_WaitFlagStateUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e000      	b.n	80044dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044e4:	b084      	sub	sp, #16
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	f107 0014 	add.w	r0, r7, #20
 80044f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	b004      	add	sp, #16
 8004502:	4770      	bx	lr

08004504 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004514:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004518:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004538:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800453c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	b29b      	uxth	r3, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	b29b      	uxth	r3, r3
 800454e:	4013      	ands	r3, r2
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800457c:	b084      	sub	sp, #16
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	f107 0014 	add.w	r0, r7, #20
 800458a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	b004      	add	sp, #16
 80045ba:	4770      	bx	lr

080045bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045bc:	b480      	push	{r7}
 80045be:	b09d      	sub	sp, #116	; 0x74
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	78db      	ldrb	r3, [r3, #3]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d81f      	bhi.n	800462e <USB_ActivateEndpoint+0x72>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <USB_ActivateEndpoint+0x38>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004621 	.word	0x08004621
 80045fc:	08004637 	.word	0x08004637
 8004600:	08004613 	.word	0x08004613
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004604:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800460c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004610:	e012      	b.n	8004638 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004612:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004616:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800461a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800461e:	e00b      	b.n	8004638 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004620:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004628:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800462c:	e004      	b.n	8004638 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004634:	e000      	b.n	8004638 <USB_ActivateEndpoint+0x7c>
      break;
 8004636:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004656:	b29b      	uxth	r3, r3
 8004658:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004670:	b29a      	uxth	r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	4313      	orrs	r3, r2
 800467a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800468c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	b29b      	uxth	r3, r3
 800469e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	7b1b      	ldrb	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f040 8178 	bne.w	800499a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	785b      	ldrb	r3, [r3, #1]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8084 	beq.w	80047bc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046be:	b29b      	uxth	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	4413      	add	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	011a      	lsls	r2, r3, #4
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	88db      	ldrh	r3, [r3, #6]
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	b29b      	uxth	r3, r3
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	827b      	strh	r3, [r7, #18]
 80046f6:	8a7b      	ldrh	r3, [r7, #18]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <USB_ActivateEndpoint+0x17c>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	823b      	strh	r3, [r7, #16]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	8a3b      	ldrh	r3, [r7, #16]
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	78db      	ldrb	r3, [r3, #3]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d020      	beq.n	8004782 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004756:	81bb      	strh	r3, [r7, #12]
 8004758:	89bb      	ldrh	r3, [r7, #12]
 800475a:	f083 0320 	eor.w	r3, r3, #32
 800475e:	81bb      	strh	r3, [r7, #12]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	89bb      	ldrh	r3, [r7, #12]
 800476c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	b29b      	uxth	r3, r3
 800477e:	8013      	strh	r3, [r2, #0]
 8004780:	e2d5      	b.n	8004d2e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004798:	81fb      	strh	r3, [r7, #14]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
 80047ba:	e2b8      	b.n	8004d2e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	633b      	str	r3, [r7, #48]	; 0x30
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	4413      	add	r3, r2
 80047ce:	633b      	str	r3, [r7, #48]	; 0x30
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	011a      	lsls	r2, r3, #4
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	88db      	ldrh	r3, [r3, #6]
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	4413      	add	r3, r2
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	011a      	lsls	r2, r3, #4
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	4413      	add	r3, r2
 800480e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800481e:	b29a      	uxth	r2, r3
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b3e      	cmp	r3, #62	; 0x3e
 800482a:	d91d      	bls.n	8004868 <USB_ActivateEndpoint+0x2ac>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	66bb      	str	r3, [r7, #104]	; 0x68
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <USB_ActivateEndpoint+0x28a>
 8004840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004842:	3b01      	subs	r3, #1
 8004844:	66bb      	str	r3, [r7, #104]	; 0x68
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29a      	uxth	r2, r3
 800484c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800484e:	b29b      	uxth	r3, r3
 8004850:	029b      	lsls	r3, r3, #10
 8004852:	b29b      	uxth	r3, r3
 8004854:	4313      	orrs	r3, r2
 8004856:	b29b      	uxth	r3, r3
 8004858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800485c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004860:	b29a      	uxth	r2, r3
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	801a      	strh	r2, [r3, #0]
 8004866:	e026      	b.n	80048b6 <USB_ActivateEndpoint+0x2fa>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <USB_ActivateEndpoint+0x2ca>
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487e:	b29a      	uxth	r2, r3
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	e017      	b.n	80048b6 <USB_ActivateEndpoint+0x2fa>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	66bb      	str	r3, [r7, #104]	; 0x68
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <USB_ActivateEndpoint+0x2e4>
 800489a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800489c:	3301      	adds	r3, #1
 800489e:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	4313      	orrs	r3, r2
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80048c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <USB_ActivateEndpoint+0x34a>
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	843b      	strh	r3, [r7, #32]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	8c3b      	ldrh	r3, [r7, #32]
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d124      	bne.n	8004958 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004924:	83bb      	strh	r3, [r7, #28]
 8004926:	8bbb      	ldrh	r3, [r7, #28]
 8004928:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800492c:	83bb      	strh	r3, [r7, #28]
 800492e:	8bbb      	ldrh	r3, [r7, #28]
 8004930:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004934:	83bb      	strh	r3, [r7, #28]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	8bbb      	ldrh	r3, [r7, #28]
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]
 8004956:	e1ea      	b.n	8004d2e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	83fb      	strh	r3, [r7, #30]
 8004970:	8bfb      	ldrh	r3, [r7, #30]
 8004972:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004976:	83fb      	strh	r3, [r7, #30]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	8bfb      	ldrh	r3, [r7, #30]
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]
 8004998:	e1c9      	b.n	8004d2e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	78db      	ldrb	r3, [r3, #3]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d11e      	bne.n	80049e0 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80049ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8013      	strh	r3, [r2, #0]
 80049de:	e01d      	b.n	8004a1c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a2c:	4413      	add	r3, r2
 8004a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	011a      	lsls	r2, r3, #4
 8004a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	891b      	ldrh	r3, [r3, #8]
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	657b      	str	r3, [r7, #84]	; 0x54
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a60:	4413      	add	r3, r2
 8004a62:	657b      	str	r3, [r7, #84]	; 0x54
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	011a      	lsls	r2, r3, #4
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a72:	653b      	str	r3, [r7, #80]	; 0x50
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	895b      	ldrh	r3, [r3, #10]
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f040 8093 	bne.w	8004bb4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01b      	beq.n	8004ae2 <USB_ActivateEndpoint+0x526>
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004af0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01b      	beq.n	8004b32 <USB_ActivateEndpoint+0x576>
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b10:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b50:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b58:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b90:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	441a      	add	r2, r3
 8004b9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	8013      	strh	r3, [r2, #0]
 8004bb2:	e0bc      	b.n	8004d2e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004bc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01d      	beq.n	8004c0c <USB_ActivateEndpoint+0x650>
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01d      	beq.n	8004c64 <USB_ActivateEndpoint+0x6a8>
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	78db      	ldrb	r3, [r3, #3]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d024      	beq.n	8004cb6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c8a:	f083 0320 	eor.w	r3, r3, #32
 8004c8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
 8004cb4:	e01d      	b.n	8004cf2 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ccc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	441a      	add	r2, r3
 8004cda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3774      	adds	r7, #116	; 0x74
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b08d      	sub	sp, #52	; 0x34
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	7b1b      	ldrb	r3, [r3, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f040 808e 	bne.w	8004e6c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d044      	beq.n	8004de2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	81bb      	strh	r3, [r7, #12]
 8004d66:	89bb      	ldrh	r3, [r7, #12]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01b      	beq.n	8004da8 <USB_DeactivateEndpoint+0x6c>
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	817b      	strh	r3, [r7, #10]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	897b      	ldrh	r3, [r7, #10]
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dbe:	813b      	strh	r3, [r7, #8]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	893b      	ldrh	r3, [r7, #8]
 8004dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8013      	strh	r3, [r2, #0]
 8004de0:	e192      	b.n	8005108 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	827b      	strh	r3, [r7, #18]
 8004df0:	8a7b      	ldrh	r3, [r7, #18]
 8004df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01b      	beq.n	8004e32 <USB_DeactivateEndpoint+0xf6>
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	823b      	strh	r3, [r7, #16]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	8a3b      	ldrh	r3, [r7, #16]
 8004e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	81fb      	strh	r3, [r7, #14]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	89fb      	ldrh	r3, [r7, #14]
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]
 8004e6a:	e14d      	b.n	8005108 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f040 80a5 	bne.w	8004fc0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	843b      	strh	r3, [r7, #32]
 8004e84:	8c3b      	ldrh	r3, [r7, #32]
 8004e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01b      	beq.n	8004ec6 <USB_DeactivateEndpoint+0x18a>
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	83fb      	strh	r3, [r7, #30]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	8bfb      	ldrh	r3, [r7, #30]
 8004eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	83bb      	strh	r3, [r7, #28]
 8004ed4:	8bbb      	ldrh	r3, [r7, #28]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01b      	beq.n	8004f16 <USB_DeactivateEndpoint+0x1da>
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef4:	837b      	strh	r3, [r7, #26]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	441a      	add	r2, r3
 8004f00:	8b7b      	ldrh	r3, [r7, #26]
 8004f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2c:	833b      	strh	r3, [r7, #24]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	441a      	add	r2, r3
 8004f38:	8b3b      	ldrh	r3, [r7, #24]
 8004f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	82fb      	strh	r3, [r7, #22]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	441a      	add	r2, r3
 8004f70:	8afb      	ldrh	r3, [r7, #22]
 8004f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f9c:	82bb      	strh	r3, [r7, #20]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	8abb      	ldrh	r3, [r7, #20]
 8004faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8013      	strh	r3, [r2, #0]
 8004fbe:	e0a3      	b.n	8005108 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01b      	beq.n	8005010 <USB_DeactivateEndpoint+0x2d4>
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500c:	b29b      	uxth	r3, r3
 800500e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800501e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01b      	beq.n	8005060 <USB_DeactivateEndpoint+0x324>
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	441a      	add	r2, r3
 800504a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800504c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800505c:	b29b      	uxth	r3, r3
 800505e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	441a      	add	r2, r3
 8005082:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	441a      	add	r2, r3
 80050ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005104:	b29b      	uxth	r3, r3
 8005106:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3734      	adds	r7, #52	; 0x34
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b0c2      	sub	sp, #264	; 0x108
 8005118:	af00      	add	r7, sp, #0
 800511a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005122:	6018      	str	r0, [r3, #0]
 8005124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800512e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	2b01      	cmp	r3, #1
 800513c:	f040 86b7 	bne.w	8005eae <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	429a      	cmp	r2, r3
 800515a:	d908      	bls.n	800516e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800515c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800516c:	e007      	b.n	800517e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800516e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800517e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	7b1b      	ldrb	r3, [r3, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d13a      	bne.n	8005204 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6959      	ldr	r1, [r3, #20]
 800519a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	88da      	ldrh	r2, [r3, #6]
 80051a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051b4:	6800      	ldr	r0, [r0, #0]
 80051b6:	f001 fc9c 	bl	8006af2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	011a      	lsls	r2, r3, #4
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	f000 be1f 	b.w	8005e42 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	78db      	ldrb	r3, [r3, #3]
 8005210:	2b02      	cmp	r3, #2
 8005212:	f040 8462 	bne.w	8005ada <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a1a      	ldr	r2, [r3, #32]
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	f240 83df 	bls.w	80059f2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800525e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800527c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005284:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528c:	b29b      	uxth	r3, r3
 800528e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a0:	1ad2      	subs	r2, r2, r3
 80052a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 81c7 	beq.w	8005664 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30
 80052e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d177      	bne.n	80053e2 <USB_EPStartXfer+0x2ce>
 80052f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530c:	b29b      	uxth	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	4413      	add	r3, r2
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
 8005316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	011a      	lsls	r2, r3, #4
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	4413      	add	r3, r2
 8005328:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005338:	b29a      	uxth	r2, r3
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005342:	2b3e      	cmp	r3, #62	; 0x3e
 8005344:	d921      	bls.n	800538a <USB_EPStartXfer+0x276>
 8005346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <USB_EPStartXfer+0x252>
 800535c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005360:	3b01      	subs	r3, #1
 8005362:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29a      	uxth	r2, r3
 800536c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005370:	b29b      	uxth	r3, r3
 8005372:	029b      	lsls	r3, r3, #10
 8005374:	b29b      	uxth	r3, r3
 8005376:	4313      	orrs	r3, r2
 8005378:	b29b      	uxth	r3, r3
 800537a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005382:	b29a      	uxth	r2, r3
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	801a      	strh	r2, [r3, #0]
 8005388:	e050      	b.n	800542c <USB_EPStartXfer+0x318>
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10a      	bne.n	80053a8 <USB_EPStartXfer+0x294>
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	e041      	b.n	800542c <USB_EPStartXfer+0x318>
 80053a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <USB_EPStartXfer+0x2b4>
 80053be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053c2:	3301      	adds	r3, #1
 80053c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	029b      	lsls	r3, r3, #10
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b29a      	uxth	r2, r3
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	e024      	b.n	800542c <USB_EPStartXfer+0x318>
 80053e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	785b      	ldrb	r3, [r3, #1]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d11c      	bne.n	800542c <USB_EPStartXfer+0x318>
 80053f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005400:	b29b      	uxth	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	4413      	add	r3, r2
 8005408:	633b      	str	r3, [r7, #48]	; 0x30
 800540a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	011a      	lsls	r2, r3, #4
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	4413      	add	r3, r2
 800541c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005426:	b29a      	uxth	r2, r3
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800542c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	895b      	ldrh	r3, [r3, #10]
 8005438:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800543c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6959      	ldr	r1, [r3, #20]
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800544c:	b29b      	uxth	r3, r3
 800544e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005452:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005456:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	f001 fb49 	bl	8006af2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005470:	441a      	add	r2, r3
 8005472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800547e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6a1a      	ldr	r2, [r3, #32]
 800548a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	429a      	cmp	r2, r3
 8005498:	d90f      	bls.n	80054ba <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800549a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054aa:	1ad2      	subs	r2, r2, r3
 80054ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	621a      	str	r2, [r3, #32]
 80054b8:	e00e      	b.n	80054d8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80054ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d177      	bne.n	80055d8 <USB_EPStartXfer+0x4c4>
 80054e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	4413      	add	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	011a      	lsls	r2, r3, #4
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	4413      	add	r3, r2
 800551e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552e:	b29a      	uxth	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	801a      	strh	r2, [r3, #0]
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005538:	2b3e      	cmp	r3, #62	; 0x3e
 800553a:	d921      	bls.n	8005580 <USB_EPStartXfer+0x46c>
 800553c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <USB_EPStartXfer+0x448>
 8005552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005556:	3b01      	subs	r3, #1
 8005558:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29a      	uxth	r2, r3
 8005562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005566:	b29b      	uxth	r3, r3
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	b29b      	uxth	r3, r3
 800556c:	4313      	orrs	r3, r2
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005578:	b29a      	uxth	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e056      	b.n	800562e <USB_EPStartXfer+0x51a>
 8005580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <USB_EPStartXfer+0x48a>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005596:	b29a      	uxth	r2, r3
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e047      	b.n	800562e <USB_EPStartXfer+0x51a>
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d004      	beq.n	80055be <USB_EPStartXfer+0x4aa>
 80055b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055b8:	3301      	adds	r3, #1
 80055ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	029b      	lsls	r3, r3, #10
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	e02a      	b.n	800562e <USB_EPStartXfer+0x51a>
 80055d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d122      	bne.n	800562e <USB_EPStartXfer+0x51a>
 80055e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005602:	b29b      	uxth	r3, r3
 8005604:	461a      	mov	r2, r3
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	4413      	add	r3, r2
 800560a:	623b      	str	r3, [r7, #32]
 800560c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	011a      	lsls	r2, r3, #4
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	4413      	add	r3, r2
 800561e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005628:	b29a      	uxth	r2, r3
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800562e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	891b      	ldrh	r3, [r3, #8]
 800563a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800563e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6959      	ldr	r1, [r3, #20]
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564e:	b29b      	uxth	r3, r3
 8005650:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005654:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005658:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800565c:	6800      	ldr	r0, [r0, #0]
 800565e:	f001 fa48 	bl	8006af2 <USB_WritePMA>
 8005662:	e3ee      	b.n	8005e42 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d177      	bne.n	8005764 <USB_EPStartXfer+0x650>
 8005674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005694:	4413      	add	r3, r2
 8005696:	64bb      	str	r3, [r7, #72]	; 0x48
 8005698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	011a      	lsls	r2, r3, #4
 80056a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a8:	4413      	add	r3, r2
 80056aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056ae:	647b      	str	r3, [r7, #68]	; 0x44
 80056b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	801a      	strh	r2, [r3, #0]
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c4:	2b3e      	cmp	r3, #62	; 0x3e
 80056c6:	d921      	bls.n	800570c <USB_EPStartXfer+0x5f8>
 80056c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d104      	bne.n	80056e8 <USB_EPStartXfer+0x5d4>
 80056de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	029b      	lsls	r3, r3, #10
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4313      	orrs	r3, r2
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005704:	b29a      	uxth	r2, r3
 8005706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	e056      	b.n	80057ba <USB_EPStartXfer+0x6a6>
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <USB_EPStartXfer+0x616>
 8005714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005722:	b29a      	uxth	r2, r3
 8005724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005726:	801a      	strh	r2, [r3, #0]
 8005728:	e047      	b.n	80057ba <USB_EPStartXfer+0x6a6>
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <USB_EPStartXfer+0x636>
 8005740:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005744:	3301      	adds	r3, #1
 8005746:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800574a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29a      	uxth	r2, r3
 8005750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005754:	b29b      	uxth	r3, r3
 8005756:	029b      	lsls	r3, r3, #10
 8005758:	b29b      	uxth	r3, r3
 800575a:	4313      	orrs	r3, r2
 800575c:	b29a      	uxth	r2, r3
 800575e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	e02a      	b.n	80057ba <USB_EPStartXfer+0x6a6>
 8005764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d122      	bne.n	80057ba <USB_EPStartXfer+0x6a6>
 8005774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	653b      	str	r3, [r7, #80]	; 0x50
 8005780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005794:	4413      	add	r3, r2
 8005796:	653b      	str	r3, [r7, #80]	; 0x50
 8005798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	011a      	lsls	r2, r3, #4
 80057a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a8:	4413      	add	r3, r2
 80057aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	891b      	ldrh	r3, [r3, #8]
 80057c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6959      	ldr	r1, [r3, #20]
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057e8:	6800      	ldr	r0, [r0, #0]
 80057ea:	f001 f982 	bl	8006af2 <USB_WritePMA>
            ep->xfer_buff += len;
 80057ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fe:	441a      	add	r2, r3
 8005800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800580c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	429a      	cmp	r2, r3
 8005826:	d90f      	bls.n	8005848 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	621a      	str	r2, [r3, #32]
 8005846:	e00e      	b.n	8005866 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	643b      	str	r3, [r7, #64]	; 0x40
 8005872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d177      	bne.n	8005972 <USB_EPStartXfer+0x85e>
 8005882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
 800588e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589c:	b29b      	uxth	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	4413      	add	r3, r2
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	011a      	lsls	r2, r3, #4
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	4413      	add	r3, r2
 80058b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058bc:	637b      	str	r3, [r7, #52]	; 0x34
 80058be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d2:	2b3e      	cmp	r3, #62	; 0x3e
 80058d4:	d921      	bls.n	800591a <USB_EPStartXfer+0x806>
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e4:	f003 031f 	and.w	r3, r3, #31
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <USB_EPStartXfer+0x7e2>
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f0:	3b01      	subs	r3, #1
 80058f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005900:	b29b      	uxth	r3, r3
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	b29b      	uxth	r3, r3
 8005906:	4313      	orrs	r3, r2
 8005908:	b29b      	uxth	r3, r3
 800590a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005912:	b29a      	uxth	r2, r3
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	e050      	b.n	80059bc <USB_EPStartXfer+0x8a8>
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <USB_EPStartXfer+0x824>
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005930:	b29a      	uxth	r2, r3
 8005932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	e041      	b.n	80059bc <USB_EPStartXfer+0x8a8>
 8005938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <USB_EPStartXfer+0x844>
 800594e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005952:	3301      	adds	r3, #1
 8005954:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29a      	uxth	r2, r3
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005962:	b29b      	uxth	r3, r3
 8005964:	029b      	lsls	r3, r3, #10
 8005966:	b29b      	uxth	r3, r3
 8005968:	4313      	orrs	r3, r2
 800596a:	b29a      	uxth	r2, r3
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e024      	b.n	80059bc <USB_EPStartXfer+0x8a8>
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d11c      	bne.n	80059bc <USB_EPStartXfer+0x8a8>
 8005982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005990:	b29b      	uxth	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005996:	4413      	add	r3, r2
 8005998:	643b      	str	r3, [r7, #64]	; 0x40
 800599a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	011a      	lsls	r2, r3, #4
 80059a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059aa:	4413      	add	r3, r2
 80059ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	895b      	ldrh	r3, [r3, #10]
 80059c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6959      	ldr	r1, [r3, #20]
 80059d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059ea:	6800      	ldr	r0, [r0, #0]
 80059ec:	f001 f881 	bl	8006af2 <USB_WritePMA>
 80059f0:	e227      	b.n	8005e42 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a28:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a7e:	4413      	add	r3, r2
 8005a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	011a      	lsls	r2, r3, #4
 8005a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a92:	4413      	add	r3, r2
 8005a94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aa2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	891b      	ldrh	r3, [r3, #8]
 8005ab0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6959      	ldr	r1, [r3, #20]
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005aca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ace:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ad2:	6800      	ldr	r0, [r0, #0]
 8005ad4:	f001 f80d 	bl	8006af2 <USB_WritePMA>
 8005ad8:	e1b3      	b.n	8005e42 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a1a      	ldr	r2, [r3, #32]
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aea:	1ad2      	subs	r2, r2, r3
 8005aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80c6 	beq.w	8005cac <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d177      	bne.n	8005c2c <USB_EPStartXfer+0xb18>
 8005b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b5c:	4413      	add	r3, r2
 8005b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	011a      	lsls	r2, r3, #4
 8005b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b70:	4413      	add	r3, r2
 8005b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b76:	667b      	str	r3, [r7, #100]	; 0x64
 8005b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b8e:	d921      	bls.n	8005bd4 <USB_EPStartXfer+0xac0>
 8005b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <USB_EPStartXfer+0xa9c>
 8005ba6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005baa:	3b01      	subs	r3, #1
 8005bac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e050      	b.n	8005c76 <USB_EPStartXfer+0xb62>
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <USB_EPStartXfer+0xade>
 8005bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e041      	b.n	8005c76 <USB_EPStartXfer+0xb62>
 8005bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <USB_EPStartXfer+0xafe>
 8005c08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	029b      	lsls	r3, r3, #10
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	4313      	orrs	r3, r2
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c28:	801a      	strh	r2, [r3, #0]
 8005c2a:	e024      	b.n	8005c76 <USB_EPStartXfer+0xb62>
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d11c      	bne.n	8005c76 <USB_EPStartXfer+0xb62>
 8005c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c50:	4413      	add	r3, r2
 8005c52:	673b      	str	r3, [r7, #112]	; 0x70
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	011a      	lsls	r2, r3, #4
 8005c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c64:	4413      	add	r3, r2
 8005c66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	895b      	ldrh	r3, [r3, #10]
 8005c82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6959      	ldr	r1, [r3, #20]
 8005c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c9c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ca0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ca4:	6800      	ldr	r0, [r0, #0]
 8005ca6:	f000 ff24 	bl	8006af2 <USB_WritePMA>
 8005caa:	e0ca      	b.n	8005e42 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d177      	bne.n	8005dac <USB_EPStartXfer+0xc98>
 8005cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cdc:	4413      	add	r3, r2
 8005cde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	011a      	lsls	r2, r3, #4
 8005cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d0e:	d921      	bls.n	8005d54 <USB_EPStartXfer+0xc40>
 8005d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <USB_EPStartXfer+0xc1c>
 8005d26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	029b      	lsls	r3, r3, #10
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	4313      	orrs	r3, r2
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	e05c      	b.n	8005e0e <USB_EPStartXfer+0xcfa>
 8005d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10a      	bne.n	8005d72 <USB_EPStartXfer+0xc5e>
 8005d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d6e:	801a      	strh	r2, [r3, #0]
 8005d70:	e04d      	b.n	8005e0e <USB_EPStartXfer+0xcfa>
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <USB_EPStartXfer+0xc7e>
 8005d88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e030      	b.n	8005e0e <USB_EPStartXfer+0xcfa>
 8005dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d128      	bne.n	8005e0e <USB_EPStartXfer+0xcfa>
 8005dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005de0:	4413      	add	r3, r2
 8005de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df8:	4413      	add	r3, r2
 8005dfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	891b      	ldrh	r3, [r3, #8]
 8005e1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6959      	ldr	r1, [r3, #20]
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e38:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e3c:	6800      	ldr	r0, [r0, #0]
 8005e3e:	f000 fe58 	bl	8006af2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e68:	817b      	strh	r3, [r7, #10]
 8005e6a:	897b      	ldrh	r3, [r7, #10]
 8005e6c:	f083 0310 	eor.w	r3, r3, #16
 8005e70:	817b      	strh	r3, [r7, #10]
 8005e72:	897b      	ldrh	r3, [r7, #10]
 8005e74:	f083 0320 	eor.w	r3, r3, #32
 8005e78:	817b      	strh	r3, [r7, #10]
 8005e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	441a      	add	r2, r3
 8005e94:	897b      	ldrh	r3, [r7, #10]
 8005e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]
 8005eaa:	f000 bcde 	b.w	800686a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	7b1b      	ldrb	r3, [r3, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 80bb 	bne.w	8006036 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699a      	ldr	r2, [r3, #24]
 8005ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d917      	bls.n	8005f0c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efc:	1ad2      	subs	r2, r2, r3
 8005efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	619a      	str	r2, [r3, #24]
 8005f0a:	e00e      	b.n	8005f2a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f4e:	4413      	add	r3, r2
 8005f50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	011a      	lsls	r2, r3, #4
 8005f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f66:	4413      	add	r3, r2
 8005f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f88:	2b3e      	cmp	r3, #62	; 0x3e
 8005f8a:	d924      	bls.n	8005fd6 <USB_EPStartXfer+0xec2>
 8005f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <USB_EPStartXfer+0xe98>
 8005fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	f000 bc10 	b.w	80067f6 <USB_EPStartXfer+0x16e2>
 8005fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10c      	bne.n	8005ff8 <USB_EPStartXfer+0xee4>
 8005fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	e3fe      	b.n	80067f6 <USB_EPStartXfer+0x16e2>
 8005ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffc:	085b      	lsrs	r3, r3, #1
 8005ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <USB_EPStartXfer+0xf04>
 800600e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006012:	3301      	adds	r3, #1
 8006014:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29a      	uxth	r2, r3
 8006020:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006024:	b29b      	uxth	r3, r3
 8006026:	029b      	lsls	r3, r3, #10
 8006028:	b29b      	uxth	r3, r3
 800602a:	4313      	orrs	r3, r2
 800602c:	b29a      	uxth	r2, r3
 800602e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006032:	801a      	strh	r2, [r3, #0]
 8006034:	e3df      	b.n	80067f6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	78db      	ldrb	r3, [r3, #3]
 8006042:	2b02      	cmp	r3, #2
 8006044:	f040 8218 	bne.w	8006478 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	785b      	ldrb	r3, [r3, #1]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f040 809d 	bne.w	8006194 <USB_EPStartXfer+0x1080>
 800605a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006076:	b29b      	uxth	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800607e:	4413      	add	r3, r2
 8006080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	011a      	lsls	r2, r3, #4
 8006092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006096:	4413      	add	r3, r2
 8006098:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800609c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b3e      	cmp	r3, #62	; 0x3e
 80060c2:	d92b      	bls.n	800611c <USB_EPStartXfer+0x1008>
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <USB_EPStartXfer+0xfe0>
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ee:	3b01      	subs	r3, #1
 80060f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006100:	b29b      	uxth	r3, r3
 8006102:	029b      	lsls	r3, r3, #10
 8006104:	b29b      	uxth	r3, r3
 8006106:	4313      	orrs	r3, r2
 8006108:	b29b      	uxth	r3, r3
 800610a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006112:	b29a      	uxth	r2, r3
 8006114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e070      	b.n	80061fe <USB_EPStartXfer+0x10ea>
 800611c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10c      	bne.n	8006146 <USB_EPStartXfer+0x1032>
 800612c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613c:	b29a      	uxth	r2, r3
 800613e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	e05b      	b.n	80061fe <USB_EPStartXfer+0x10ea>
 8006146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <USB_EPStartXfer+0x1062>
 800616c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006170:	3301      	adds	r3, #1
 8006172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29a      	uxth	r2, r3
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	b29b      	uxth	r3, r3
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	b29b      	uxth	r3, r3
 8006188:	4313      	orrs	r3, r2
 800618a:	b29a      	uxth	r2, r3
 800618c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e034      	b.n	80061fe <USB_EPStartXfer+0x10ea>
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d12c      	bne.n	80061fe <USB_EPStartXfer+0x10ea>
 80061a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061c8:	4413      	add	r3, r2
 80061ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	011a      	lsls	r2, r3, #4
 80061dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061e0:	4413      	add	r3, r2
 80061e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800620c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f040 809d 	bne.w	8006358 <USB_EPStartXfer+0x1244>
 800621e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800622c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623a:	b29b      	uxth	r3, r3
 800623c:	461a      	mov	r2, r3
 800623e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006242:	4413      	add	r3, r2
 8006244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	011a      	lsls	r2, r3, #4
 8006256:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800625a:	4413      	add	r3, r2
 800625c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006270:	b29a      	uxth	r2, r3
 8006272:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b3e      	cmp	r3, #62	; 0x3e
 8006286:	d92b      	bls.n	80062e0 <USB_EPStartXfer+0x11cc>
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800629a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d104      	bne.n	80062b8 <USB_EPStartXfer+0x11a4>
 80062ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b2:	3b01      	subs	r3, #1
 80062b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29a      	uxth	r2, r3
 80062c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	029b      	lsls	r3, r3, #10
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	4313      	orrs	r3, r2
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e069      	b.n	80063b4 <USB_EPStartXfer+0x12a0>
 80062e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10c      	bne.n	800630a <USB_EPStartXfer+0x11f6>
 80062f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29a      	uxth	r2, r3
 8006302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	e054      	b.n	80063b4 <USB_EPStartXfer+0x12a0>
 800630a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800631c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <USB_EPStartXfer+0x1226>
 8006330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006334:	3301      	adds	r3, #1
 8006336:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800633a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29a      	uxth	r2, r3
 8006342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006346:	b29b      	uxth	r3, r3
 8006348:	029b      	lsls	r3, r3, #10
 800634a:	b29b      	uxth	r3, r3
 800634c:	4313      	orrs	r3, r2
 800634e:	b29a      	uxth	r2, r3
 8006350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	e02d      	b.n	80063b4 <USB_EPStartXfer+0x12a0>
 8006358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d125      	bne.n	80063b4 <USB_EPStartXfer+0x12a0>
 8006368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006376:	b29b      	uxth	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800637e:	4413      	add	r3, r2
 8006380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	011a      	lsls	r2, r3, #4
 8006392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006396:	4413      	add	r3, r2
 8006398:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800639c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8218 	beq.w	80067f6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <USB_EPStartXfer+0x12ea>
 80063f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10d      	bne.n	800641a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006406:	2b00      	cmp	r3, #0
 8006408:	f040 81f5 	bne.w	80067f6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800640c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 81ee 	bne.w	80067f6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800641a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	b29b      	uxth	r3, r3
 8006438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006440:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	441a      	add	r2, r3
 800645e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006472:	b29b      	uxth	r3, r3
 8006474:	8013      	strh	r3, [r2, #0]
 8006476:	e1be      	b.n	80067f6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	78db      	ldrb	r3, [r3, #3]
 8006484:	2b01      	cmp	r3, #1
 8006486:	f040 81b4 	bne.w	80067f2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800648a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d917      	bls.n	80064d6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80064a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80064b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	619a      	str	r2, [r3, #24]
 80064d4:	e00e      	b.n	80064f4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80064e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2200      	movs	r2, #0
 80064f2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 8085 	bne.w	8006610 <USB_EPStartXfer+0x14fc>
 8006506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800652a:	4413      	add	r3, r2
 800652c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	011a      	lsls	r2, r3, #4
 800653e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006542:	4413      	add	r3, r2
 8006544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800654c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006558:	b29a      	uxth	r2, r3
 800655a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006564:	2b3e      	cmp	r3, #62	; 0x3e
 8006566:	d923      	bls.n	80065b0 <USB_EPStartXfer+0x149c>
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656c:	095b      	lsrs	r3, r3, #5
 800656e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <USB_EPStartXfer+0x1474>
 800657e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006582:	3b01      	subs	r3, #1
 8006584:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006588:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29a      	uxth	r2, r3
 8006590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006594:	b29b      	uxth	r3, r3
 8006596:	029b      	lsls	r3, r3, #10
 8006598:	b29b      	uxth	r3, r3
 800659a:	4313      	orrs	r3, r2
 800659c:	b29b      	uxth	r3, r3
 800659e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065ac:	801a      	strh	r2, [r3, #0]
 80065ae:	e060      	b.n	8006672 <USB_EPStartXfer+0x155e>
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10c      	bne.n	80065d2 <USB_EPStartXfer+0x14be>
 80065b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	e04f      	b.n	8006672 <USB_EPStartXfer+0x155e>
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <USB_EPStartXfer+0x14de>
 80065e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ec:	3301      	adds	r3, #1
 80065ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065fe:	b29b      	uxth	r3, r3
 8006600:	029b      	lsls	r3, r3, #10
 8006602:	b29b      	uxth	r3, r3
 8006604:	4313      	orrs	r3, r2
 8006606:	b29a      	uxth	r2, r3
 8006608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	e030      	b.n	8006672 <USB_EPStartXfer+0x155e>
 8006610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d128      	bne.n	8006672 <USB_EPStartXfer+0x155e>
 8006620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663c:	b29b      	uxth	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006644:	4413      	add	r3, r2
 8006646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800664a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	011a      	lsls	r2, r3, #4
 8006658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800665c:	4413      	add	r3, r2
 800665e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666a:	b29a      	uxth	r2, r3
 800666c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f040 8085 	bne.w	800679c <USB_EPStartXfer+0x1688>
 8006692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066b6:	4413      	add	r3, r2
 80066b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	011a      	lsls	r2, r3, #4
 80066ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066ce:	4413      	add	r3, r2
 80066d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f0:	2b3e      	cmp	r3, #62	; 0x3e
 80066f2:	d923      	bls.n	800673c <USB_EPStartXfer+0x1628>
 80066f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <USB_EPStartXfer+0x1600>
 800670a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800670e:	3b01      	subs	r3, #1
 8006710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006714:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29a      	uxth	r2, r3
 800671c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006720:	b29b      	uxth	r3, r3
 8006722:	029b      	lsls	r3, r3, #10
 8006724:	b29b      	uxth	r3, r3
 8006726:	4313      	orrs	r3, r2
 8006728:	b29b      	uxth	r3, r3
 800672a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006732:	b29a      	uxth	r2, r3
 8006734:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006738:	801a      	strh	r2, [r3, #0]
 800673a:	e05c      	b.n	80067f6 <USB_EPStartXfer+0x16e2>
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10c      	bne.n	800675e <USB_EPStartXfer+0x164a>
 8006744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006754:	b29a      	uxth	r2, r3
 8006756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	e04b      	b.n	80067f6 <USB_EPStartXfer+0x16e2>
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <USB_EPStartXfer+0x166a>
 8006774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006778:	3301      	adds	r3, #1
 800677a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800677e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b29a      	uxth	r2, r3
 8006786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800678a:	b29b      	uxth	r3, r3
 800678c:	029b      	lsls	r3, r3, #10
 800678e:	b29b      	uxth	r3, r3
 8006790:	4313      	orrs	r3, r2
 8006792:	b29a      	uxth	r2, r3
 8006794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	e02c      	b.n	80067f6 <USB_EPStartXfer+0x16e2>
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	785b      	ldrb	r3, [r3, #1]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d124      	bne.n	80067f6 <USB_EPStartXfer+0x16e2>
 80067ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067c2:	4413      	add	r3, r2
 80067c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	011a      	lsls	r2, r3, #4
 80067d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067da:	4413      	add	r3, r2
 80067dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e001      	b.n	80067f6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e03a      	b.n	800686c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006820:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006824:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006828:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800682c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006830:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006834:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006866:	b29b      	uxth	r3, r3
 8006868:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d020      	beq.n	80068ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689e:	81bb      	strh	r3, [r7, #12]
 80068a0:	89bb      	ldrh	r3, [r7, #12]
 80068a2:	f083 0310 	eor.w	r3, r3, #16
 80068a6:	81bb      	strh	r3, [r7, #12]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	441a      	add	r2, r3
 80068b2:	89bb      	ldrh	r3, [r7, #12]
 80068b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	8013      	strh	r3, [r2, #0]
 80068c8:	e01f      	b.n	800690a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e0:	81fb      	strh	r3, [r7, #14]
 80068e2:	89fb      	ldrh	r3, [r7, #14]
 80068e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068e8:	81fb      	strh	r3, [r7, #14]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	441a      	add	r2, r3
 80068f4:	89fb      	ldrh	r3, [r7, #14]
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	bc80      	pop	{r7}
 8006914:	4770      	bx	lr

08006916 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006916:	b480      	push	{r7}
 8006918:	b087      	sub	sp, #28
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	7b1b      	ldrb	r3, [r3, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f040 809d 	bne.w	8006a64 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	785b      	ldrb	r3, [r3, #1]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d04c      	beq.n	80069cc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	823b      	strh	r3, [r7, #16]
 8006940:	8a3b      	ldrh	r3, [r7, #16]
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01b      	beq.n	8006982 <USB_EPClearStall+0x6c>
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	81fb      	strh	r3, [r7, #14]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	441a      	add	r2, r3
 800696c:	89fb      	ldrh	r3, [r7, #14]
 800696e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800697e:	b29b      	uxth	r3, r3
 8006980:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	78db      	ldrb	r3, [r3, #3]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d06c      	beq.n	8006a64 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	81bb      	strh	r3, [r7, #12]
 80069a2:	89bb      	ldrh	r3, [r7, #12]
 80069a4:	f083 0320 	eor.w	r3, r3, #32
 80069a8:	81bb      	strh	r3, [r7, #12]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	441a      	add	r2, r3
 80069b4:	89bb      	ldrh	r3, [r7, #12]
 80069b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	8013      	strh	r3, [r2, #0]
 80069ca:	e04b      	b.n	8006a64 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	82fb      	strh	r3, [r7, #22]
 80069da:	8afb      	ldrh	r3, [r7, #22]
 80069dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <USB_EPClearStall+0x106>
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	82bb      	strh	r3, [r7, #20]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	8abb      	ldrh	r3, [r7, #20]
 8006a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a32:	827b      	strh	r3, [r7, #18]
 8006a34:	8a7b      	ldrh	r3, [r7, #18]
 8006a36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a3a:	827b      	strh	r3, [r7, #18]
 8006a3c:	8a7b      	ldrh	r3, [r7, #18]
 8006a3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a42:	827b      	strh	r3, [r7, #18]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	8a7b      	ldrh	r3, [r7, #18]
 8006a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2280      	movs	r2, #128	; 0x80
 8006a86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc80      	pop	{r7}
 8006a94:	4770      	bx	lr

08006a96 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr

08006af2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b08b      	sub	sp, #44	; 0x2c
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	4611      	mov	r1, r2
 8006afe:	461a      	mov	r2, r3
 8006b00:	460b      	mov	r3, r1
 8006b02:	80fb      	strh	r3, [r7, #6]
 8006b04:	4613      	mov	r3, r2
 8006b06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b08:	88bb      	ldrh	r3, [r7, #4]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	005a      	lsls	r2, r3, #1
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b24:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2a:	e01e      	b.n	8006b6a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3301      	adds	r3, #1
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	b21a      	sxth	r2, r3
 8006b3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	b21b      	sxth	r3, r3
 8006b44:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	8a7a      	ldrh	r2, [r7, #18]
 8006b4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	3302      	adds	r3, #2
 8006b50:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	3302      	adds	r3, #2
 8006b56:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	3301      	adds	r3, #1
 8006b62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	3b01      	subs	r3, #1
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1dd      	bne.n	8006b2c <USB_WritePMA+0x3a>
  }
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	372c      	adds	r7, #44	; 0x2c
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr

08006b7c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b08b      	sub	sp, #44	; 0x2c
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	4611      	mov	r1, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	80fb      	strh	r3, [r7, #6]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b92:	88bb      	ldrh	r3, [r7, #4]
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	005a      	lsls	r2, r3, #1
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb4:	e01b      	b.n	8006bee <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	0a1b      	lsrs	r3, r3, #8
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	3301      	adds	r3, #1
 8006be0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	3302      	adds	r3, #2
 8006be6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	3b01      	subs	r3, #1
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e0      	bne.n	8006bb6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006bf4:	88bb      	ldrh	r3, [r7, #4]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d007      	beq.n	8006c10 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	701a      	strb	r2, [r3, #0]
  }
}
 8006c10:	bf00      	nop
 8006c12:	372c      	adds	r7, #44	; 0x2c
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bc80      	pop	{r7}
 8006c18:	4770      	bx	lr

08006c1a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	7c1b      	ldrb	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d115      	bne.n	8006c5e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c36:	2202      	movs	r2, #2
 8006c38:	2181      	movs	r1, #129	; 0x81
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fecd 	bl	80089da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fec3 	bl	80089da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c5c:	e012      	b.n	8006c84 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	2202      	movs	r2, #2
 8006c62:	2181      	movs	r1, #129	; 0x81
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 feb8 	bl	80089da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c70:	2340      	movs	r3, #64	; 0x40
 8006c72:	2202      	movs	r2, #2
 8006c74:	2101      	movs	r1, #1
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 feaf 	bl	80089da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c84:	2308      	movs	r3, #8
 8006c86:	2203      	movs	r2, #3
 8006c88:	2182      	movs	r1, #130	; 0x82
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fea5 	bl	80089da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c96:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c9a:	f001 ffc5 	bl	8008c28 <USBD_static_malloc>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
 8006cb4:	e026      	b.n	8006d04 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	7c1b      	ldrb	r3, [r3, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cea:	2101      	movs	r1, #1
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 ff65 	bl	8008bbc <USBD_LL_PrepareReceive>
 8006cf2:	e007      	b.n	8006d04 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cfa:	2340      	movs	r3, #64	; 0x40
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 ff5c 	bl	8008bbc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d1e:	2181      	movs	r1, #129	; 0x81
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fe80 	bl	8008a26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 fe79 	bl	8008a26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d3c:	2182      	movs	r1, #130	; 0x82
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 fe71 	bl	8008a26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00e      	beq.n	8006d72 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 ff6b 	bl	8008c40 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d039      	beq.n	8006e1a <USBD_CDC_Setup+0x9e>
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d17f      	bne.n	8006eaa <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	88db      	ldrh	r3, [r3, #6]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d029      	beq.n	8006e06 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	b25b      	sxtb	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	da11      	bge.n	8006de0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006dc8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	88d2      	ldrh	r2, [r2, #6]
 8006dce:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006dd0:	6939      	ldr	r1, [r7, #16]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fa24 	bl	8008226 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006dde:	e06b      	b.n	8006eb8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	785a      	ldrb	r2, [r3, #1]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	88db      	ldrh	r3, [r3, #6]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006df6:	6939      	ldr	r1, [r7, #16]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	88db      	ldrh	r3, [r3, #6]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fa3f 	bl	8008282 <USBD_CtlPrepareRx>
      break;
 8006e04:	e058      	b.n	8006eb8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	7850      	ldrb	r0, [r2, #1]
 8006e12:	2200      	movs	r2, #0
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	4798      	blx	r3
      break;
 8006e18:	e04e      	b.n	8006eb8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b0b      	cmp	r3, #11
 8006e20:	d02e      	beq.n	8006e80 <USBD_CDC_Setup+0x104>
 8006e22:	2b0b      	cmp	r3, #11
 8006e24:	dc38      	bgt.n	8006e98 <USBD_CDC_Setup+0x11c>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <USBD_CDC_Setup+0xb4>
 8006e2a:	2b0a      	cmp	r3, #10
 8006e2c:	d014      	beq.n	8006e58 <USBD_CDC_Setup+0xdc>
 8006e2e:	e033      	b.n	8006e98 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d107      	bne.n	8006e4a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e3a:	f107 030c 	add.w	r3, r7, #12
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 f9ef 	bl	8008226 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e48:	e02e      	b.n	8006ea8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f980 	bl	8008152 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e52:	2302      	movs	r3, #2
 8006e54:	75fb      	strb	r3, [r7, #23]
          break;
 8006e56:	e027      	b.n	8006ea8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d107      	bne.n	8006e72 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e62:	f107 030f 	add.w	r3, r7, #15
 8006e66:	2201      	movs	r2, #1
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 f9db 	bl	8008226 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e70:	e01a      	b.n	8006ea8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 f96c 	bl	8008152 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e7e:	e013      	b.n	8006ea8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d00d      	beq.n	8006ea6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f960 	bl	8008152 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e92:	2302      	movs	r3, #2
 8006e94:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e96:	e006      	b.n	8006ea6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 f959 	bl	8008152 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea4:	e000      	b.n	8006ea8 <USBD_CDC_Setup+0x12c>
          break;
 8006ea6:	bf00      	nop
      }
      break;
 8006ea8:	e006      	b.n	8006eb8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 f950 	bl	8008152 <USBD_CtlError>
      ret = USBD_FAIL;
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb6:	bf00      	nop
  }

  return ret;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006edc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d03a      	beq.n	8006f5e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ee8:	78fa      	ldrb	r2, [r7, #3]
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	331c      	adds	r3, #28
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d029      	beq.n	8006f52 <USBD_CDC_DataIn+0x90>
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	331c      	adds	r3, #28
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	78f9      	ldrb	r1, [r7, #3]
 8006f12:	68b8      	ldr	r0, [r7, #8]
 8006f14:	460b      	mov	r3, r1
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4403      	add	r3, r0
 8006f1e:	3338      	adds	r3, #56	; 0x38
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f26:	fb01 f303 	mul.w	r3, r1, r3
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d110      	bne.n	8006f52 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f30:	78fa      	ldrb	r2, [r7, #3]
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	331c      	adds	r3, #28
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f44:	78f9      	ldrb	r1, [r7, #3]
 8006f46:	2300      	movs	r3, #0
 8006f48:	2200      	movs	r2, #0
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 fe13 	bl	8008b76 <USBD_LL_Transmit>
 8006f50:	e003      	b.n	8006f5a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f5e:	2302      	movs	r3, #2
  }
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fe3e 	bl	8008c02 <USBD_LL_GetRxDataSize>
 8006f86:	4602      	mov	r2, r0
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00d      	beq.n	8006fb4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fac:	4611      	mov	r1, r2
 8006fae:	4798      	blx	r3

    return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e000      	b.n	8006fb6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006fb4:	2302      	movs	r3, #2
  }
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fcc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d015      	beq.n	8007004 <USBD_CDC_EP0_RxReady+0x46>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fde:	2bff      	cmp	r3, #255	; 0xff
 8006fe0:	d010      	beq.n	8007004 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ff0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	22ff      	movs	r2, #255	; 0xff
 8007000:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2243      	movs	r2, #67	; 0x43
 800701c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800701e:	4b03      	ldr	r3, [pc, #12]	; (800702c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000098 	.word	0x20000098

08007030 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2243      	movs	r2, #67	; 0x43
 800703c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800703e:	4b03      	ldr	r3, [pc, #12]	; (800704c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	20000054 	.word	0x20000054

08007050 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2243      	movs	r2, #67	; 0x43
 800705c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800705e:	4b03      	ldr	r3, [pc, #12]	; (800706c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	200000dc 	.word	0x200000dc

08007070 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	220a      	movs	r2, #10
 800707c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800707e:	4b03      	ldr	r3, [pc, #12]	; (800708c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20000010 	.word	0x20000010

08007090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800709a:	2302      	movs	r3, #2
 800709c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr

080070bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	4613      	mov	r3, r2
 80070c8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070da:	88fa      	ldrh	r2, [r7, #6]
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	bc80      	pop	{r7}
 8007112:	4770      	bx	lr

08007114 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d01c      	beq.n	8007168 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007134:	2b00      	cmp	r3, #0
 8007136:	d115      	bne.n	8007164 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007156:	b29b      	uxth	r3, r3
 8007158:	2181      	movs	r1, #129	; 0x81
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fd0b 	bl	8008b76 <USBD_LL_Transmit>

      return USBD_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	e002      	b.n	800716a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007168:	2302      	movs	r3, #2
  }
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007188:	2b00      	cmp	r3, #0
 800718a:	d017      	beq.n	80071bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7c1b      	ldrb	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800719a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800719e:	2101      	movs	r1, #1
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fd0b 	bl	8008bbc <USBD_LL_PrepareReceive>
 80071a6:	e007      	b.n	80071b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ae:	2340      	movs	r3, #64	; 0x40
 80071b0:	2101      	movs	r1, #1
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fd02 	bl	8008bbc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	e000      	b.n	80071be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80071bc:	2302      	movs	r3, #2
  }
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80071dc:	4814      	ldr	r0, [pc, #80]	; (8007230 <USBD_Init+0x68>)
 80071de:	f001 fe31 	bl	8008e44 <iprintf>
 80071e2:	4814      	ldr	r0, [pc, #80]	; (8007234 <USBD_Init+0x6c>)
 80071e4:	f001 fe2e 	bl	8008e44 <iprintf>
 80071e8:	200a      	movs	r0, #10
 80071ea:	f001 fe3d 	bl	8008e68 <putchar>
#endif
    return USBD_FAIL;
 80071ee:	2302      	movs	r3, #2
 80071f0:	e01a      	b.n	8007228 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	79fa      	ldrb	r2, [r7, #7]
 800721e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f001 fb65 	bl	80088f0 <USBD_LL_Init>

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	08009fbc 	.word	0x08009fbc
 8007234:	08009fc4 	.word	0x08009fc4

08007238 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d006      	beq.n	800725a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73fb      	strb	r3, [r7, #15]
 8007258:	e00a      	b.n	8007270 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800725a:	4808      	ldr	r0, [pc, #32]	; (800727c <USBD_RegisterClass+0x44>)
 800725c:	f001 fdf2 	bl	8008e44 <iprintf>
 8007260:	4807      	ldr	r0, [pc, #28]	; (8007280 <USBD_RegisterClass+0x48>)
 8007262:	f001 fdef 	bl	8008e44 <iprintf>
 8007266:	200a      	movs	r0, #10
 8007268:	f001 fdfe 	bl	8008e68 <putchar>
#endif
    status = USBD_FAIL;
 800726c:	2302      	movs	r3, #2
 800726e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	08009fbc 	.word	0x08009fbc
 8007280:	08009fdc 	.word	0x08009fdc

08007284 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fb89 	bl	80089a4 <USBD_LL_Start>

  return USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072bc:	2302      	movs	r3, #2
 80072be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00c      	beq.n	80072e4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	4611      	mov	r1, r2
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	4611      	mov	r1, r2
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3

  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fed7 	bl	80080da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007348:	f003 031f 	and.w	r3, r3, #31
 800734c:	2b02      	cmp	r3, #2
 800734e:	d016      	beq.n	800737e <USBD_LL_SetupStage+0x6a>
 8007350:	2b02      	cmp	r3, #2
 8007352:	d81c      	bhi.n	800738e <USBD_LL_SetupStage+0x7a>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <USBD_LL_SetupStage+0x4a>
 8007358:	2b01      	cmp	r3, #1
 800735a:	d008      	beq.n	800736e <USBD_LL_SetupStage+0x5a>
 800735c:	e017      	b.n	800738e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9ca 	bl	8007700 <USBD_StdDevReq>
      break;
 800736c:	e01a      	b.n	80073a4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa2c 	bl	80077d4 <USBD_StdItfReq>
      break;
 800737c:	e012      	b.n	80073a4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa6c 	bl	8007864 <USBD_StdEPReq>
      break;
 800738c:	e00a      	b.n	80073a4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007394:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007398:	b2db      	uxtb	r3, r3
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 fb61 	bl	8008a64 <USBD_LL_StallEP>
      break;
 80073a2:	bf00      	nop
  }

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b086      	sub	sp, #24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	460b      	mov	r3, r1
 80073b8:	607a      	str	r2, [r7, #4]
 80073ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d14b      	bne.n	800745a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d134      	bne.n	800743e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d919      	bls.n	8007414 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	1ad2      	subs	r2, r2, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d203      	bcs.n	8007402 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073fe:	b29b      	uxth	r3, r3
 8007400:	e002      	b.n	8007408 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007406:	b29b      	uxth	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 ff56 	bl	80082be <USBD_CtlContinueRx>
 8007412:	e038      	b.n	8007486 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007426:	2b03      	cmp	r3, #3
 8007428:	d105      	bne.n	8007436 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 ff53 	bl	80082e2 <USBD_CtlSendStatus>
 800743c:	e023      	b.n	8007486 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007444:	2b05      	cmp	r3, #5
 8007446:	d11e      	bne.n	8007486 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007450:	2100      	movs	r1, #0
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f001 fb06 	bl	8008a64 <USBD_LL_StallEP>
 8007458:	e015      	b.n	8007486 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00d      	beq.n	8007482 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800746c:	2b03      	cmp	r3, #3
 800746e:	d108      	bne.n	8007482 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	7afa      	ldrb	r2, [r7, #11]
 800747a:	4611      	mov	r1, r2
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	4798      	blx	r3
 8007480:	e001      	b.n	8007486 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007482:	2302      	movs	r3, #2
 8007484:	e000      	b.n	8007488 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	460b      	mov	r3, r1
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800749e:	7afb      	ldrb	r3, [r7, #11]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d17f      	bne.n	80075a4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3314      	adds	r3, #20
 80074a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d15c      	bne.n	800756e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d915      	bls.n	80074ec <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	1ad2      	subs	r2, r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fec0 	bl	800825e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	2100      	movs	r1, #0
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f001 fb69 	bl	8008bbc <USBD_LL_PrepareReceive>
 80074ea:	e04e      	b.n	800758a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	6912      	ldr	r2, [r2, #16]
 80074f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80074f8:	fb01 f202 	mul.w	r2, r1, r2
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d11c      	bne.n	800753c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	689a      	ldr	r2, [r3, #8]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800750a:	429a      	cmp	r2, r3
 800750c:	d316      	bcc.n	800753c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007518:	429a      	cmp	r2, r3
 800751a:	d20f      	bcs.n	800753c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800751c:	2200      	movs	r2, #0
 800751e:	2100      	movs	r1, #0
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fe9c 	bl	800825e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800752e:	2300      	movs	r3, #0
 8007530:	2200      	movs	r2, #0
 8007532:	2100      	movs	r1, #0
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f001 fb41 	bl	8008bbc <USBD_LL_PrepareReceive>
 800753a:	e026      	b.n	800758a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800754e:	2b03      	cmp	r3, #3
 8007550:	d105      	bne.n	800755e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800755e:	2180      	movs	r1, #128	; 0x80
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f001 fa7f 	bl	8008a64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fece 	bl	8008308 <USBD_CtlReceiveStatus>
 800756c:	e00d      	b.n	800758a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007574:	2b04      	cmp	r3, #4
 8007576:	d004      	beq.n	8007582 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800757e:	2b00      	cmp	r3, #0
 8007580:	d103      	bne.n	800758a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007582:	2180      	movs	r1, #128	; 0x80
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f001 fa6d 	bl	8008a64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007590:	2b01      	cmp	r3, #1
 8007592:	d11d      	bne.n	80075d0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f7ff fe81 	bl	800729c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075a2:	e015      	b.n	80075d0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00d      	beq.n	80075cc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d108      	bne.n	80075cc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	7afa      	ldrb	r2, [r7, #11]
 80075c4:	4611      	mov	r1, r2
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	4798      	blx	r3
 80075ca:	e001      	b.n	80075d0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075cc:	2302      	movs	r3, #2
 80075ce:	e000      	b.n	80075d2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075e2:	2340      	movs	r3, #64	; 0x40
 80075e4:	2200      	movs	r2, #0
 80075e6:	2100      	movs	r1, #0
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 f9f6 	bl	80089da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2240      	movs	r2, #64	; 0x40
 80075fa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075fe:	2340      	movs	r3, #64	; 0x40
 8007600:	2200      	movs	r2, #0
 8007602:	2180      	movs	r1, #128	; 0x80
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 f9e8 	bl	80089da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2240      	movs	r2, #64	; 0x40
 8007614:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6852      	ldr	r2, [r2, #4]
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	4611      	mov	r1, r2
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
  }

  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	78fa      	ldrb	r2, [r7, #3]
 800766c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr

0800767a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2204      	movs	r2, #4
 8007692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr

080076a2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d105      	bne.n	80076c0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bc80      	pop	{r7}
 80076ca:	4770      	bx	lr

080076cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d10b      	bne.n	80076f6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007716:	2b40      	cmp	r3, #64	; 0x40
 8007718:	d005      	beq.n	8007726 <USBD_StdDevReq+0x26>
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d84f      	bhi.n	80077be <USBD_StdDevReq+0xbe>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <USBD_StdDevReq+0x36>
 8007722:	2b20      	cmp	r3, #32
 8007724:	d14b      	bne.n	80077be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	4798      	blx	r3
      break;
 8007734:	e048      	b.n	80077c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	2b09      	cmp	r3, #9
 800773c:	d839      	bhi.n	80077b2 <USBD_StdDevReq+0xb2>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <USBD_StdDevReq+0x44>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	08007795 	.word	0x08007795
 8007748:	080077a9 	.word	0x080077a9
 800774c:	080077b3 	.word	0x080077b3
 8007750:	0800779f 	.word	0x0800779f
 8007754:	080077b3 	.word	0x080077b3
 8007758:	08007777 	.word	0x08007777
 800775c:	0800776d 	.word	0x0800776d
 8007760:	080077b3 	.word	0x080077b3
 8007764:	0800778b 	.word	0x0800778b
 8007768:	08007781 	.word	0x08007781
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9dc 	bl	8007b2c <USBD_GetDescriptor>
          break;
 8007774:	e022      	b.n	80077bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fb3f 	bl	8007dfc <USBD_SetAddress>
          break;
 800777e:	e01d      	b.n	80077bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fb7e 	bl	8007e84 <USBD_SetConfig>
          break;
 8007788:	e018      	b.n	80077bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fc07 	bl	8007fa0 <USBD_GetConfig>
          break;
 8007792:	e013      	b.n	80077bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fc37 	bl	800800a <USBD_GetStatus>
          break;
 800779c:	e00e      	b.n	80077bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fc65 	bl	8008070 <USBD_SetFeature>
          break;
 80077a6:	e009      	b.n	80077bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fc74 	bl	8008098 <USBD_ClrFeature>
          break;
 80077b0:	e004      	b.n	80077bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fccc 	bl	8008152 <USBD_CtlError>
          break;
 80077ba:	bf00      	nop
      }
      break;
 80077bc:	e004      	b.n	80077c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fcc6 	bl	8008152 <USBD_CtlError>
      break;
 80077c6:	bf00      	nop
  }

  return ret;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop

080077d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d005      	beq.n	80077fa <USBD_StdItfReq+0x26>
 80077ee:	2b40      	cmp	r3, #64	; 0x40
 80077f0:	d82e      	bhi.n	8007850 <USBD_StdItfReq+0x7c>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <USBD_StdItfReq+0x26>
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d12a      	bne.n	8007850 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007800:	3b01      	subs	r3, #1
 8007802:	2b02      	cmp	r3, #2
 8007804:	d81d      	bhi.n	8007842 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	889b      	ldrh	r3, [r3, #4]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b01      	cmp	r3, #1
 800780e:	d813      	bhi.n	8007838 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
 800781e:	4603      	mov	r3, r0
 8007820:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	88db      	ldrh	r3, [r3, #6]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d110      	bne.n	800784c <USBD_StdItfReq+0x78>
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10d      	bne.n	800784c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fd56 	bl	80082e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007836:	e009      	b.n	800784c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fc89 	bl	8008152 <USBD_CtlError>
          break;
 8007840:	e004      	b.n	800784c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc84 	bl	8008152 <USBD_CtlError>
          break;
 800784a:	e000      	b.n	800784e <USBD_StdItfReq+0x7a>
          break;
 800784c:	bf00      	nop
      }
      break;
 800784e:	e004      	b.n	800785a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fc7d 	bl	8008152 <USBD_CtlError>
      break;
 8007858:	bf00      	nop
  }

  return USBD_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	889b      	ldrh	r3, [r3, #4]
 8007876:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	d007      	beq.n	8007894 <USBD_StdEPReq+0x30>
 8007884:	2b40      	cmp	r3, #64	; 0x40
 8007886:	f200 8146 	bhi.w	8007b16 <USBD_StdEPReq+0x2b2>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <USBD_StdEPReq+0x40>
 800788e:	2b20      	cmp	r3, #32
 8007890:	f040 8141 	bne.w	8007b16 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
      break;
 80078a2:	e13d      	b.n	8007b20 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ac:	2b20      	cmp	r3, #32
 80078ae:	d10a      	bne.n	80078c6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4798      	blx	r3
 80078be:	4603      	mov	r3, r0
 80078c0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	e12d      	b.n	8007b22 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d007      	beq.n	80078de <USBD_StdEPReq+0x7a>
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	f300 811b 	bgt.w	8007b0a <USBD_StdEPReq+0x2a6>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d072      	beq.n	80079be <USBD_StdEPReq+0x15a>
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d03a      	beq.n	8007952 <USBD_StdEPReq+0xee>
 80078dc:	e115      	b.n	8007b0a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d002      	beq.n	80078ee <USBD_StdEPReq+0x8a>
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d015      	beq.n	8007918 <USBD_StdEPReq+0xb4>
 80078ec:	e02b      	b.n	8007946 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00c      	beq.n	800790e <USBD_StdEPReq+0xaa>
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b80      	cmp	r3, #128	; 0x80
 80078f8:	d009      	beq.n	800790e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 f8b0 	bl	8008a64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007904:	2180      	movs	r1, #128	; 0x80
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 f8ac 	bl	8008a64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800790c:	e020      	b.n	8007950 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fc1e 	bl	8008152 <USBD_CtlError>
              break;
 8007916:	e01b      	b.n	8007950 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	885b      	ldrh	r3, [r3, #2]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10e      	bne.n	800793e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <USBD_StdEPReq+0xda>
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	2b80      	cmp	r3, #128	; 0x80
 800792a:	d008      	beq.n	800793e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	88db      	ldrh	r3, [r3, #6]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d104      	bne.n	800793e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 f893 	bl	8008a64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fccf 	bl	80082e2 <USBD_CtlSendStatus>

              break;
 8007944:	e004      	b.n	8007950 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc02 	bl	8008152 <USBD_CtlError>
              break;
 800794e:	bf00      	nop
          }
          break;
 8007950:	e0e0      	b.n	8007b14 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007958:	2b02      	cmp	r3, #2
 800795a:	d002      	beq.n	8007962 <USBD_StdEPReq+0xfe>
 800795c:	2b03      	cmp	r3, #3
 800795e:	d015      	beq.n	800798c <USBD_StdEPReq+0x128>
 8007960:	e026      	b.n	80079b0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00c      	beq.n	8007982 <USBD_StdEPReq+0x11e>
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b80      	cmp	r3, #128	; 0x80
 800796c:	d009      	beq.n	8007982 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 f876 	bl	8008a64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007978:	2180      	movs	r1, #128	; 0x80
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 f872 	bl	8008a64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007980:	e01c      	b.n	80079bc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fbe4 	bl	8008152 <USBD_CtlError>
              break;
 800798a:	e017      	b.n	80079bc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	885b      	ldrh	r3, [r3, #2]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d112      	bne.n	80079ba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 f87d 	bl	8008aa2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fc9a 	bl	80082e2 <USBD_CtlSendStatus>
              }
              break;
 80079ae:	e004      	b.n	80079ba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fbcd 	bl	8008152 <USBD_CtlError>
              break;
 80079b8:	e000      	b.n	80079bc <USBD_StdEPReq+0x158>
              break;
 80079ba:	bf00      	nop
          }
          break;
 80079bc:	e0aa      	b.n	8007b14 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d002      	beq.n	80079ce <USBD_StdEPReq+0x16a>
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d032      	beq.n	8007a32 <USBD_StdEPReq+0x1ce>
 80079cc:	e097      	b.n	8007afe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d007      	beq.n	80079e4 <USBD_StdEPReq+0x180>
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b80      	cmp	r3, #128	; 0x80
 80079d8:	d004      	beq.n	80079e4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fbb8 	bl	8008152 <USBD_CtlError>
                break;
 80079e2:	e091      	b.n	8007b08 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	da0b      	bge.n	8007a04 <USBD_StdEPReq+0x1a0>
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	3310      	adds	r3, #16
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	4413      	add	r3, r2
 8007a00:	3304      	adds	r3, #4
 8007a02:	e00b      	b.n	8007a1c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	4413      	add	r3, r2
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2202      	movs	r2, #2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fbfb 	bl	8008226 <USBD_CtlSendData>
              break;
 8007a30:	e06a      	b.n	8007b08 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da11      	bge.n	8007a5e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	f003 020f 	and.w	r2, r3, #15
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	4613      	mov	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	440b      	add	r3, r1
 8007a4c:	3318      	adds	r3, #24
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d117      	bne.n	8007a84 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fb7b 	bl	8008152 <USBD_CtlError>
                  break;
 8007a5c:	e054      	b.n	8007b08 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	f003 020f 	and.w	r2, r3, #15
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	440b      	add	r3, r1
 8007a70:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d104      	bne.n	8007a84 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fb68 	bl	8008152 <USBD_CtlError>
                  break;
 8007a82:	e041      	b.n	8007b08 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da0b      	bge.n	8007aa4 <USBD_StdEPReq+0x240>
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	3310      	adds	r3, #16
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	e00b      	b.n	8007abc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	4413      	add	r3, r2
 8007aba:	3304      	adds	r3, #4
 8007abc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <USBD_StdEPReq+0x266>
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b80      	cmp	r3, #128	; 0x80
 8007ac8:	d103      	bne.n	8007ad2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e00e      	b.n	8007af0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 f802 	bl	8008ae0 <USBD_LL_IsStallEP>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e002      	b.n	8007af0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2202      	movs	r2, #2
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fb95 	bl	8008226 <USBD_CtlSendData>
              break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fb26 	bl	8008152 <USBD_CtlError>
              break;
 8007b06:	bf00      	nop
          }
          break;
 8007b08:	e004      	b.n	8007b14 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fb20 	bl	8008152 <USBD_CtlError>
          break;
 8007b12:	bf00      	nop
      }
      break;
 8007b14:	e004      	b.n	8007b20 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fb1a 	bl	8008152 <USBD_CtlError>
      break;
 8007b1e:	bf00      	nop
  }

  return ret;
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	885b      	ldrh	r3, [r3, #2]
 8007b46:	0a1b      	lsrs	r3, r3, #8
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	2b06      	cmp	r3, #6
 8007b4e:	f200 8128 	bhi.w	8007da2 <USBD_GetDescriptor+0x276>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <USBD_GetDescriptor+0x2c>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b75 	.word	0x08007b75
 8007b5c:	08007b8d 	.word	0x08007b8d
 8007b60:	08007bcd 	.word	0x08007bcd
 8007b64:	08007da3 	.word	0x08007da3
 8007b68:	08007da3 	.word	0x08007da3
 8007b6c:	08007d43 	.word	0x08007d43
 8007b70:	08007d6f 	.word	0x08007d6f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	7c12      	ldrb	r2, [r2, #16]
 8007b80:	f107 0108 	add.w	r1, r7, #8
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	60f8      	str	r0, [r7, #12]
      break;
 8007b8a:	e112      	b.n	8007db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	7c1b      	ldrb	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10d      	bne.n	8007bb0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	f107 0208 	add.w	r2, r7, #8
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
 8007ba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	2202      	movs	r2, #2
 8007bac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007bae:	e100      	b.n	8007db2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	f107 0208 	add.w	r2, r7, #8
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
 8007bc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	701a      	strb	r2, [r3, #0]
      break;
 8007bca:	e0f2      	b.n	8007db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	885b      	ldrh	r3, [r3, #2]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	f200 80ac 	bhi.w	8007d30 <USBD_GetDescriptor+0x204>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <USBD_GetDescriptor+0xb4>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007bf9 	.word	0x08007bf9
 8007be4:	08007c2d 	.word	0x08007c2d
 8007be8:	08007c61 	.word	0x08007c61
 8007bec:	08007c95 	.word	0x08007c95
 8007bf0:	08007cc9 	.word	0x08007cc9
 8007bf4:	08007cfd 	.word	0x08007cfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7c12      	ldrb	r2, [r2, #16]
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1a:	e091      	b.n	8007d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa97 	bl	8008152 <USBD_CtlError>
            err++;
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	3301      	adds	r3, #1
 8007c28:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2a:	e089      	b.n	8007d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	7c12      	ldrb	r2, [r2, #16]
 8007c44:	f107 0108 	add.w	r1, r7, #8
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c4e:	e077      	b.n	8007d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa7d 	bl	8008152 <USBD_CtlError>
            err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c5e:	e06f      	b.n	8007d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7c12      	ldrb	r2, [r2, #16]
 8007c78:	f107 0108 	add.w	r1, r7, #8
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c82:	e05d      	b.n	8007d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa63 	bl	8008152 <USBD_CtlError>
            err++;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	72fb      	strb	r3, [r7, #11]
          break;
 8007c92:	e055      	b.n	8007d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb6:	e043      	b.n	8007d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa49 	bl	8008152 <USBD_CtlError>
            err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc6:	e03b      	b.n	8007d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cea:	e029      	b.n	8007d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa2f 	bl	8008152 <USBD_CtlError>
            err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cfa:	e021      	b.n	8007d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1e:	e00f      	b.n	8007d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa15 	bl	8008152 <USBD_CtlError>
            err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2e:	e007      	b.n	8007d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa0d 	bl	8008152 <USBD_CtlError>
          err++;
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d3e:	e038      	b.n	8007db2 <USBD_GetDescriptor+0x286>
 8007d40:	e037      	b.n	8007db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	7c1b      	ldrb	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	f107 0208 	add.w	r2, r7, #8
 8007d56:	4610      	mov	r0, r2
 8007d58:	4798      	blx	r3
 8007d5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d5c:	e029      	b.n	8007db2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f9f6 	bl	8008152 <USBD_CtlError>
        err++;
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d6c:	e021      	b.n	8007db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7c1b      	ldrb	r3, [r3, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10d      	bne.n	8007d92 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7e:	f107 0208 	add.w	r2, r7, #8
 8007d82:	4610      	mov	r0, r2
 8007d84:	4798      	blx	r3
 8007d86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	2207      	movs	r2, #7
 8007d8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d90:	e00f      	b.n	8007db2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f9dc 	bl	8008152 <USBD_CtlError>
        err++;
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007da0:	e007      	b.n	8007db2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f9d4 	bl	8008152 <USBD_CtlError>
      err++;
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	3301      	adds	r3, #1
 8007dae:	72fb      	strb	r3, [r7, #11]
      break;
 8007db0:	bf00      	nop
  }

  if (err != 0U)
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11c      	bne.n	8007df2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007db8:	893b      	ldrh	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d011      	beq.n	8007de2 <USBD_GetDescriptor+0x2b6>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00d      	beq.n	8007de2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	88da      	ldrh	r2, [r3, #6]
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bf28      	it	cs
 8007dd0:	4613      	movcs	r3, r2
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dd6:	893b      	ldrh	r3, [r7, #8]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fa22 	bl	8008226 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d104      	bne.n	8007df4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa79 	bl	80082e2 <USBD_CtlSendStatus>
 8007df0:	e000      	b.n	8007df4 <USBD_GetDescriptor+0x2c8>
    return;
 8007df2:	bf00      	nop
    }
  }
}
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	889b      	ldrh	r3, [r3, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d130      	bne.n	8007e70 <USBD_SetAddress+0x74>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d12c      	bne.n	8007e70 <USBD_SetAddress+0x74>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	885b      	ldrh	r3, [r3, #2]
 8007e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e1c:	d828      	bhi.n	8007e70 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	885b      	ldrh	r3, [r3, #2]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d104      	bne.n	8007e3e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f98b 	bl	8008152 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3c:	e01d      	b.n	8007e7a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7bfa      	ldrb	r2, [r7, #15]
 8007e42:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fe74 	bl	8008b38 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fa46 	bl	80082e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d004      	beq.n	8007e66 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e64:	e009      	b.n	8007e7a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6e:	e004      	b.n	8007e7a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f96d 	bl	8008152 <USBD_CtlError>
  }
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	885b      	ldrh	r3, [r3, #2]
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	4b41      	ldr	r3, [pc, #260]	; (8007f9c <USBD_SetConfig+0x118>)
 8007e96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e98:	4b40      	ldr	r3, [pc, #256]	; (8007f9c <USBD_SetConfig+0x118>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d904      	bls.n	8007eaa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f955 	bl	8008152 <USBD_CtlError>
 8007ea8:	e075      	b.n	8007f96 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d002      	beq.n	8007eba <USBD_SetConfig+0x36>
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d023      	beq.n	8007f00 <USBD_SetConfig+0x7c>
 8007eb8:	e062      	b.n	8007f80 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007eba:	4b38      	ldr	r3, [pc, #224]	; (8007f9c <USBD_SetConfig+0x118>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d01a      	beq.n	8007ef8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007ec2:	4b36      	ldr	r3, [pc, #216]	; (8007f9c <USBD_SetConfig+0x118>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2203      	movs	r2, #3
 8007ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ed4:	4b31      	ldr	r3, [pc, #196]	; (8007f9c <USBD_SetConfig+0x118>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff f9e8 	bl	80072b0 <USBD_SetClassConfig>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d104      	bne.n	8007ef0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f932 	bl	8008152 <USBD_CtlError>
            return;
 8007eee:	e052      	b.n	8007f96 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f9f6 	bl	80082e2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ef6:	e04e      	b.n	8007f96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f9f2 	bl	80082e2 <USBD_CtlSendStatus>
        break;
 8007efe:	e04a      	b.n	8007f96 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007f00:	4b26      	ldr	r3, [pc, #152]	; (8007f9c <USBD_SetConfig+0x118>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d112      	bne.n	8007f2e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007f10:	4b22      	ldr	r3, [pc, #136]	; (8007f9c <USBD_SetConfig+0x118>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f1a:	4b20      	ldr	r3, [pc, #128]	; (8007f9c <USBD_SetConfig+0x118>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff f9e4 	bl	80072ee <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f9db 	bl	80082e2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f2c:	e033      	b.n	8007f96 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f2e:	4b1b      	ldr	r3, [pc, #108]	; (8007f9c <USBD_SetConfig+0x118>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d01d      	beq.n	8007f78 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff f9d2 	bl	80072ee <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f4a:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <USBD_SetConfig+0x118>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f54:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <USBD_SetConfig+0x118>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff f9a8 	bl	80072b0 <USBD_SetClassConfig>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d104      	bne.n	8007f70 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f8f2 	bl	8008152 <USBD_CtlError>
            return;
 8007f6e:	e012      	b.n	8007f96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f9b6 	bl	80082e2 <USBD_CtlSendStatus>
        break;
 8007f76:	e00e      	b.n	8007f96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f9b2 	bl	80082e2 <USBD_CtlSendStatus>
        break;
 8007f7e:	e00a      	b.n	8007f96 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f8e5 	bl	8008152 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f88:	4b04      	ldr	r3, [pc, #16]	; (8007f9c <USBD_SetConfig+0x118>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff f9ad 	bl	80072ee <USBD_ClrClassConfig>
        break;
 8007f94:	bf00      	nop
    }
  }
}
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20000b58 	.word	0x20000b58

08007fa0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88db      	ldrh	r3, [r3, #6]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d004      	beq.n	8007fbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f8cc 	bl	8008152 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fba:	e022      	b.n	8008002 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	dc02      	bgt.n	8007fcc <USBD_GetConfig+0x2c>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	dc03      	bgt.n	8007fd2 <USBD_GetConfig+0x32>
 8007fca:	e015      	b.n	8007ff8 <USBD_GetConfig+0x58>
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d00b      	beq.n	8007fe8 <USBD_GetConfig+0x48>
 8007fd0:	e012      	b.n	8007ff8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	2201      	movs	r2, #1
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f920 	bl	8008226 <USBD_CtlSendData>
        break;
 8007fe6:	e00c      	b.n	8008002 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3304      	adds	r3, #4
 8007fec:	2201      	movs	r2, #1
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f918 	bl	8008226 <USBD_CtlSendData>
        break;
 8007ff6:	e004      	b.n	8008002 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f8a9 	bl	8008152 <USBD_CtlError>
        break;
 8008000:	bf00      	nop
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801a:	3b01      	subs	r3, #1
 800801c:	2b02      	cmp	r3, #2
 800801e:	d81e      	bhi.n	800805e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	88db      	ldrh	r3, [r3, #6]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d004      	beq.n	8008032 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f891 	bl	8008152 <USBD_CtlError>
        break;
 8008030:	e01a      	b.n	8008068 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f043 0202 	orr.w	r2, r3, #2
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	330c      	adds	r3, #12
 8008052:	2202      	movs	r2, #2
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f8e5 	bl	8008226 <USBD_CtlSendData>
      break;
 800805c:	e004      	b.n	8008068 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f876 	bl	8008152 <USBD_CtlError>
      break;
 8008066:	bf00      	nop
  }
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d106      	bne.n	8008090 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f929 	bl	80082e2 <USBD_CtlSendStatus>
  }
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	3b01      	subs	r3, #1
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d80b      	bhi.n	80080c6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d10c      	bne.n	80080d0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f90f 	bl	80082e2 <USBD_CtlSendStatus>
      }
      break;
 80080c4:	e004      	b.n	80080d0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f842 	bl	8008152 <USBD_CtlError>
      break;
 80080ce:	e000      	b.n	80080d2 <USBD_ClrFeature+0x3a>
      break;
 80080d0:	bf00      	nop
  }
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781a      	ldrb	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	785a      	ldrb	r2, [r3, #1]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	3302      	adds	r3, #2
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	3303      	adds	r3, #3
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	b29b      	uxth	r3, r3
 8008108:	4413      	add	r3, r2
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	3304      	adds	r3, #4
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b29a      	uxth	r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	3305      	adds	r3, #5
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	021b      	lsls	r3, r3, #8
 8008122:	b29b      	uxth	r3, r3
 8008124:	4413      	add	r3, r2
 8008126:	b29a      	uxth	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	3306      	adds	r3, #6
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	b29a      	uxth	r2, r3
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	3307      	adds	r3, #7
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	b29b      	uxth	r3, r3
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	b29b      	uxth	r3, r3
 8008140:	4413      	add	r3, r2
 8008142:	b29a      	uxth	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	80da      	strh	r2, [r3, #6]

}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr

08008152 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800815c:	2180      	movs	r1, #128	; 0x80
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fc80 	bl	8008a64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008164:	2100      	movs	r1, #0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fc7c 	bl	8008a64 <USBD_LL_StallEP>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d032      	beq.n	80081f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 f834 	bl	80081f8 <USBD_GetLen>
 8008190:	4603      	mov	r3, r0
 8008192:	3301      	adds	r3, #1
 8008194:	b29b      	uxth	r3, r3
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	b29a      	uxth	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	75fa      	strb	r2, [r7, #23]
 80081a4:	461a      	mov	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4413      	add	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	7812      	ldrb	r2, [r2, #0]
 80081ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	75fa      	strb	r2, [r7, #23]
 80081b6:	461a      	mov	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4413      	add	r3, r2
 80081bc:	2203      	movs	r2, #3
 80081be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80081c0:	e012      	b.n	80081e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	60fa      	str	r2, [r7, #12]
 80081c8:	7dfa      	ldrb	r2, [r7, #23]
 80081ca:	1c51      	adds	r1, r2, #1
 80081cc:	75f9      	strb	r1, [r7, #23]
 80081ce:	4611      	mov	r1, r2
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	440a      	add	r2, r1
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	75fa      	strb	r2, [r7, #23]
 80081de:	461a      	mov	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4413      	add	r3, r2
 80081e4:	2200      	movs	r2, #0
 80081e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e8      	bne.n	80081c2 <USBD_GetString+0x4e>
    }
  }
}
 80081f0:	bf00      	nop
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008204:	e005      	b.n	8008212 <USBD_GetLen+0x1a>
  {
    len++;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	3301      	adds	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3301      	adds	r3, #1
 8008210:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1f5      	bne.n	8008206 <USBD_GetLen+0xe>
  }

  return len;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	bc80      	pop	{r7}
 8008224:	4770      	bx	lr

08008226 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	4613      	mov	r3, r2
 8008232:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2202      	movs	r2, #2
 8008238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800823c:	88fa      	ldrh	r2, [r7, #6]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008242:	88fa      	ldrh	r2, [r7, #6]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008248:	88fb      	ldrh	r3, [r7, #6]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	2100      	movs	r1, #0
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fc91 	bl	8008b76 <USBD_LL_Transmit>

  return USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	4613      	mov	r3, r2
 800826a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	2100      	movs	r1, #0
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 fc7f 	bl	8008b76 <USBD_LL_Transmit>

  return USBD_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	4613      	mov	r3, r2
 800828e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2203      	movs	r2, #3
 8008294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008298:	88fa      	ldrh	r2, [r7, #6]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80082a0:	88fa      	ldrh	r2, [r7, #6]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	2100      	movs	r1, #0
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fc84 	bl	8008bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	4613      	mov	r3, r2
 80082ca:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082cc:	88fb      	ldrh	r3, [r7, #6]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	2100      	movs	r1, #0
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fc72 	bl	8008bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2204      	movs	r2, #4
 80082ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082f2:	2300      	movs	r3, #0
 80082f4:	2200      	movs	r2, #0
 80082f6:	2100      	movs	r1, #0
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fc3c 	bl	8008b76 <USBD_LL_Transmit>

  return USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2205      	movs	r2, #5
 8008314:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008318:	2300      	movs	r3, #0
 800831a:	2200      	movs	r2, #0
 800831c:	2100      	movs	r1, #0
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fc4c 	bl	8008bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0

	/* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK){
 8008334:	2200      	movs	r2, #0
 8008336:	4914      	ldr	r1, [pc, #80]	; (8008388 <MX_USB_DEVICE_Init+0x58>)
 8008338:	4814      	ldr	r0, [pc, #80]	; (800838c <MX_USB_DEVICE_Init+0x5c>)
 800833a:	f7fe ff45 	bl	80071c8 <USBD_Init>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <MX_USB_DEVICE_Init+0x18>
		Error_Handler();
 8008344:	f7f8 fb88 	bl	8000a58 <Error_Handler>
	}

	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK){
 8008348:	4911      	ldr	r1, [pc, #68]	; (8008390 <MX_USB_DEVICE_Init+0x60>)
 800834a:	4810      	ldr	r0, [pc, #64]	; (800838c <MX_USB_DEVICE_Init+0x5c>)
 800834c:	f7fe ff74 	bl	8007238 <USBD_RegisterClass>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <MX_USB_DEVICE_Init+0x2a>
		Error_Handler();
 8008356:	f7f8 fb7f 	bl	8000a58 <Error_Handler>
	}

	if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK){
 800835a:	490e      	ldr	r1, [pc, #56]	; (8008394 <MX_USB_DEVICE_Init+0x64>)
 800835c:	480b      	ldr	r0, [pc, #44]	; (800838c <MX_USB_DEVICE_Init+0x5c>)
 800835e:	f7fe fe97 	bl	8007090 <USBD_CDC_RegisterInterface>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <MX_USB_DEVICE_Init+0x3c>
		Error_Handler();
 8008368:	f7f8 fb76 	bl	8000a58 <Error_Handler>
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK){
 800836c:	4807      	ldr	r0, [pc, #28]	; (800838c <MX_USB_DEVICE_Init+0x5c>)
 800836e:	f7fe ff89 	bl	8007284 <USBD_Start>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <MX_USB_DEVICE_Init+0x4c>
		Error_Handler();
 8008378:	f7f8 fb6e 	bl	8000a58 <Error_Handler>
	}

	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	HAL_Delay(1000);
 800837c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008380:	f7f8 fd8c 	bl	8000e9c <HAL_Delay>
	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008384:	bf00      	nop
 8008386:	bd80      	pop	{r7, pc}
 8008388:	20000130 	.word	0x20000130
 800838c:	20000b5c 	.word	0x20000b5c
 8008390:	2000001c 	.word	0x2000001c
 8008394:	20000120 	.word	0x20000120

08008398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800839c:	2200      	movs	r2, #0
 800839e:	4905      	ldr	r1, [pc, #20]	; (80083b4 <CDC_Init_FS+0x1c>)
 80083a0:	4805      	ldr	r0, [pc, #20]	; (80083b8 <CDC_Init_FS+0x20>)
 80083a2:	f7fe fe8b 	bl	80070bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083a6:	4905      	ldr	r1, [pc, #20]	; (80083bc <CDC_Init_FS+0x24>)
 80083a8:	4803      	ldr	r0, [pc, #12]	; (80083b8 <CDC_Init_FS+0x20>)
 80083aa:	f7fe fea0 	bl	80070ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20001220 	.word	0x20001220
 80083b8:	20000b5c 	.word	0x20000b5c
 80083bc:	20000e20 	.word	0x20000e20

080083c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr
	...

080083d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	6039      	str	r1, [r7, #0]
 80083da:	71fb      	strb	r3, [r7, #7]
 80083dc:	4613      	mov	r3, r2
 80083de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083e0:	79fb      	ldrb	r3, [r7, #7]
 80083e2:	2b23      	cmp	r3, #35	; 0x23
 80083e4:	d84a      	bhi.n	800847c <CDC_Control_FS+0xac>
 80083e6:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <CDC_Control_FS+0x1c>)
 80083e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ec:	0800847d 	.word	0x0800847d
 80083f0:	0800847d 	.word	0x0800847d
 80083f4:	0800847d 	.word	0x0800847d
 80083f8:	0800847d 	.word	0x0800847d
 80083fc:	0800847d 	.word	0x0800847d
 8008400:	0800847d 	.word	0x0800847d
 8008404:	0800847d 	.word	0x0800847d
 8008408:	0800847d 	.word	0x0800847d
 800840c:	0800847d 	.word	0x0800847d
 8008410:	0800847d 	.word	0x0800847d
 8008414:	0800847d 	.word	0x0800847d
 8008418:	0800847d 	.word	0x0800847d
 800841c:	0800847d 	.word	0x0800847d
 8008420:	0800847d 	.word	0x0800847d
 8008424:	0800847d 	.word	0x0800847d
 8008428:	0800847d 	.word	0x0800847d
 800842c:	0800847d 	.word	0x0800847d
 8008430:	0800847d 	.word	0x0800847d
 8008434:	0800847d 	.word	0x0800847d
 8008438:	0800847d 	.word	0x0800847d
 800843c:	0800847d 	.word	0x0800847d
 8008440:	0800847d 	.word	0x0800847d
 8008444:	0800847d 	.word	0x0800847d
 8008448:	0800847d 	.word	0x0800847d
 800844c:	0800847d 	.word	0x0800847d
 8008450:	0800847d 	.word	0x0800847d
 8008454:	0800847d 	.word	0x0800847d
 8008458:	0800847d 	.word	0x0800847d
 800845c:	0800847d 	.word	0x0800847d
 8008460:	0800847d 	.word	0x0800847d
 8008464:	0800847d 	.word	0x0800847d
 8008468:	0800847d 	.word	0x0800847d
 800846c:	0800847d 	.word	0x0800847d
 8008470:	0800847d 	.word	0x0800847d
 8008474:	0800847d 	.word	0x0800847d
 8008478:	0800847d 	.word	0x0800847d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800847c:	bf00      	nop
  }

  return (USBD_OK);
 800847e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop

0800848c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	4805      	ldr	r0, [pc, #20]	; (80084b0 <CDC_Receive_FS+0x24>)
 800849a:	f7fe fe28 	bl	80070ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800849e:	4804      	ldr	r0, [pc, #16]	; (80084b0 <CDC_Receive_FS+0x24>)
 80084a0:	f7fe fe67 	bl	8007172 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000b5c 	.word	0x20000b5c

080084b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084c4:	4b0d      	ldr	r3, [pc, #52]	; (80084fc <CDC_Transmit_FS+0x48>)
 80084c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e00b      	b.n	80084f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084da:	887b      	ldrh	r3, [r7, #2]
 80084dc:	461a      	mov	r2, r3
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4806      	ldr	r0, [pc, #24]	; (80084fc <CDC_Transmit_FS+0x48>)
 80084e2:	f7fe fdeb 	bl	80070bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084e6:	4805      	ldr	r0, [pc, #20]	; (80084fc <CDC_Transmit_FS+0x48>)
 80084e8:	f7fe fe14 	bl	8007114 <USBD_CDC_TransmitPacket>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000b5c 	.word	0x20000b5c

08008500 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2212      	movs	r2, #18
 8008510:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008512:	4b03      	ldr	r3, [pc, #12]	; (8008520 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	bc80      	pop	{r7}
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	2000014c 	.word	0x2000014c

08008524 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	6039      	str	r1, [r7, #0]
 800852e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2204      	movs	r2, #4
 8008534:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008536:	4b03      	ldr	r3, [pc, #12]	; (8008544 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	20000160 	.word	0x20000160

08008548 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	4907      	ldr	r1, [pc, #28]	; (800857c <USBD_FS_ProductStrDescriptor+0x34>)
 800855e:	4808      	ldr	r0, [pc, #32]	; (8008580 <USBD_FS_ProductStrDescriptor+0x38>)
 8008560:	f7ff fe08 	bl	8008174 <USBD_GetString>
 8008564:	e004      	b.n	8008570 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	4904      	ldr	r1, [pc, #16]	; (800857c <USBD_FS_ProductStrDescriptor+0x34>)
 800856a:	4805      	ldr	r0, [pc, #20]	; (8008580 <USBD_FS_ProductStrDescriptor+0x38>)
 800856c:	f7ff fe02 	bl	8008174 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008570:	4b02      	ldr	r3, [pc, #8]	; (800857c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20001620 	.word	0x20001620
 8008580:	08009ff4 	.word	0x08009ff4

08008584 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	6039      	str	r1, [r7, #0]
 800858e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	4904      	ldr	r1, [pc, #16]	; (80085a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008594:	4804      	ldr	r0, [pc, #16]	; (80085a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008596:	f7ff fded 	bl	8008174 <USBD_GetString>
  return USBD_StrDesc;
 800859a:	4b02      	ldr	r3, [pc, #8]	; (80085a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20001620 	.word	0x20001620
 80085a8:	0800a00c 	.word	0x0800a00c

080085ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	221a      	movs	r2, #26
 80085bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085be:	f000 f843 	bl	8008648 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085c2:	4b02      	ldr	r3, [pc, #8]	; (80085cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20000164 	.word	0x20000164

080085d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	6039      	str	r1, [r7, #0]
 80085da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4907      	ldr	r1, [pc, #28]	; (8008604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085e6:	4808      	ldr	r0, [pc, #32]	; (8008608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085e8:	f7ff fdc4 	bl	8008174 <USBD_GetString>
 80085ec:	e004      	b.n	80085f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	4904      	ldr	r1, [pc, #16]	; (8008604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085f4:	f7ff fdbe 	bl	8008174 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f8:	4b02      	ldr	r3, [pc, #8]	; (8008604 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20001620 	.word	0x20001620
 8008608:	0800a020 	.word	0x0800a020

0800860c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	6039      	str	r1, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d105      	bne.n	800862a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	4907      	ldr	r1, [pc, #28]	; (8008640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008622:	4808      	ldr	r0, [pc, #32]	; (8008644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008624:	f7ff fda6 	bl	8008174 <USBD_GetString>
 8008628:	e004      	b.n	8008634 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	4904      	ldr	r1, [pc, #16]	; (8008640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800862e:	4805      	ldr	r0, [pc, #20]	; (8008644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008630:	f7ff fda0 	bl	8008174 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008634:	4b02      	ldr	r3, [pc, #8]	; (8008640 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20001620 	.word	0x20001620
 8008644:	0800a02c 	.word	0x0800a02c

08008648 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800864e:	4b0f      	ldr	r3, [pc, #60]	; (800868c <Get_SerialNum+0x44>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008654:	4b0e      	ldr	r3, [pc, #56]	; (8008690 <Get_SerialNum+0x48>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800865a:	4b0e      	ldr	r3, [pc, #56]	; (8008694 <Get_SerialNum+0x4c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4413      	add	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800866e:	2208      	movs	r2, #8
 8008670:	4909      	ldr	r1, [pc, #36]	; (8008698 <Get_SerialNum+0x50>)
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f814 	bl	80086a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008678:	2204      	movs	r2, #4
 800867a:	4908      	ldr	r1, [pc, #32]	; (800869c <Get_SerialNum+0x54>)
 800867c:	68b8      	ldr	r0, [r7, #8]
 800867e:	f000 f80f 	bl	80086a0 <IntToUnicode>
  }
}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	1ffff7e8 	.word	0x1ffff7e8
 8008690:	1ffff7ec 	.word	0x1ffff7ec
 8008694:	1ffff7f0 	.word	0x1ffff7f0
 8008698:	20000166 	.word	0x20000166
 800869c:	20000176 	.word	0x20000176

080086a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	4613      	mov	r3, r2
 80086ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086b2:	2300      	movs	r3, #0
 80086b4:	75fb      	strb	r3, [r7, #23]
 80086b6:	e027      	b.n	8008708 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	0f1b      	lsrs	r3, r3, #28
 80086bc:	2b09      	cmp	r3, #9
 80086be:	d80b      	bhi.n	80086d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	0f1b      	lsrs	r3, r3, #28
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4619      	mov	r1, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	440b      	add	r3, r1
 80086d0:	3230      	adds	r2, #48	; 0x30
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	e00a      	b.n	80086ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	0f1b      	lsrs	r3, r3, #28
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	4619      	mov	r1, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	440b      	add	r3, r1
 80086e8:	3237      	adds	r2, #55	; 0x37
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	3301      	adds	r3, #1
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	4413      	add	r3, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	3301      	adds	r3, #1
 8008706:	75fb      	strb	r3, [r7, #23]
 8008708:	7dfa      	ldrb	r2, [r7, #23]
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	429a      	cmp	r2, r3
 800870e:	d3d3      	bcc.n	80086b8 <IntToUnicode+0x18>
  }
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <HAL_PCD_MspInit>:
  }
}
*/

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a20      	ldr	r2, [pc, #128]	; (80087ac <HAL_PCD_MspInit+0x90>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d13a      	bne.n	80087a4 <HAL_PCD_MspInit+0x88>
  {
  // PD: we have to actively drive D+ low to signal host the disconnection!

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800872e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008734:	2301      	movs	r3, #1
 8008736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008738:	2300      	movs	r3, #0
 800873a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800873c:	2303      	movs	r3, #3
 800873e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008740:	f107 0310 	add.w	r3, r7, #16
 8008744:	4619      	mov	r1, r3
 8008746:	481a      	ldr	r0, [pc, #104]	; (80087b0 <HAL_PCD_MspInit+0x94>)
 8008748:	f7f8 fd0c 	bl	8001164 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800874c:	2200      	movs	r2, #0
 800874e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008752:	4817      	ldr	r0, [pc, #92]	; (80087b0 <HAL_PCD_MspInit+0x94>)
 8008754:	f7f8 fea1 	bl	800149a <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8008758:	2005      	movs	r0, #5
 800875a:	f7f8 fb9f 	bl	8000e9c <HAL_Delay>

    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800875e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008764:	2302      	movs	r3, #2
 8008766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008768:	2300      	movs	r3, #0
 800876a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800876c:	2303      	movs	r3, #3
 800876e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008770:	f107 0310 	add.w	r3, r7, #16
 8008774:	4619      	mov	r1, r3
 8008776:	480e      	ldr	r0, [pc, #56]	; (80087b0 <HAL_PCD_MspInit+0x94>)
 8008778:	f7f8 fcf4 	bl	8001164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800877c:	4b0d      	ldr	r3, [pc, #52]	; (80087b4 <HAL_PCD_MspInit+0x98>)
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <HAL_PCD_MspInit+0x98>)
 8008782:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008786:	61d3      	str	r3, [r2, #28]
 8008788:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <HAL_PCD_MspInit+0x98>)
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8008794:	2200      	movs	r2, #0
 8008796:	2105      	movs	r1, #5
 8008798:	2014      	movs	r0, #20
 800879a:	f7f8 fc9e 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800879e:	2014      	movs	r0, #20
 80087a0:	f7f8 fcb7 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087a4:	bf00      	nop
 80087a6:	3720      	adds	r7, #32
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	40005c00 	.word	0x40005c00
 80087b0:	40010800 	.word	0x40010800
 80087b4:	40021000 	.word	0x40021000

080087b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80087cc:	4619      	mov	r1, r3
 80087ce:	4610      	mov	r0, r2
 80087d0:	f7fe fda0 	bl	8007314 <USBD_LL_SetupStage>
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	440b      	add	r3, r1
 80087fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	4619      	mov	r1, r3
 8008806:	f7fe fdd2 	bl	80073ae <USBD_LL_DataOutStage>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008824:	78fa      	ldrb	r2, [r7, #3]
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	440b      	add	r3, r1
 8008832:	333c      	adds	r3, #60	; 0x3c
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	4619      	mov	r1, r3
 800883a:	f7fe fe29 	bl	8007490 <USBD_LL_DataInStage>
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe ff39 	bl	80076cc <USBD_LL_SOF>
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800886a:	2301      	movs	r3, #1
 800886c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d001      	beq.n	800887a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008876:	f7f8 f8ef 	bl	8000a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008880:	7bfa      	ldrb	r2, [r7, #15]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fee9 	bl	800765c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fea2 	bl	80075da <USBD_LL_Reset>
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fee3 	bl	800767a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088bc:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <HAL_PCD_SuspendCallback+0x30>)
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	4a03      	ldr	r2, [pc, #12]	; (80088d0 <HAL_PCD_SuspendCallback+0x30>)
 80088c2:	f043 0306 	orr.w	r3, r3, #6
 80088c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	e000ed00 	.word	0xe000ed00

080088d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fedd 	bl	80076a2 <USBD_LL_Resume>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088f8:	4a28      	ldr	r2, [pc, #160]	; (800899c <USBD_LL_Init+0xac>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a26      	ldr	r2, [pc, #152]	; (800899c <USBD_LL_Init+0xac>)
 8008904:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008908:	4b24      	ldr	r3, [pc, #144]	; (800899c <USBD_LL_Init+0xac>)
 800890a:	4a25      	ldr	r2, [pc, #148]	; (80089a0 <USBD_LL_Init+0xb0>)
 800890c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800890e:	4b23      	ldr	r3, [pc, #140]	; (800899c <USBD_LL_Init+0xac>)
 8008910:	2208      	movs	r2, #8
 8008912:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008914:	4b21      	ldr	r3, [pc, #132]	; (800899c <USBD_LL_Init+0xac>)
 8008916:	2202      	movs	r2, #2
 8008918:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800891a:	4b20      	ldr	r3, [pc, #128]	; (800899c <USBD_LL_Init+0xac>)
 800891c:	2200      	movs	r2, #0
 800891e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008920:	4b1e      	ldr	r3, [pc, #120]	; (800899c <USBD_LL_Init+0xac>)
 8008922:	2200      	movs	r2, #0
 8008924:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008926:	4b1d      	ldr	r3, [pc, #116]	; (800899c <USBD_LL_Init+0xac>)
 8008928:	2200      	movs	r2, #0
 800892a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800892c:	481b      	ldr	r0, [pc, #108]	; (800899c <USBD_LL_Init+0xac>)
 800892e:	f7f8 fe4e 	bl	80015ce <HAL_PCD_Init>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008938:	f7f8 f88e 	bl	8000a58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008942:	2318      	movs	r3, #24
 8008944:	2200      	movs	r2, #0
 8008946:	2100      	movs	r1, #0
 8008948:	f7fa fb6d 	bl	8003026 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008952:	2358      	movs	r3, #88	; 0x58
 8008954:	2200      	movs	r2, #0
 8008956:	2180      	movs	r1, #128	; 0x80
 8008958:	f7fa fb65 	bl	8003026 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008962:	23c0      	movs	r3, #192	; 0xc0
 8008964:	2200      	movs	r2, #0
 8008966:	2181      	movs	r1, #129	; 0x81
 8008968:	f7fa fb5d 	bl	8003026 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008972:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008976:	2200      	movs	r2, #0
 8008978:	2101      	movs	r1, #1
 800897a:	f7fa fb54 	bl	8003026 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008988:	2200      	movs	r2, #0
 800898a:	2182      	movs	r1, #130	; 0x82
 800898c:	f7fa fb4b 	bl	8003026 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	20001820 	.word	0x20001820
 80089a0:	40005c00 	.word	0x40005c00

080089a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7f8 ff06 	bl	80017cc <HAL_PCD_Start>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 f94e 	bl	8008c68 <USBD_Get_USB_Status>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b084      	sub	sp, #16
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	4608      	mov	r0, r1
 80089e4:	4611      	mov	r1, r2
 80089e6:	461a      	mov	r2, r3
 80089e8:	4603      	mov	r3, r0
 80089ea:	70fb      	strb	r3, [r7, #3]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70bb      	strb	r3, [r7, #2]
 80089f0:	4613      	mov	r3, r2
 80089f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a02:	78bb      	ldrb	r3, [r7, #2]
 8008a04:	883a      	ldrh	r2, [r7, #0]
 8008a06:	78f9      	ldrb	r1, [r7, #3]
 8008a08:	f7f9 f85b 	bl	8001ac2 <HAL_PCD_EP_Open>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f928 	bl	8008c68 <USBD_Get_USB_Status>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7f9 f899 	bl	8001b7c <HAL_PCD_EP_Close>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 f909 	bl	8008c68 <USBD_Get_USB_Status>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f9 f941 	bl	8001d0a <HAL_PCD_EP_SetStall>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f8ea 	bl	8008c68 <USBD_Get_USB_Status>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008abc:	78fa      	ldrb	r2, [r7, #3]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7f9 f982 	bl	8001dca <HAL_PCD_EP_ClrStall>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f8cb 	bl	8008c68 <USBD_Get_USB_Status>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008af2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	da0c      	bge.n	8008b16 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	440b      	add	r3, r1
 8008b10:	3302      	adds	r3, #2
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	e00b      	b.n	8008b2e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b1c:	68f9      	ldr	r1, [r7, #12]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	440b      	add	r3, r1
 8008b28:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008b2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bc80      	pop	{r7}
 8008b36:	4770      	bx	lr

08008b38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f8 ff8e 	bl	8001a78 <HAL_PCD_SetAddress>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f880 	bl	8008c68 <USBD_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b086      	sub	sp, #24
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	461a      	mov	r2, r3
 8008b82:	460b      	mov	r3, r1
 8008b84:	72fb      	strb	r3, [r7, #11]
 8008b86:	4613      	mov	r3, r2
 8008b88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b98:	893b      	ldrh	r3, [r7, #8]
 8008b9a:	7af9      	ldrb	r1, [r7, #11]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	f7f9 f87d 	bl	8001c9c <HAL_PCD_EP_Transmit>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 f85d 	bl	8008c68 <USBD_Get_USB_Status>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	460b      	mov	r3, r1
 8008bca:	72fb      	strb	r3, [r7, #11]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bde:	893b      	ldrh	r3, [r7, #8]
 8008be0:	7af9      	ldrb	r1, [r7, #11]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	f7f9 f812 	bl	8001c0c <HAL_PCD_EP_Receive>
 8008be8:	4603      	mov	r3, r0
 8008bea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 f83a 	bl	8008c68 <USBD_Get_USB_Status>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bf8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c14:	78fa      	ldrb	r2, [r7, #3]
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7f9 f828 	bl	8001c6e <HAL_PCD_EP_GetRxCount>
 8008c1e:	4603      	mov	r3, r0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c30:	4b02      	ldr	r3, [pc, #8]	; (8008c3c <USBD_static_malloc+0x14>)
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr
 8008c3c:	20001b10 	.word	0x20001b10

08008c40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]

}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bc80      	pop	{r7}
 8008c50:	4770      	bx	lr

08008c52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr

08008c68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c76:	79fb      	ldrb	r3, [r7, #7]
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d817      	bhi.n	8008cac <USBD_Get_USB_Status+0x44>
 8008c7c:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <USBD_Get_USB_Status+0x1c>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008c95 	.word	0x08008c95
 8008c88:	08008c9b 	.word	0x08008c9b
 8008c8c:	08008ca1 	.word	0x08008ca1
 8008c90:	08008ca7 	.word	0x08008ca7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]
    break;
 8008c98:	e00b      	b.n	8008cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9e:	e008      	b.n	8008cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca4:	e005      	b.n	8008cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8008caa:	e002      	b.n	8008cb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cac:	2302      	movs	r3, #2
 8008cae:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb0:	bf00      	nop
  }
  return usb_status;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop

08008cc0 <std>:
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	b510      	push	{r4, lr}
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8008cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cce:	6083      	str	r3, [r0, #8]
 8008cd0:	8181      	strh	r1, [r0, #12]
 8008cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8008cd4:	81c2      	strh	r2, [r0, #14]
 8008cd6:	6183      	str	r3, [r0, #24]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	2208      	movs	r2, #8
 8008cdc:	305c      	adds	r0, #92	; 0x5c
 8008cde:	f000 f92e 	bl	8008f3e <memset>
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	; (8008d18 <std+0x58>)
 8008ce4:	6224      	str	r4, [r4, #32]
 8008ce6:	6263      	str	r3, [r4, #36]	; 0x24
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <std+0x5c>)
 8008cea:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cec:	4b0c      	ldr	r3, [pc, #48]	; (8008d20 <std+0x60>)
 8008cee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cf0:	4b0c      	ldr	r3, [pc, #48]	; (8008d24 <std+0x64>)
 8008cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8008cf4:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <std+0x68>)
 8008cf6:	429c      	cmp	r4, r3
 8008cf8:	d006      	beq.n	8008d08 <std+0x48>
 8008cfa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008cfe:	4294      	cmp	r4, r2
 8008d00:	d002      	beq.n	8008d08 <std+0x48>
 8008d02:	33d0      	adds	r3, #208	; 0xd0
 8008d04:	429c      	cmp	r4, r3
 8008d06:	d105      	bne.n	8008d14 <std+0x54>
 8008d08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d10:	f000 b98e 	b.w	8009030 <__retarget_lock_init_recursive>
 8008d14:	bd10      	pop	{r4, pc}
 8008d16:	bf00      	nop
 8008d18:	08008eb9 	.word	0x08008eb9
 8008d1c:	08008edb 	.word	0x08008edb
 8008d20:	08008f13 	.word	0x08008f13
 8008d24:	08008f37 	.word	0x08008f37
 8008d28:	20001d30 	.word	0x20001d30

08008d2c <stdio_exit_handler>:
 8008d2c:	4a02      	ldr	r2, [pc, #8]	; (8008d38 <stdio_exit_handler+0xc>)
 8008d2e:	4903      	ldr	r1, [pc, #12]	; (8008d3c <stdio_exit_handler+0x10>)
 8008d30:	4803      	ldr	r0, [pc, #12]	; (8008d40 <stdio_exit_handler+0x14>)
 8008d32:	f000 b869 	b.w	8008e08 <_fwalk_sglue>
 8008d36:	bf00      	nop
 8008d38:	20000180 	.word	0x20000180
 8008d3c:	08009b9d 	.word	0x08009b9d
 8008d40:	2000018c 	.word	0x2000018c

08008d44 <cleanup_stdio>:
 8008d44:	6841      	ldr	r1, [r0, #4]
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <cleanup_stdio+0x34>)
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	4299      	cmp	r1, r3
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	d001      	beq.n	8008d54 <cleanup_stdio+0x10>
 8008d50:	f000 ff24 	bl	8009b9c <_fflush_r>
 8008d54:	68a1      	ldr	r1, [r4, #8]
 8008d56:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <cleanup_stdio+0x38>)
 8008d58:	4299      	cmp	r1, r3
 8008d5a:	d002      	beq.n	8008d62 <cleanup_stdio+0x1e>
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 ff1d 	bl	8009b9c <_fflush_r>
 8008d62:	68e1      	ldr	r1, [r4, #12]
 8008d64:	4b06      	ldr	r3, [pc, #24]	; (8008d80 <cleanup_stdio+0x3c>)
 8008d66:	4299      	cmp	r1, r3
 8008d68:	d004      	beq.n	8008d74 <cleanup_stdio+0x30>
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d70:	f000 bf14 	b.w	8009b9c <_fflush_r>
 8008d74:	bd10      	pop	{r4, pc}
 8008d76:	bf00      	nop
 8008d78:	20001d30 	.word	0x20001d30
 8008d7c:	20001d98 	.word	0x20001d98
 8008d80:	20001e00 	.word	0x20001e00

08008d84 <global_stdio_init.part.0>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <global_stdio_init.part.0+0x30>)
 8008d88:	4c0b      	ldr	r4, [pc, #44]	; (8008db8 <global_stdio_init.part.0+0x34>)
 8008d8a:	4a0c      	ldr	r2, [pc, #48]	; (8008dbc <global_stdio_init.part.0+0x38>)
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	2104      	movs	r1, #4
 8008d92:	2200      	movs	r2, #0
 8008d94:	f7ff ff94 	bl	8008cc0 <std>
 8008d98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	2109      	movs	r1, #9
 8008da0:	f7ff ff8e 	bl	8008cc0 <std>
 8008da4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008da8:	2202      	movs	r2, #2
 8008daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dae:	2112      	movs	r1, #18
 8008db0:	f7ff bf86 	b.w	8008cc0 <std>
 8008db4:	20001e68 	.word	0x20001e68
 8008db8:	20001d30 	.word	0x20001d30
 8008dbc:	08008d2d 	.word	0x08008d2d

08008dc0 <__sfp_lock_acquire>:
 8008dc0:	4801      	ldr	r0, [pc, #4]	; (8008dc8 <__sfp_lock_acquire+0x8>)
 8008dc2:	f000 b936 	b.w	8009032 <__retarget_lock_acquire_recursive>
 8008dc6:	bf00      	nop
 8008dc8:	20001e71 	.word	0x20001e71

08008dcc <__sfp_lock_release>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__sfp_lock_release+0x8>)
 8008dce:	f000 b931 	b.w	8009034 <__retarget_lock_release_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	20001e71 	.word	0x20001e71

08008dd8 <__sinit>:
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	4604      	mov	r4, r0
 8008ddc:	f7ff fff0 	bl	8008dc0 <__sfp_lock_acquire>
 8008de0:	6a23      	ldr	r3, [r4, #32]
 8008de2:	b11b      	cbz	r3, 8008dec <__sinit+0x14>
 8008de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de8:	f7ff bff0 	b.w	8008dcc <__sfp_lock_release>
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <__sinit+0x28>)
 8008dee:	6223      	str	r3, [r4, #32]
 8008df0:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <__sinit+0x2c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1f5      	bne.n	8008de4 <__sinit+0xc>
 8008df8:	f7ff ffc4 	bl	8008d84 <global_stdio_init.part.0>
 8008dfc:	e7f2      	b.n	8008de4 <__sinit+0xc>
 8008dfe:	bf00      	nop
 8008e00:	08008d45 	.word	0x08008d45
 8008e04:	20001e68 	.word	0x20001e68

08008e08 <_fwalk_sglue>:
 8008e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	4688      	mov	r8, r1
 8008e10:	4614      	mov	r4, r2
 8008e12:	2600      	movs	r6, #0
 8008e14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e18:	f1b9 0901 	subs.w	r9, r9, #1
 8008e1c:	d505      	bpl.n	8008e2a <_fwalk_sglue+0x22>
 8008e1e:	6824      	ldr	r4, [r4, #0]
 8008e20:	2c00      	cmp	r4, #0
 8008e22:	d1f7      	bne.n	8008e14 <_fwalk_sglue+0xc>
 8008e24:	4630      	mov	r0, r6
 8008e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d907      	bls.n	8008e40 <_fwalk_sglue+0x38>
 8008e30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e34:	3301      	adds	r3, #1
 8008e36:	d003      	beq.n	8008e40 <_fwalk_sglue+0x38>
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	47c0      	blx	r8
 8008e3e:	4306      	orrs	r6, r0
 8008e40:	3568      	adds	r5, #104	; 0x68
 8008e42:	e7e9      	b.n	8008e18 <_fwalk_sglue+0x10>

08008e44 <iprintf>:
 8008e44:	b40f      	push	{r0, r1, r2, r3}
 8008e46:	b507      	push	{r0, r1, r2, lr}
 8008e48:	4906      	ldr	r1, [pc, #24]	; (8008e64 <iprintf+0x20>)
 8008e4a:	ab04      	add	r3, sp, #16
 8008e4c:	6808      	ldr	r0, [r1, #0]
 8008e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e52:	6881      	ldr	r1, [r0, #8]
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	f000 fb71 	bl	800953c <_vfiprintf_r>
 8008e5a:	b003      	add	sp, #12
 8008e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e60:	b004      	add	sp, #16
 8008e62:	4770      	bx	lr
 8008e64:	200001d8 	.word	0x200001d8

08008e68 <putchar>:
 8008e68:	4b02      	ldr	r3, [pc, #8]	; (8008e74 <putchar+0xc>)
 8008e6a:	4601      	mov	r1, r0
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	6882      	ldr	r2, [r0, #8]
 8008e70:	f000 bebc 	b.w	8009bec <_putc_r>
 8008e74:	200001d8 	.word	0x200001d8

08008e78 <siprintf>:
 8008e78:	b40e      	push	{r1, r2, r3}
 8008e7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e7e:	b500      	push	{lr}
 8008e80:	b09c      	sub	sp, #112	; 0x70
 8008e82:	ab1d      	add	r3, sp, #116	; 0x74
 8008e84:	9002      	str	r0, [sp, #8]
 8008e86:	9006      	str	r0, [sp, #24]
 8008e88:	9107      	str	r1, [sp, #28]
 8008e8a:	9104      	str	r1, [sp, #16]
 8008e8c:	4808      	ldr	r0, [pc, #32]	; (8008eb0 <siprintf+0x38>)
 8008e8e:	4909      	ldr	r1, [pc, #36]	; (8008eb4 <siprintf+0x3c>)
 8008e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e94:	9105      	str	r1, [sp, #20]
 8008e96:	6800      	ldr	r0, [r0, #0]
 8008e98:	a902      	add	r1, sp, #8
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	f000 fa28 	bl	80092f0 <_svfiprintf_r>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	9b02      	ldr	r3, [sp, #8]
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	b01c      	add	sp, #112	; 0x70
 8008ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eac:	b003      	add	sp, #12
 8008eae:	4770      	bx	lr
 8008eb0:	200001d8 	.word	0x200001d8
 8008eb4:	ffff0208 	.word	0xffff0208

08008eb8 <__sread>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	460c      	mov	r4, r1
 8008ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec0:	f000 f868 	bl	8008f94 <_read_r>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	bfab      	itete	ge
 8008ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008eca:	89a3      	ldrhlt	r3, [r4, #12]
 8008ecc:	181b      	addge	r3, r3, r0
 8008ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ed2:	bfac      	ite	ge
 8008ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ed6:	81a3      	strhlt	r3, [r4, #12]
 8008ed8:	bd10      	pop	{r4, pc}

08008eda <__swrite>:
 8008eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ede:	461f      	mov	r7, r3
 8008ee0:	898b      	ldrh	r3, [r1, #12]
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	05db      	lsls	r3, r3, #23
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	4616      	mov	r6, r2
 8008eea:	d505      	bpl.n	8008ef8 <__swrite+0x1e>
 8008eec:	2302      	movs	r3, #2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef4:	f000 f83c 	bl	8008f70 <_lseek_r>
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	4632      	mov	r2, r6
 8008efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	4628      	mov	r0, r5
 8008f04:	463b      	mov	r3, r7
 8008f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0e:	f000 b853 	b.w	8008fb8 <_write_r>

08008f12 <__sseek>:
 8008f12:	b510      	push	{r4, lr}
 8008f14:	460c      	mov	r4, r1
 8008f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1a:	f000 f829 	bl	8008f70 <_lseek_r>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	bf15      	itete	ne
 8008f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f2e:	81a3      	strheq	r3, [r4, #12]
 8008f30:	bf18      	it	ne
 8008f32:	81a3      	strhne	r3, [r4, #12]
 8008f34:	bd10      	pop	{r4, pc}

08008f36 <__sclose>:
 8008f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3a:	f000 b809 	b.w	8008f50 <_close_r>

08008f3e <memset>:
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4402      	add	r2, r0
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d100      	bne.n	8008f48 <memset+0xa>
 8008f46:	4770      	bx	lr
 8008f48:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4c:	e7f9      	b.n	8008f42 <memset+0x4>
	...

08008f50 <_close_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	2300      	movs	r3, #0
 8008f54:	4d05      	ldr	r5, [pc, #20]	; (8008f6c <_close_r+0x1c>)
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	f7f7 fea9 	bl	8000cb2 <_close>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_close_r+0x1a>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_close_r+0x1a>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	20001e6c 	.word	0x20001e6c

08008f70 <_lseek_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4604      	mov	r4, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	4611      	mov	r1, r2
 8008f78:	2200      	movs	r2, #0
 8008f7a:	4d05      	ldr	r5, [pc, #20]	; (8008f90 <_lseek_r+0x20>)
 8008f7c:	602a      	str	r2, [r5, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f7f7 febb 	bl	8000cfa <_lseek>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_lseek_r+0x1e>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_lseek_r+0x1e>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	20001e6c 	.word	0x20001e6c

08008f94 <_read_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	4608      	mov	r0, r1
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4d05      	ldr	r5, [pc, #20]	; (8008fb4 <_read_r+0x20>)
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7f7 fe4c 	bl	8000c40 <_read>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_read_r+0x1e>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_read_r+0x1e>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20001e6c 	.word	0x20001e6c

08008fb8 <_write_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4d05      	ldr	r5, [pc, #20]	; (8008fd8 <_write_r+0x20>)
 8008fc4:	602a      	str	r2, [r5, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f7f7 fe57 	bl	8000c7a <_write>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d102      	bne.n	8008fd6 <_write_r+0x1e>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b103      	cbz	r3, 8008fd6 <_write_r+0x1e>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	20001e6c 	.word	0x20001e6c

08008fdc <__errno>:
 8008fdc:	4b01      	ldr	r3, [pc, #4]	; (8008fe4 <__errno+0x8>)
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	200001d8 	.word	0x200001d8

08008fe8 <__libc_init_array>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	2600      	movs	r6, #0
 8008fec:	4d0c      	ldr	r5, [pc, #48]	; (8009020 <__libc_init_array+0x38>)
 8008fee:	4c0d      	ldr	r4, [pc, #52]	; (8009024 <__libc_init_array+0x3c>)
 8008ff0:	1b64      	subs	r4, r4, r5
 8008ff2:	10a4      	asrs	r4, r4, #2
 8008ff4:	42a6      	cmp	r6, r4
 8008ff6:	d109      	bne.n	800900c <__libc_init_array+0x24>
 8008ff8:	f000 ffb4 	bl	8009f64 <_init>
 8008ffc:	2600      	movs	r6, #0
 8008ffe:	4d0a      	ldr	r5, [pc, #40]	; (8009028 <__libc_init_array+0x40>)
 8009000:	4c0a      	ldr	r4, [pc, #40]	; (800902c <__libc_init_array+0x44>)
 8009002:	1b64      	subs	r4, r4, r5
 8009004:	10a4      	asrs	r4, r4, #2
 8009006:	42a6      	cmp	r6, r4
 8009008:	d105      	bne.n	8009016 <__libc_init_array+0x2e>
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009010:	4798      	blx	r3
 8009012:	3601      	adds	r6, #1
 8009014:	e7ee      	b.n	8008ff4 <__libc_init_array+0xc>
 8009016:	f855 3b04 	ldr.w	r3, [r5], #4
 800901a:	4798      	blx	r3
 800901c:	3601      	adds	r6, #1
 800901e:	e7f2      	b.n	8009006 <__libc_init_array+0x1e>
 8009020:	0800a094 	.word	0x0800a094
 8009024:	0800a094 	.word	0x0800a094
 8009028:	0800a094 	.word	0x0800a094
 800902c:	0800a098 	.word	0x0800a098

08009030 <__retarget_lock_init_recursive>:
 8009030:	4770      	bx	lr

08009032 <__retarget_lock_acquire_recursive>:
 8009032:	4770      	bx	lr

08009034 <__retarget_lock_release_recursive>:
 8009034:	4770      	bx	lr

08009036 <memcpy>:
 8009036:	440a      	add	r2, r1
 8009038:	4291      	cmp	r1, r2
 800903a:	f100 33ff 	add.w	r3, r0, #4294967295
 800903e:	d100      	bne.n	8009042 <memcpy+0xc>
 8009040:	4770      	bx	lr
 8009042:	b510      	push	{r4, lr}
 8009044:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009048:	4291      	cmp	r1, r2
 800904a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800904e:	d1f9      	bne.n	8009044 <memcpy+0xe>
 8009050:	bd10      	pop	{r4, pc}
	...

08009054 <_free_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4605      	mov	r5, r0
 8009058:	2900      	cmp	r1, #0
 800905a:	d040      	beq.n	80090de <_free_r+0x8a>
 800905c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009060:	1f0c      	subs	r4, r1, #4
 8009062:	2b00      	cmp	r3, #0
 8009064:	bfb8      	it	lt
 8009066:	18e4      	addlt	r4, r4, r3
 8009068:	f000 f8dc 	bl	8009224 <__malloc_lock>
 800906c:	4a1c      	ldr	r2, [pc, #112]	; (80090e0 <_free_r+0x8c>)
 800906e:	6813      	ldr	r3, [r2, #0]
 8009070:	b933      	cbnz	r3, 8009080 <_free_r+0x2c>
 8009072:	6063      	str	r3, [r4, #4]
 8009074:	6014      	str	r4, [r2, #0]
 8009076:	4628      	mov	r0, r5
 8009078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800907c:	f000 b8d8 	b.w	8009230 <__malloc_unlock>
 8009080:	42a3      	cmp	r3, r4
 8009082:	d908      	bls.n	8009096 <_free_r+0x42>
 8009084:	6820      	ldr	r0, [r4, #0]
 8009086:	1821      	adds	r1, r4, r0
 8009088:	428b      	cmp	r3, r1
 800908a:	bf01      	itttt	eq
 800908c:	6819      	ldreq	r1, [r3, #0]
 800908e:	685b      	ldreq	r3, [r3, #4]
 8009090:	1809      	addeq	r1, r1, r0
 8009092:	6021      	streq	r1, [r4, #0]
 8009094:	e7ed      	b.n	8009072 <_free_r+0x1e>
 8009096:	461a      	mov	r2, r3
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	b10b      	cbz	r3, 80090a0 <_free_r+0x4c>
 800909c:	42a3      	cmp	r3, r4
 800909e:	d9fa      	bls.n	8009096 <_free_r+0x42>
 80090a0:	6811      	ldr	r1, [r2, #0]
 80090a2:	1850      	adds	r0, r2, r1
 80090a4:	42a0      	cmp	r0, r4
 80090a6:	d10b      	bne.n	80090c0 <_free_r+0x6c>
 80090a8:	6820      	ldr	r0, [r4, #0]
 80090aa:	4401      	add	r1, r0
 80090ac:	1850      	adds	r0, r2, r1
 80090ae:	4283      	cmp	r3, r0
 80090b0:	6011      	str	r1, [r2, #0]
 80090b2:	d1e0      	bne.n	8009076 <_free_r+0x22>
 80090b4:	6818      	ldr	r0, [r3, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	4408      	add	r0, r1
 80090ba:	6010      	str	r0, [r2, #0]
 80090bc:	6053      	str	r3, [r2, #4]
 80090be:	e7da      	b.n	8009076 <_free_r+0x22>
 80090c0:	d902      	bls.n	80090c8 <_free_r+0x74>
 80090c2:	230c      	movs	r3, #12
 80090c4:	602b      	str	r3, [r5, #0]
 80090c6:	e7d6      	b.n	8009076 <_free_r+0x22>
 80090c8:	6820      	ldr	r0, [r4, #0]
 80090ca:	1821      	adds	r1, r4, r0
 80090cc:	428b      	cmp	r3, r1
 80090ce:	bf01      	itttt	eq
 80090d0:	6819      	ldreq	r1, [r3, #0]
 80090d2:	685b      	ldreq	r3, [r3, #4]
 80090d4:	1809      	addeq	r1, r1, r0
 80090d6:	6021      	streq	r1, [r4, #0]
 80090d8:	6063      	str	r3, [r4, #4]
 80090da:	6054      	str	r4, [r2, #4]
 80090dc:	e7cb      	b.n	8009076 <_free_r+0x22>
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	20001e74 	.word	0x20001e74

080090e4 <sbrk_aligned>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	4e0e      	ldr	r6, [pc, #56]	; (8009120 <sbrk_aligned+0x3c>)
 80090e8:	460c      	mov	r4, r1
 80090ea:	6831      	ldr	r1, [r6, #0]
 80090ec:	4605      	mov	r5, r0
 80090ee:	b911      	cbnz	r1, 80090f6 <sbrk_aligned+0x12>
 80090f0:	f000 fe60 	bl	8009db4 <_sbrk_r>
 80090f4:	6030      	str	r0, [r6, #0]
 80090f6:	4621      	mov	r1, r4
 80090f8:	4628      	mov	r0, r5
 80090fa:	f000 fe5b 	bl	8009db4 <_sbrk_r>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d00a      	beq.n	8009118 <sbrk_aligned+0x34>
 8009102:	1cc4      	adds	r4, r0, #3
 8009104:	f024 0403 	bic.w	r4, r4, #3
 8009108:	42a0      	cmp	r0, r4
 800910a:	d007      	beq.n	800911c <sbrk_aligned+0x38>
 800910c:	1a21      	subs	r1, r4, r0
 800910e:	4628      	mov	r0, r5
 8009110:	f000 fe50 	bl	8009db4 <_sbrk_r>
 8009114:	3001      	adds	r0, #1
 8009116:	d101      	bne.n	800911c <sbrk_aligned+0x38>
 8009118:	f04f 34ff 	mov.w	r4, #4294967295
 800911c:	4620      	mov	r0, r4
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	20001e78 	.word	0x20001e78

08009124 <_malloc_r>:
 8009124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009128:	1ccd      	adds	r5, r1, #3
 800912a:	f025 0503 	bic.w	r5, r5, #3
 800912e:	3508      	adds	r5, #8
 8009130:	2d0c      	cmp	r5, #12
 8009132:	bf38      	it	cc
 8009134:	250c      	movcc	r5, #12
 8009136:	2d00      	cmp	r5, #0
 8009138:	4607      	mov	r7, r0
 800913a:	db01      	blt.n	8009140 <_malloc_r+0x1c>
 800913c:	42a9      	cmp	r1, r5
 800913e:	d905      	bls.n	800914c <_malloc_r+0x28>
 8009140:	230c      	movs	r3, #12
 8009142:	2600      	movs	r6, #0
 8009144:	603b      	str	r3, [r7, #0]
 8009146:	4630      	mov	r0, r6
 8009148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009220 <_malloc_r+0xfc>
 8009150:	f000 f868 	bl	8009224 <__malloc_lock>
 8009154:	f8d8 3000 	ldr.w	r3, [r8]
 8009158:	461c      	mov	r4, r3
 800915a:	bb5c      	cbnz	r4, 80091b4 <_malloc_r+0x90>
 800915c:	4629      	mov	r1, r5
 800915e:	4638      	mov	r0, r7
 8009160:	f7ff ffc0 	bl	80090e4 <sbrk_aligned>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	4604      	mov	r4, r0
 8009168:	d155      	bne.n	8009216 <_malloc_r+0xf2>
 800916a:	f8d8 4000 	ldr.w	r4, [r8]
 800916e:	4626      	mov	r6, r4
 8009170:	2e00      	cmp	r6, #0
 8009172:	d145      	bne.n	8009200 <_malloc_r+0xdc>
 8009174:	2c00      	cmp	r4, #0
 8009176:	d048      	beq.n	800920a <_malloc_r+0xe6>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	4631      	mov	r1, r6
 800917c:	4638      	mov	r0, r7
 800917e:	eb04 0903 	add.w	r9, r4, r3
 8009182:	f000 fe17 	bl	8009db4 <_sbrk_r>
 8009186:	4581      	cmp	r9, r0
 8009188:	d13f      	bne.n	800920a <_malloc_r+0xe6>
 800918a:	6821      	ldr	r1, [r4, #0]
 800918c:	4638      	mov	r0, r7
 800918e:	1a6d      	subs	r5, r5, r1
 8009190:	4629      	mov	r1, r5
 8009192:	f7ff ffa7 	bl	80090e4 <sbrk_aligned>
 8009196:	3001      	adds	r0, #1
 8009198:	d037      	beq.n	800920a <_malloc_r+0xe6>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	442b      	add	r3, r5
 800919e:	6023      	str	r3, [r4, #0]
 80091a0:	f8d8 3000 	ldr.w	r3, [r8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d038      	beq.n	800921a <_malloc_r+0xf6>
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	42a2      	cmp	r2, r4
 80091ac:	d12b      	bne.n	8009206 <_malloc_r+0xe2>
 80091ae:	2200      	movs	r2, #0
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	e00f      	b.n	80091d4 <_malloc_r+0xb0>
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	1b52      	subs	r2, r2, r5
 80091b8:	d41f      	bmi.n	80091fa <_malloc_r+0xd6>
 80091ba:	2a0b      	cmp	r2, #11
 80091bc:	d917      	bls.n	80091ee <_malloc_r+0xca>
 80091be:	1961      	adds	r1, r4, r5
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	6025      	str	r5, [r4, #0]
 80091c4:	bf18      	it	ne
 80091c6:	6059      	strne	r1, [r3, #4]
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	bf08      	it	eq
 80091cc:	f8c8 1000 	streq.w	r1, [r8]
 80091d0:	5162      	str	r2, [r4, r5]
 80091d2:	604b      	str	r3, [r1, #4]
 80091d4:	4638      	mov	r0, r7
 80091d6:	f104 060b 	add.w	r6, r4, #11
 80091da:	f000 f829 	bl	8009230 <__malloc_unlock>
 80091de:	f026 0607 	bic.w	r6, r6, #7
 80091e2:	1d23      	adds	r3, r4, #4
 80091e4:	1af2      	subs	r2, r6, r3
 80091e6:	d0ae      	beq.n	8009146 <_malloc_r+0x22>
 80091e8:	1b9b      	subs	r3, r3, r6
 80091ea:	50a3      	str	r3, [r4, r2]
 80091ec:	e7ab      	b.n	8009146 <_malloc_r+0x22>
 80091ee:	42a3      	cmp	r3, r4
 80091f0:	6862      	ldr	r2, [r4, #4]
 80091f2:	d1dd      	bne.n	80091b0 <_malloc_r+0x8c>
 80091f4:	f8c8 2000 	str.w	r2, [r8]
 80091f8:	e7ec      	b.n	80091d4 <_malloc_r+0xb0>
 80091fa:	4623      	mov	r3, r4
 80091fc:	6864      	ldr	r4, [r4, #4]
 80091fe:	e7ac      	b.n	800915a <_malloc_r+0x36>
 8009200:	4634      	mov	r4, r6
 8009202:	6876      	ldr	r6, [r6, #4]
 8009204:	e7b4      	b.n	8009170 <_malloc_r+0x4c>
 8009206:	4613      	mov	r3, r2
 8009208:	e7cc      	b.n	80091a4 <_malloc_r+0x80>
 800920a:	230c      	movs	r3, #12
 800920c:	4638      	mov	r0, r7
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	f000 f80e 	bl	8009230 <__malloc_unlock>
 8009214:	e797      	b.n	8009146 <_malloc_r+0x22>
 8009216:	6025      	str	r5, [r4, #0]
 8009218:	e7dc      	b.n	80091d4 <_malloc_r+0xb0>
 800921a:	605b      	str	r3, [r3, #4]
 800921c:	deff      	udf	#255	; 0xff
 800921e:	bf00      	nop
 8009220:	20001e74 	.word	0x20001e74

08009224 <__malloc_lock>:
 8009224:	4801      	ldr	r0, [pc, #4]	; (800922c <__malloc_lock+0x8>)
 8009226:	f7ff bf04 	b.w	8009032 <__retarget_lock_acquire_recursive>
 800922a:	bf00      	nop
 800922c:	20001e70 	.word	0x20001e70

08009230 <__malloc_unlock>:
 8009230:	4801      	ldr	r0, [pc, #4]	; (8009238 <__malloc_unlock+0x8>)
 8009232:	f7ff beff 	b.w	8009034 <__retarget_lock_release_recursive>
 8009236:	bf00      	nop
 8009238:	20001e70 	.word	0x20001e70

0800923c <__ssputs_r>:
 800923c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009240:	461f      	mov	r7, r3
 8009242:	688e      	ldr	r6, [r1, #8]
 8009244:	4682      	mov	sl, r0
 8009246:	42be      	cmp	r6, r7
 8009248:	460c      	mov	r4, r1
 800924a:	4690      	mov	r8, r2
 800924c:	680b      	ldr	r3, [r1, #0]
 800924e:	d82c      	bhi.n	80092aa <__ssputs_r+0x6e>
 8009250:	898a      	ldrh	r2, [r1, #12]
 8009252:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009256:	d026      	beq.n	80092a6 <__ssputs_r+0x6a>
 8009258:	6965      	ldr	r5, [r4, #20]
 800925a:	6909      	ldr	r1, [r1, #16]
 800925c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009260:	eba3 0901 	sub.w	r9, r3, r1
 8009264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009268:	1c7b      	adds	r3, r7, #1
 800926a:	444b      	add	r3, r9
 800926c:	106d      	asrs	r5, r5, #1
 800926e:	429d      	cmp	r5, r3
 8009270:	bf38      	it	cc
 8009272:	461d      	movcc	r5, r3
 8009274:	0553      	lsls	r3, r2, #21
 8009276:	d527      	bpl.n	80092c8 <__ssputs_r+0x8c>
 8009278:	4629      	mov	r1, r5
 800927a:	f7ff ff53 	bl	8009124 <_malloc_r>
 800927e:	4606      	mov	r6, r0
 8009280:	b360      	cbz	r0, 80092dc <__ssputs_r+0xa0>
 8009282:	464a      	mov	r2, r9
 8009284:	6921      	ldr	r1, [r4, #16]
 8009286:	f7ff fed6 	bl	8009036 <memcpy>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	6126      	str	r6, [r4, #16]
 8009298:	444e      	add	r6, r9
 800929a:	6026      	str	r6, [r4, #0]
 800929c:	463e      	mov	r6, r7
 800929e:	6165      	str	r5, [r4, #20]
 80092a0:	eba5 0509 	sub.w	r5, r5, r9
 80092a4:	60a5      	str	r5, [r4, #8]
 80092a6:	42be      	cmp	r6, r7
 80092a8:	d900      	bls.n	80092ac <__ssputs_r+0x70>
 80092aa:	463e      	mov	r6, r7
 80092ac:	4632      	mov	r2, r6
 80092ae:	4641      	mov	r1, r8
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	f000 fd65 	bl	8009d80 <memmove>
 80092b6:	2000      	movs	r0, #0
 80092b8:	68a3      	ldr	r3, [r4, #8]
 80092ba:	1b9b      	subs	r3, r3, r6
 80092bc:	60a3      	str	r3, [r4, #8]
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	4433      	add	r3, r6
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c8:	462a      	mov	r2, r5
 80092ca:	f000 fd91 	bl	8009df0 <_realloc_r>
 80092ce:	4606      	mov	r6, r0
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1e0      	bne.n	8009296 <__ssputs_r+0x5a>
 80092d4:	4650      	mov	r0, sl
 80092d6:	6921      	ldr	r1, [r4, #16]
 80092d8:	f7ff febc 	bl	8009054 <_free_r>
 80092dc:	230c      	movs	r3, #12
 80092de:	f8ca 3000 	str.w	r3, [sl]
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ec:	81a3      	strh	r3, [r4, #12]
 80092ee:	e7e9      	b.n	80092c4 <__ssputs_r+0x88>

080092f0 <_svfiprintf_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	4698      	mov	r8, r3
 80092f6:	898b      	ldrh	r3, [r1, #12]
 80092f8:	4607      	mov	r7, r0
 80092fa:	061b      	lsls	r3, r3, #24
 80092fc:	460d      	mov	r5, r1
 80092fe:	4614      	mov	r4, r2
 8009300:	b09d      	sub	sp, #116	; 0x74
 8009302:	d50e      	bpl.n	8009322 <_svfiprintf_r+0x32>
 8009304:	690b      	ldr	r3, [r1, #16]
 8009306:	b963      	cbnz	r3, 8009322 <_svfiprintf_r+0x32>
 8009308:	2140      	movs	r1, #64	; 0x40
 800930a:	f7ff ff0b 	bl	8009124 <_malloc_r>
 800930e:	6028      	str	r0, [r5, #0]
 8009310:	6128      	str	r0, [r5, #16]
 8009312:	b920      	cbnz	r0, 800931e <_svfiprintf_r+0x2e>
 8009314:	230c      	movs	r3, #12
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	e0d0      	b.n	80094c0 <_svfiprintf_r+0x1d0>
 800931e:	2340      	movs	r3, #64	; 0x40
 8009320:	616b      	str	r3, [r5, #20]
 8009322:	2300      	movs	r3, #0
 8009324:	9309      	str	r3, [sp, #36]	; 0x24
 8009326:	2320      	movs	r3, #32
 8009328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800932c:	2330      	movs	r3, #48	; 0x30
 800932e:	f04f 0901 	mov.w	r9, #1
 8009332:	f8cd 800c 	str.w	r8, [sp, #12]
 8009336:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80094d8 <_svfiprintf_r+0x1e8>
 800933a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800933e:	4623      	mov	r3, r4
 8009340:	469a      	mov	sl, r3
 8009342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009346:	b10a      	cbz	r2, 800934c <_svfiprintf_r+0x5c>
 8009348:	2a25      	cmp	r2, #37	; 0x25
 800934a:	d1f9      	bne.n	8009340 <_svfiprintf_r+0x50>
 800934c:	ebba 0b04 	subs.w	fp, sl, r4
 8009350:	d00b      	beq.n	800936a <_svfiprintf_r+0x7a>
 8009352:	465b      	mov	r3, fp
 8009354:	4622      	mov	r2, r4
 8009356:	4629      	mov	r1, r5
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff ff6f 	bl	800923c <__ssputs_r>
 800935e:	3001      	adds	r0, #1
 8009360:	f000 80a9 	beq.w	80094b6 <_svfiprintf_r+0x1c6>
 8009364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009366:	445a      	add	r2, fp
 8009368:	9209      	str	r2, [sp, #36]	; 0x24
 800936a:	f89a 3000 	ldrb.w	r3, [sl]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 80a1 	beq.w	80094b6 <_svfiprintf_r+0x1c6>
 8009374:	2300      	movs	r3, #0
 8009376:	f04f 32ff 	mov.w	r2, #4294967295
 800937a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800937e:	f10a 0a01 	add.w	sl, sl, #1
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	9307      	str	r3, [sp, #28]
 8009386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800938a:	931a      	str	r3, [sp, #104]	; 0x68
 800938c:	4654      	mov	r4, sl
 800938e:	2205      	movs	r2, #5
 8009390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009394:	4850      	ldr	r0, [pc, #320]	; (80094d8 <_svfiprintf_r+0x1e8>)
 8009396:	f000 fd1d 	bl	8009dd4 <memchr>
 800939a:	9a04      	ldr	r2, [sp, #16]
 800939c:	b9d8      	cbnz	r0, 80093d6 <_svfiprintf_r+0xe6>
 800939e:	06d0      	lsls	r0, r2, #27
 80093a0:	bf44      	itt	mi
 80093a2:	2320      	movmi	r3, #32
 80093a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a8:	0711      	lsls	r1, r2, #28
 80093aa:	bf44      	itt	mi
 80093ac:	232b      	movmi	r3, #43	; 0x2b
 80093ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b2:	f89a 3000 	ldrb.w	r3, [sl]
 80093b6:	2b2a      	cmp	r3, #42	; 0x2a
 80093b8:	d015      	beq.n	80093e6 <_svfiprintf_r+0xf6>
 80093ba:	4654      	mov	r4, sl
 80093bc:	2000      	movs	r0, #0
 80093be:	f04f 0c0a 	mov.w	ip, #10
 80093c2:	9a07      	ldr	r2, [sp, #28]
 80093c4:	4621      	mov	r1, r4
 80093c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ca:	3b30      	subs	r3, #48	; 0x30
 80093cc:	2b09      	cmp	r3, #9
 80093ce:	d94d      	bls.n	800946c <_svfiprintf_r+0x17c>
 80093d0:	b1b0      	cbz	r0, 8009400 <_svfiprintf_r+0x110>
 80093d2:	9207      	str	r2, [sp, #28]
 80093d4:	e014      	b.n	8009400 <_svfiprintf_r+0x110>
 80093d6:	eba0 0308 	sub.w	r3, r0, r8
 80093da:	fa09 f303 	lsl.w	r3, r9, r3
 80093de:	4313      	orrs	r3, r2
 80093e0:	46a2      	mov	sl, r4
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	e7d2      	b.n	800938c <_svfiprintf_r+0x9c>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	1d19      	adds	r1, r3, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	9103      	str	r1, [sp, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfbb      	ittet	lt
 80093f2:	425b      	neglt	r3, r3
 80093f4:	f042 0202 	orrlt.w	r2, r2, #2
 80093f8:	9307      	strge	r3, [sp, #28]
 80093fa:	9307      	strlt	r3, [sp, #28]
 80093fc:	bfb8      	it	lt
 80093fe:	9204      	strlt	r2, [sp, #16]
 8009400:	7823      	ldrb	r3, [r4, #0]
 8009402:	2b2e      	cmp	r3, #46	; 0x2e
 8009404:	d10c      	bne.n	8009420 <_svfiprintf_r+0x130>
 8009406:	7863      	ldrb	r3, [r4, #1]
 8009408:	2b2a      	cmp	r3, #42	; 0x2a
 800940a:	d134      	bne.n	8009476 <_svfiprintf_r+0x186>
 800940c:	9b03      	ldr	r3, [sp, #12]
 800940e:	3402      	adds	r4, #2
 8009410:	1d1a      	adds	r2, r3, #4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	9203      	str	r2, [sp, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	bfb8      	it	lt
 800941a:	f04f 33ff 	movlt.w	r3, #4294967295
 800941e:	9305      	str	r3, [sp, #20]
 8009420:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80094dc <_svfiprintf_r+0x1ec>
 8009424:	2203      	movs	r2, #3
 8009426:	4650      	mov	r0, sl
 8009428:	7821      	ldrb	r1, [r4, #0]
 800942a:	f000 fcd3 	bl	8009dd4 <memchr>
 800942e:	b138      	cbz	r0, 8009440 <_svfiprintf_r+0x150>
 8009430:	2240      	movs	r2, #64	; 0x40
 8009432:	9b04      	ldr	r3, [sp, #16]
 8009434:	eba0 000a 	sub.w	r0, r0, sl
 8009438:	4082      	lsls	r2, r0
 800943a:	4313      	orrs	r3, r2
 800943c:	3401      	adds	r4, #1
 800943e:	9304      	str	r3, [sp, #16]
 8009440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009444:	2206      	movs	r2, #6
 8009446:	4826      	ldr	r0, [pc, #152]	; (80094e0 <_svfiprintf_r+0x1f0>)
 8009448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800944c:	f000 fcc2 	bl	8009dd4 <memchr>
 8009450:	2800      	cmp	r0, #0
 8009452:	d038      	beq.n	80094c6 <_svfiprintf_r+0x1d6>
 8009454:	4b23      	ldr	r3, [pc, #140]	; (80094e4 <_svfiprintf_r+0x1f4>)
 8009456:	bb1b      	cbnz	r3, 80094a0 <_svfiprintf_r+0x1b0>
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	3307      	adds	r3, #7
 800945c:	f023 0307 	bic.w	r3, r3, #7
 8009460:	3308      	adds	r3, #8
 8009462:	9303      	str	r3, [sp, #12]
 8009464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009466:	4433      	add	r3, r6
 8009468:	9309      	str	r3, [sp, #36]	; 0x24
 800946a:	e768      	b.n	800933e <_svfiprintf_r+0x4e>
 800946c:	460c      	mov	r4, r1
 800946e:	2001      	movs	r0, #1
 8009470:	fb0c 3202 	mla	r2, ip, r2, r3
 8009474:	e7a6      	b.n	80093c4 <_svfiprintf_r+0xd4>
 8009476:	2300      	movs	r3, #0
 8009478:	f04f 0c0a 	mov.w	ip, #10
 800947c:	4619      	mov	r1, r3
 800947e:	3401      	adds	r4, #1
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	4620      	mov	r0, r4
 8009484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009488:	3a30      	subs	r2, #48	; 0x30
 800948a:	2a09      	cmp	r2, #9
 800948c:	d903      	bls.n	8009496 <_svfiprintf_r+0x1a6>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0c6      	beq.n	8009420 <_svfiprintf_r+0x130>
 8009492:	9105      	str	r1, [sp, #20]
 8009494:	e7c4      	b.n	8009420 <_svfiprintf_r+0x130>
 8009496:	4604      	mov	r4, r0
 8009498:	2301      	movs	r3, #1
 800949a:	fb0c 2101 	mla	r1, ip, r1, r2
 800949e:	e7f0      	b.n	8009482 <_svfiprintf_r+0x192>
 80094a0:	ab03      	add	r3, sp, #12
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	462a      	mov	r2, r5
 80094a6:	4638      	mov	r0, r7
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <_svfiprintf_r+0x1f8>)
 80094aa:	a904      	add	r1, sp, #16
 80094ac:	f3af 8000 	nop.w
 80094b0:	1c42      	adds	r2, r0, #1
 80094b2:	4606      	mov	r6, r0
 80094b4:	d1d6      	bne.n	8009464 <_svfiprintf_r+0x174>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	065b      	lsls	r3, r3, #25
 80094ba:	f53f af2d 	bmi.w	8009318 <_svfiprintf_r+0x28>
 80094be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c0:	b01d      	add	sp, #116	; 0x74
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	ab03      	add	r3, sp, #12
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	462a      	mov	r2, r5
 80094cc:	4638      	mov	r0, r7
 80094ce:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <_svfiprintf_r+0x1f8>)
 80094d0:	a904      	add	r1, sp, #16
 80094d2:	f000 f9bf 	bl	8009854 <_printf_i>
 80094d6:	e7eb      	b.n	80094b0 <_svfiprintf_r+0x1c0>
 80094d8:	0800a05e 	.word	0x0800a05e
 80094dc:	0800a064 	.word	0x0800a064
 80094e0:	0800a068 	.word	0x0800a068
 80094e4:	00000000 	.word	0x00000000
 80094e8:	0800923d 	.word	0x0800923d

080094ec <__sfputc_r>:
 80094ec:	6893      	ldr	r3, [r2, #8]
 80094ee:	b410      	push	{r4}
 80094f0:	3b01      	subs	r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	6093      	str	r3, [r2, #8]
 80094f6:	da07      	bge.n	8009508 <__sfputc_r+0x1c>
 80094f8:	6994      	ldr	r4, [r2, #24]
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	db01      	blt.n	8009502 <__sfputc_r+0x16>
 80094fe:	290a      	cmp	r1, #10
 8009500:	d102      	bne.n	8009508 <__sfputc_r+0x1c>
 8009502:	bc10      	pop	{r4}
 8009504:	f000 bba6 	b.w	8009c54 <__swbuf_r>
 8009508:	6813      	ldr	r3, [r2, #0]
 800950a:	1c58      	adds	r0, r3, #1
 800950c:	6010      	str	r0, [r2, #0]
 800950e:	7019      	strb	r1, [r3, #0]
 8009510:	4608      	mov	r0, r1
 8009512:	bc10      	pop	{r4}
 8009514:	4770      	bx	lr

08009516 <__sfputs_r>:
 8009516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009518:	4606      	mov	r6, r0
 800951a:	460f      	mov	r7, r1
 800951c:	4614      	mov	r4, r2
 800951e:	18d5      	adds	r5, r2, r3
 8009520:	42ac      	cmp	r4, r5
 8009522:	d101      	bne.n	8009528 <__sfputs_r+0x12>
 8009524:	2000      	movs	r0, #0
 8009526:	e007      	b.n	8009538 <__sfputs_r+0x22>
 8009528:	463a      	mov	r2, r7
 800952a:	4630      	mov	r0, r6
 800952c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009530:	f7ff ffdc 	bl	80094ec <__sfputc_r>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d1f3      	bne.n	8009520 <__sfputs_r+0xa>
 8009538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800953c <_vfiprintf_r>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	460d      	mov	r5, r1
 8009542:	4614      	mov	r4, r2
 8009544:	4698      	mov	r8, r3
 8009546:	4606      	mov	r6, r0
 8009548:	b09d      	sub	sp, #116	; 0x74
 800954a:	b118      	cbz	r0, 8009554 <_vfiprintf_r+0x18>
 800954c:	6a03      	ldr	r3, [r0, #32]
 800954e:	b90b      	cbnz	r3, 8009554 <_vfiprintf_r+0x18>
 8009550:	f7ff fc42 	bl	8008dd8 <__sinit>
 8009554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009556:	07d9      	lsls	r1, r3, #31
 8009558:	d405      	bmi.n	8009566 <_vfiprintf_r+0x2a>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	059a      	lsls	r2, r3, #22
 800955e:	d402      	bmi.n	8009566 <_vfiprintf_r+0x2a>
 8009560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009562:	f7ff fd66 	bl	8009032 <__retarget_lock_acquire_recursive>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	071b      	lsls	r3, r3, #28
 800956a:	d501      	bpl.n	8009570 <_vfiprintf_r+0x34>
 800956c:	692b      	ldr	r3, [r5, #16]
 800956e:	b99b      	cbnz	r3, 8009598 <_vfiprintf_r+0x5c>
 8009570:	4629      	mov	r1, r5
 8009572:	4630      	mov	r0, r6
 8009574:	f000 fbac 	bl	8009cd0 <__swsetup_r>
 8009578:	b170      	cbz	r0, 8009598 <_vfiprintf_r+0x5c>
 800957a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957c:	07dc      	lsls	r4, r3, #31
 800957e:	d504      	bpl.n	800958a <_vfiprintf_r+0x4e>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	b01d      	add	sp, #116	; 0x74
 8009586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	0598      	lsls	r0, r3, #22
 800958e:	d4f7      	bmi.n	8009580 <_vfiprintf_r+0x44>
 8009590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009592:	f7ff fd4f 	bl	8009034 <__retarget_lock_release_recursive>
 8009596:	e7f3      	b.n	8009580 <_vfiprintf_r+0x44>
 8009598:	2300      	movs	r3, #0
 800959a:	9309      	str	r3, [sp, #36]	; 0x24
 800959c:	2320      	movs	r3, #32
 800959e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095a2:	2330      	movs	r3, #48	; 0x30
 80095a4:	f04f 0901 	mov.w	r9, #1
 80095a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800975c <_vfiprintf_r+0x220>
 80095b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095b4:	4623      	mov	r3, r4
 80095b6:	469a      	mov	sl, r3
 80095b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095bc:	b10a      	cbz	r2, 80095c2 <_vfiprintf_r+0x86>
 80095be:	2a25      	cmp	r2, #37	; 0x25
 80095c0:	d1f9      	bne.n	80095b6 <_vfiprintf_r+0x7a>
 80095c2:	ebba 0b04 	subs.w	fp, sl, r4
 80095c6:	d00b      	beq.n	80095e0 <_vfiprintf_r+0xa4>
 80095c8:	465b      	mov	r3, fp
 80095ca:	4622      	mov	r2, r4
 80095cc:	4629      	mov	r1, r5
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff ffa1 	bl	8009516 <__sfputs_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	f000 80a9 	beq.w	800972c <_vfiprintf_r+0x1f0>
 80095da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095dc:	445a      	add	r2, fp
 80095de:	9209      	str	r2, [sp, #36]	; 0x24
 80095e0:	f89a 3000 	ldrb.w	r3, [sl]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 80a1 	beq.w	800972c <_vfiprintf_r+0x1f0>
 80095ea:	2300      	movs	r3, #0
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f4:	f10a 0a01 	add.w	sl, sl, #1
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	9307      	str	r3, [sp, #28]
 80095fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009600:	931a      	str	r3, [sp, #104]	; 0x68
 8009602:	4654      	mov	r4, sl
 8009604:	2205      	movs	r2, #5
 8009606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960a:	4854      	ldr	r0, [pc, #336]	; (800975c <_vfiprintf_r+0x220>)
 800960c:	f000 fbe2 	bl	8009dd4 <memchr>
 8009610:	9a04      	ldr	r2, [sp, #16]
 8009612:	b9d8      	cbnz	r0, 800964c <_vfiprintf_r+0x110>
 8009614:	06d1      	lsls	r1, r2, #27
 8009616:	bf44      	itt	mi
 8009618:	2320      	movmi	r3, #32
 800961a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961e:	0713      	lsls	r3, r2, #28
 8009620:	bf44      	itt	mi
 8009622:	232b      	movmi	r3, #43	; 0x2b
 8009624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009628:	f89a 3000 	ldrb.w	r3, [sl]
 800962c:	2b2a      	cmp	r3, #42	; 0x2a
 800962e:	d015      	beq.n	800965c <_vfiprintf_r+0x120>
 8009630:	4654      	mov	r4, sl
 8009632:	2000      	movs	r0, #0
 8009634:	f04f 0c0a 	mov.w	ip, #10
 8009638:	9a07      	ldr	r2, [sp, #28]
 800963a:	4621      	mov	r1, r4
 800963c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009640:	3b30      	subs	r3, #48	; 0x30
 8009642:	2b09      	cmp	r3, #9
 8009644:	d94d      	bls.n	80096e2 <_vfiprintf_r+0x1a6>
 8009646:	b1b0      	cbz	r0, 8009676 <_vfiprintf_r+0x13a>
 8009648:	9207      	str	r2, [sp, #28]
 800964a:	e014      	b.n	8009676 <_vfiprintf_r+0x13a>
 800964c:	eba0 0308 	sub.w	r3, r0, r8
 8009650:	fa09 f303 	lsl.w	r3, r9, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	46a2      	mov	sl, r4
 8009658:	9304      	str	r3, [sp, #16]
 800965a:	e7d2      	b.n	8009602 <_vfiprintf_r+0xc6>
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	1d19      	adds	r1, r3, #4
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	9103      	str	r1, [sp, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfbb      	ittet	lt
 8009668:	425b      	neglt	r3, r3
 800966a:	f042 0202 	orrlt.w	r2, r2, #2
 800966e:	9307      	strge	r3, [sp, #28]
 8009670:	9307      	strlt	r3, [sp, #28]
 8009672:	bfb8      	it	lt
 8009674:	9204      	strlt	r2, [sp, #16]
 8009676:	7823      	ldrb	r3, [r4, #0]
 8009678:	2b2e      	cmp	r3, #46	; 0x2e
 800967a:	d10c      	bne.n	8009696 <_vfiprintf_r+0x15a>
 800967c:	7863      	ldrb	r3, [r4, #1]
 800967e:	2b2a      	cmp	r3, #42	; 0x2a
 8009680:	d134      	bne.n	80096ec <_vfiprintf_r+0x1b0>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	3402      	adds	r4, #2
 8009686:	1d1a      	adds	r2, r3, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	9203      	str	r2, [sp, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	bfb8      	it	lt
 8009690:	f04f 33ff 	movlt.w	r3, #4294967295
 8009694:	9305      	str	r3, [sp, #20]
 8009696:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009760 <_vfiprintf_r+0x224>
 800969a:	2203      	movs	r2, #3
 800969c:	4650      	mov	r0, sl
 800969e:	7821      	ldrb	r1, [r4, #0]
 80096a0:	f000 fb98 	bl	8009dd4 <memchr>
 80096a4:	b138      	cbz	r0, 80096b6 <_vfiprintf_r+0x17a>
 80096a6:	2240      	movs	r2, #64	; 0x40
 80096a8:	9b04      	ldr	r3, [sp, #16]
 80096aa:	eba0 000a 	sub.w	r0, r0, sl
 80096ae:	4082      	lsls	r2, r0
 80096b0:	4313      	orrs	r3, r2
 80096b2:	3401      	adds	r4, #1
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ba:	2206      	movs	r2, #6
 80096bc:	4829      	ldr	r0, [pc, #164]	; (8009764 <_vfiprintf_r+0x228>)
 80096be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096c2:	f000 fb87 	bl	8009dd4 <memchr>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d03f      	beq.n	800974a <_vfiprintf_r+0x20e>
 80096ca:	4b27      	ldr	r3, [pc, #156]	; (8009768 <_vfiprintf_r+0x22c>)
 80096cc:	bb1b      	cbnz	r3, 8009716 <_vfiprintf_r+0x1da>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	3307      	adds	r3, #7
 80096d2:	f023 0307 	bic.w	r3, r3, #7
 80096d6:	3308      	adds	r3, #8
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096dc:	443b      	add	r3, r7
 80096de:	9309      	str	r3, [sp, #36]	; 0x24
 80096e0:	e768      	b.n	80095b4 <_vfiprintf_r+0x78>
 80096e2:	460c      	mov	r4, r1
 80096e4:	2001      	movs	r0, #1
 80096e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80096ea:	e7a6      	b.n	800963a <_vfiprintf_r+0xfe>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f04f 0c0a 	mov.w	ip, #10
 80096f2:	4619      	mov	r1, r3
 80096f4:	3401      	adds	r4, #1
 80096f6:	9305      	str	r3, [sp, #20]
 80096f8:	4620      	mov	r0, r4
 80096fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fe:	3a30      	subs	r2, #48	; 0x30
 8009700:	2a09      	cmp	r2, #9
 8009702:	d903      	bls.n	800970c <_vfiprintf_r+0x1d0>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0c6      	beq.n	8009696 <_vfiprintf_r+0x15a>
 8009708:	9105      	str	r1, [sp, #20]
 800970a:	e7c4      	b.n	8009696 <_vfiprintf_r+0x15a>
 800970c:	4604      	mov	r4, r0
 800970e:	2301      	movs	r3, #1
 8009710:	fb0c 2101 	mla	r1, ip, r1, r2
 8009714:	e7f0      	b.n	80096f8 <_vfiprintf_r+0x1bc>
 8009716:	ab03      	add	r3, sp, #12
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	462a      	mov	r2, r5
 800971c:	4630      	mov	r0, r6
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <_vfiprintf_r+0x230>)
 8009720:	a904      	add	r1, sp, #16
 8009722:	f3af 8000 	nop.w
 8009726:	4607      	mov	r7, r0
 8009728:	1c78      	adds	r0, r7, #1
 800972a:	d1d6      	bne.n	80096da <_vfiprintf_r+0x19e>
 800972c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800972e:	07d9      	lsls	r1, r3, #31
 8009730:	d405      	bmi.n	800973e <_vfiprintf_r+0x202>
 8009732:	89ab      	ldrh	r3, [r5, #12]
 8009734:	059a      	lsls	r2, r3, #22
 8009736:	d402      	bmi.n	800973e <_vfiprintf_r+0x202>
 8009738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800973a:	f7ff fc7b 	bl	8009034 <__retarget_lock_release_recursive>
 800973e:	89ab      	ldrh	r3, [r5, #12]
 8009740:	065b      	lsls	r3, r3, #25
 8009742:	f53f af1d 	bmi.w	8009580 <_vfiprintf_r+0x44>
 8009746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009748:	e71c      	b.n	8009584 <_vfiprintf_r+0x48>
 800974a:	ab03      	add	r3, sp, #12
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	462a      	mov	r2, r5
 8009750:	4630      	mov	r0, r6
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <_vfiprintf_r+0x230>)
 8009754:	a904      	add	r1, sp, #16
 8009756:	f000 f87d 	bl	8009854 <_printf_i>
 800975a:	e7e4      	b.n	8009726 <_vfiprintf_r+0x1ea>
 800975c:	0800a05e 	.word	0x0800a05e
 8009760:	0800a064 	.word	0x0800a064
 8009764:	0800a068 	.word	0x0800a068
 8009768:	00000000 	.word	0x00000000
 800976c:	08009517 	.word	0x08009517

08009770 <_printf_common>:
 8009770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	4616      	mov	r6, r2
 8009776:	4699      	mov	r9, r3
 8009778:	688a      	ldr	r2, [r1, #8]
 800977a:	690b      	ldr	r3, [r1, #16]
 800977c:	4607      	mov	r7, r0
 800977e:	4293      	cmp	r3, r2
 8009780:	bfb8      	it	lt
 8009782:	4613      	movlt	r3, r2
 8009784:	6033      	str	r3, [r6, #0]
 8009786:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800978a:	460c      	mov	r4, r1
 800978c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009790:	b10a      	cbz	r2, 8009796 <_printf_common+0x26>
 8009792:	3301      	adds	r3, #1
 8009794:	6033      	str	r3, [r6, #0]
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	0699      	lsls	r1, r3, #26
 800979a:	bf42      	ittt	mi
 800979c:	6833      	ldrmi	r3, [r6, #0]
 800979e:	3302      	addmi	r3, #2
 80097a0:	6033      	strmi	r3, [r6, #0]
 80097a2:	6825      	ldr	r5, [r4, #0]
 80097a4:	f015 0506 	ands.w	r5, r5, #6
 80097a8:	d106      	bne.n	80097b8 <_printf_common+0x48>
 80097aa:	f104 0a19 	add.w	sl, r4, #25
 80097ae:	68e3      	ldr	r3, [r4, #12]
 80097b0:	6832      	ldr	r2, [r6, #0]
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	42ab      	cmp	r3, r5
 80097b6:	dc2b      	bgt.n	8009810 <_printf_common+0xa0>
 80097b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097bc:	1e13      	subs	r3, r2, #0
 80097be:	6822      	ldr	r2, [r4, #0]
 80097c0:	bf18      	it	ne
 80097c2:	2301      	movne	r3, #1
 80097c4:	0692      	lsls	r2, r2, #26
 80097c6:	d430      	bmi.n	800982a <_printf_common+0xba>
 80097c8:	4649      	mov	r1, r9
 80097ca:	4638      	mov	r0, r7
 80097cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097d0:	47c0      	blx	r8
 80097d2:	3001      	adds	r0, #1
 80097d4:	d023      	beq.n	800981e <_printf_common+0xae>
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	6922      	ldr	r2, [r4, #16]
 80097da:	f003 0306 	and.w	r3, r3, #6
 80097de:	2b04      	cmp	r3, #4
 80097e0:	bf14      	ite	ne
 80097e2:	2500      	movne	r5, #0
 80097e4:	6833      	ldreq	r3, [r6, #0]
 80097e6:	f04f 0600 	mov.w	r6, #0
 80097ea:	bf08      	it	eq
 80097ec:	68e5      	ldreq	r5, [r4, #12]
 80097ee:	f104 041a 	add.w	r4, r4, #26
 80097f2:	bf08      	it	eq
 80097f4:	1aed      	subeq	r5, r5, r3
 80097f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80097fa:	bf08      	it	eq
 80097fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009800:	4293      	cmp	r3, r2
 8009802:	bfc4      	itt	gt
 8009804:	1a9b      	subgt	r3, r3, r2
 8009806:	18ed      	addgt	r5, r5, r3
 8009808:	42b5      	cmp	r5, r6
 800980a:	d11a      	bne.n	8009842 <_printf_common+0xd2>
 800980c:	2000      	movs	r0, #0
 800980e:	e008      	b.n	8009822 <_printf_common+0xb2>
 8009810:	2301      	movs	r3, #1
 8009812:	4652      	mov	r2, sl
 8009814:	4649      	mov	r1, r9
 8009816:	4638      	mov	r0, r7
 8009818:	47c0      	blx	r8
 800981a:	3001      	adds	r0, #1
 800981c:	d103      	bne.n	8009826 <_printf_common+0xb6>
 800981e:	f04f 30ff 	mov.w	r0, #4294967295
 8009822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009826:	3501      	adds	r5, #1
 8009828:	e7c1      	b.n	80097ae <_printf_common+0x3e>
 800982a:	2030      	movs	r0, #48	; 0x30
 800982c:	18e1      	adds	r1, r4, r3
 800982e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009832:	1c5a      	adds	r2, r3, #1
 8009834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009838:	4422      	add	r2, r4
 800983a:	3302      	adds	r3, #2
 800983c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009840:	e7c2      	b.n	80097c8 <_printf_common+0x58>
 8009842:	2301      	movs	r3, #1
 8009844:	4622      	mov	r2, r4
 8009846:	4649      	mov	r1, r9
 8009848:	4638      	mov	r0, r7
 800984a:	47c0      	blx	r8
 800984c:	3001      	adds	r0, #1
 800984e:	d0e6      	beq.n	800981e <_printf_common+0xae>
 8009850:	3601      	adds	r6, #1
 8009852:	e7d9      	b.n	8009808 <_printf_common+0x98>

08009854 <_printf_i>:
 8009854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009858:	7e0f      	ldrb	r7, [r1, #24]
 800985a:	4691      	mov	r9, r2
 800985c:	2f78      	cmp	r7, #120	; 0x78
 800985e:	4680      	mov	r8, r0
 8009860:	460c      	mov	r4, r1
 8009862:	469a      	mov	sl, r3
 8009864:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800986a:	d807      	bhi.n	800987c <_printf_i+0x28>
 800986c:	2f62      	cmp	r7, #98	; 0x62
 800986e:	d80a      	bhi.n	8009886 <_printf_i+0x32>
 8009870:	2f00      	cmp	r7, #0
 8009872:	f000 80d5 	beq.w	8009a20 <_printf_i+0x1cc>
 8009876:	2f58      	cmp	r7, #88	; 0x58
 8009878:	f000 80c1 	beq.w	80099fe <_printf_i+0x1aa>
 800987c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009884:	e03a      	b.n	80098fc <_printf_i+0xa8>
 8009886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800988a:	2b15      	cmp	r3, #21
 800988c:	d8f6      	bhi.n	800987c <_printf_i+0x28>
 800988e:	a101      	add	r1, pc, #4	; (adr r1, 8009894 <_printf_i+0x40>)
 8009890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009894:	080098ed 	.word	0x080098ed
 8009898:	08009901 	.word	0x08009901
 800989c:	0800987d 	.word	0x0800987d
 80098a0:	0800987d 	.word	0x0800987d
 80098a4:	0800987d 	.word	0x0800987d
 80098a8:	0800987d 	.word	0x0800987d
 80098ac:	08009901 	.word	0x08009901
 80098b0:	0800987d 	.word	0x0800987d
 80098b4:	0800987d 	.word	0x0800987d
 80098b8:	0800987d 	.word	0x0800987d
 80098bc:	0800987d 	.word	0x0800987d
 80098c0:	08009a07 	.word	0x08009a07
 80098c4:	0800992d 	.word	0x0800992d
 80098c8:	080099c1 	.word	0x080099c1
 80098cc:	0800987d 	.word	0x0800987d
 80098d0:	0800987d 	.word	0x0800987d
 80098d4:	08009a29 	.word	0x08009a29
 80098d8:	0800987d 	.word	0x0800987d
 80098dc:	0800992d 	.word	0x0800992d
 80098e0:	0800987d 	.word	0x0800987d
 80098e4:	0800987d 	.word	0x0800987d
 80098e8:	080099c9 	.word	0x080099c9
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	1d1a      	adds	r2, r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	602a      	str	r2, [r5, #0]
 80098f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098fc:	2301      	movs	r3, #1
 80098fe:	e0a0      	b.n	8009a42 <_printf_i+0x1ee>
 8009900:	6820      	ldr	r0, [r4, #0]
 8009902:	682b      	ldr	r3, [r5, #0]
 8009904:	0607      	lsls	r7, r0, #24
 8009906:	f103 0104 	add.w	r1, r3, #4
 800990a:	6029      	str	r1, [r5, #0]
 800990c:	d501      	bpl.n	8009912 <_printf_i+0xbe>
 800990e:	681e      	ldr	r6, [r3, #0]
 8009910:	e003      	b.n	800991a <_printf_i+0xc6>
 8009912:	0646      	lsls	r6, r0, #25
 8009914:	d5fb      	bpl.n	800990e <_printf_i+0xba>
 8009916:	f9b3 6000 	ldrsh.w	r6, [r3]
 800991a:	2e00      	cmp	r6, #0
 800991c:	da03      	bge.n	8009926 <_printf_i+0xd2>
 800991e:	232d      	movs	r3, #45	; 0x2d
 8009920:	4276      	negs	r6, r6
 8009922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009926:	230a      	movs	r3, #10
 8009928:	4859      	ldr	r0, [pc, #356]	; (8009a90 <_printf_i+0x23c>)
 800992a:	e012      	b.n	8009952 <_printf_i+0xfe>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	6820      	ldr	r0, [r4, #0]
 8009930:	1d19      	adds	r1, r3, #4
 8009932:	6029      	str	r1, [r5, #0]
 8009934:	0605      	lsls	r5, r0, #24
 8009936:	d501      	bpl.n	800993c <_printf_i+0xe8>
 8009938:	681e      	ldr	r6, [r3, #0]
 800993a:	e002      	b.n	8009942 <_printf_i+0xee>
 800993c:	0641      	lsls	r1, r0, #25
 800993e:	d5fb      	bpl.n	8009938 <_printf_i+0xe4>
 8009940:	881e      	ldrh	r6, [r3, #0]
 8009942:	2f6f      	cmp	r7, #111	; 0x6f
 8009944:	bf0c      	ite	eq
 8009946:	2308      	moveq	r3, #8
 8009948:	230a      	movne	r3, #10
 800994a:	4851      	ldr	r0, [pc, #324]	; (8009a90 <_printf_i+0x23c>)
 800994c:	2100      	movs	r1, #0
 800994e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009952:	6865      	ldr	r5, [r4, #4]
 8009954:	2d00      	cmp	r5, #0
 8009956:	bfa8      	it	ge
 8009958:	6821      	ldrge	r1, [r4, #0]
 800995a:	60a5      	str	r5, [r4, #8]
 800995c:	bfa4      	itt	ge
 800995e:	f021 0104 	bicge.w	r1, r1, #4
 8009962:	6021      	strge	r1, [r4, #0]
 8009964:	b90e      	cbnz	r6, 800996a <_printf_i+0x116>
 8009966:	2d00      	cmp	r5, #0
 8009968:	d04b      	beq.n	8009a02 <_printf_i+0x1ae>
 800996a:	4615      	mov	r5, r2
 800996c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009970:	fb03 6711 	mls	r7, r3, r1, r6
 8009974:	5dc7      	ldrb	r7, [r0, r7]
 8009976:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800997a:	4637      	mov	r7, r6
 800997c:	42bb      	cmp	r3, r7
 800997e:	460e      	mov	r6, r1
 8009980:	d9f4      	bls.n	800996c <_printf_i+0x118>
 8009982:	2b08      	cmp	r3, #8
 8009984:	d10b      	bne.n	800999e <_printf_i+0x14a>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	07de      	lsls	r6, r3, #31
 800998a:	d508      	bpl.n	800999e <_printf_i+0x14a>
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	6861      	ldr	r1, [r4, #4]
 8009990:	4299      	cmp	r1, r3
 8009992:	bfde      	ittt	le
 8009994:	2330      	movle	r3, #48	; 0x30
 8009996:	f805 3c01 	strble.w	r3, [r5, #-1]
 800999a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800999e:	1b52      	subs	r2, r2, r5
 80099a0:	6122      	str	r2, [r4, #16]
 80099a2:	464b      	mov	r3, r9
 80099a4:	4621      	mov	r1, r4
 80099a6:	4640      	mov	r0, r8
 80099a8:	f8cd a000 	str.w	sl, [sp]
 80099ac:	aa03      	add	r2, sp, #12
 80099ae:	f7ff fedf 	bl	8009770 <_printf_common>
 80099b2:	3001      	adds	r0, #1
 80099b4:	d14a      	bne.n	8009a4c <_printf_i+0x1f8>
 80099b6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ba:	b004      	add	sp, #16
 80099bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	f043 0320 	orr.w	r3, r3, #32
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	2778      	movs	r7, #120	; 0x78
 80099ca:	4832      	ldr	r0, [pc, #200]	; (8009a94 <_printf_i+0x240>)
 80099cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	6829      	ldr	r1, [r5, #0]
 80099d4:	061f      	lsls	r7, r3, #24
 80099d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80099da:	d402      	bmi.n	80099e2 <_printf_i+0x18e>
 80099dc:	065f      	lsls	r7, r3, #25
 80099de:	bf48      	it	mi
 80099e0:	b2b6      	uxthmi	r6, r6
 80099e2:	07df      	lsls	r7, r3, #31
 80099e4:	bf48      	it	mi
 80099e6:	f043 0320 	orrmi.w	r3, r3, #32
 80099ea:	6029      	str	r1, [r5, #0]
 80099ec:	bf48      	it	mi
 80099ee:	6023      	strmi	r3, [r4, #0]
 80099f0:	b91e      	cbnz	r6, 80099fa <_printf_i+0x1a6>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	f023 0320 	bic.w	r3, r3, #32
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	2310      	movs	r3, #16
 80099fc:	e7a6      	b.n	800994c <_printf_i+0xf8>
 80099fe:	4824      	ldr	r0, [pc, #144]	; (8009a90 <_printf_i+0x23c>)
 8009a00:	e7e4      	b.n	80099cc <_printf_i+0x178>
 8009a02:	4615      	mov	r5, r2
 8009a04:	e7bd      	b.n	8009982 <_printf_i+0x12e>
 8009a06:	682b      	ldr	r3, [r5, #0]
 8009a08:	6826      	ldr	r6, [r4, #0]
 8009a0a:	1d18      	adds	r0, r3, #4
 8009a0c:	6961      	ldr	r1, [r4, #20]
 8009a0e:	6028      	str	r0, [r5, #0]
 8009a10:	0635      	lsls	r5, r6, #24
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	d501      	bpl.n	8009a1a <_printf_i+0x1c6>
 8009a16:	6019      	str	r1, [r3, #0]
 8009a18:	e002      	b.n	8009a20 <_printf_i+0x1cc>
 8009a1a:	0670      	lsls	r0, r6, #25
 8009a1c:	d5fb      	bpl.n	8009a16 <_printf_i+0x1c2>
 8009a1e:	8019      	strh	r1, [r3, #0]
 8009a20:	2300      	movs	r3, #0
 8009a22:	4615      	mov	r5, r2
 8009a24:	6123      	str	r3, [r4, #16]
 8009a26:	e7bc      	b.n	80099a2 <_printf_i+0x14e>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	1d1a      	adds	r2, r3, #4
 8009a2e:	602a      	str	r2, [r5, #0]
 8009a30:	681d      	ldr	r5, [r3, #0]
 8009a32:	6862      	ldr	r2, [r4, #4]
 8009a34:	4628      	mov	r0, r5
 8009a36:	f000 f9cd 	bl	8009dd4 <memchr>
 8009a3a:	b108      	cbz	r0, 8009a40 <_printf_i+0x1ec>
 8009a3c:	1b40      	subs	r0, r0, r5
 8009a3e:	6060      	str	r0, [r4, #4]
 8009a40:	6863      	ldr	r3, [r4, #4]
 8009a42:	6123      	str	r3, [r4, #16]
 8009a44:	2300      	movs	r3, #0
 8009a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a4a:	e7aa      	b.n	80099a2 <_printf_i+0x14e>
 8009a4c:	462a      	mov	r2, r5
 8009a4e:	4649      	mov	r1, r9
 8009a50:	4640      	mov	r0, r8
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	47d0      	blx	sl
 8009a56:	3001      	adds	r0, #1
 8009a58:	d0ad      	beq.n	80099b6 <_printf_i+0x162>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	079b      	lsls	r3, r3, #30
 8009a5e:	d413      	bmi.n	8009a88 <_printf_i+0x234>
 8009a60:	68e0      	ldr	r0, [r4, #12]
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	4298      	cmp	r0, r3
 8009a66:	bfb8      	it	lt
 8009a68:	4618      	movlt	r0, r3
 8009a6a:	e7a6      	b.n	80099ba <_printf_i+0x166>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4632      	mov	r2, r6
 8009a70:	4649      	mov	r1, r9
 8009a72:	4640      	mov	r0, r8
 8009a74:	47d0      	blx	sl
 8009a76:	3001      	adds	r0, #1
 8009a78:	d09d      	beq.n	80099b6 <_printf_i+0x162>
 8009a7a:	3501      	adds	r5, #1
 8009a7c:	68e3      	ldr	r3, [r4, #12]
 8009a7e:	9903      	ldr	r1, [sp, #12]
 8009a80:	1a5b      	subs	r3, r3, r1
 8009a82:	42ab      	cmp	r3, r5
 8009a84:	dcf2      	bgt.n	8009a6c <_printf_i+0x218>
 8009a86:	e7eb      	b.n	8009a60 <_printf_i+0x20c>
 8009a88:	2500      	movs	r5, #0
 8009a8a:	f104 0619 	add.w	r6, r4, #25
 8009a8e:	e7f5      	b.n	8009a7c <_printf_i+0x228>
 8009a90:	0800a06f 	.word	0x0800a06f
 8009a94:	0800a080 	.word	0x0800a080

08009a98 <__sflush_r>:
 8009a98:	898a      	ldrh	r2, [r1, #12]
 8009a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	0710      	lsls	r0, r2, #28
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	d457      	bmi.n	8009b54 <__sflush_r+0xbc>
 8009aa4:	684b      	ldr	r3, [r1, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	dc04      	bgt.n	8009ab4 <__sflush_r+0x1c>
 8009aaa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	dc01      	bgt.n	8009ab4 <__sflush_r+0x1c>
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	d0fa      	beq.n	8009ab0 <__sflush_r+0x18>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ac0:	682f      	ldr	r7, [r5, #0]
 8009ac2:	6a21      	ldr	r1, [r4, #32]
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	d032      	beq.n	8009b2e <__sflush_r+0x96>
 8009ac8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	075a      	lsls	r2, r3, #29
 8009ace:	d505      	bpl.n	8009adc <__sflush_r+0x44>
 8009ad0:	6863      	ldr	r3, [r4, #4]
 8009ad2:	1ac0      	subs	r0, r0, r3
 8009ad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ad6:	b10b      	cbz	r3, 8009adc <__sflush_r+0x44>
 8009ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ada:	1ac0      	subs	r0, r0, r3
 8009adc:	2300      	movs	r3, #0
 8009ade:	4602      	mov	r2, r0
 8009ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	6a21      	ldr	r1, [r4, #32]
 8009ae6:	47b0      	blx	r6
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	d106      	bne.n	8009afc <__sflush_r+0x64>
 8009aee:	6829      	ldr	r1, [r5, #0]
 8009af0:	291d      	cmp	r1, #29
 8009af2:	d82b      	bhi.n	8009b4c <__sflush_r+0xb4>
 8009af4:	4a28      	ldr	r2, [pc, #160]	; (8009b98 <__sflush_r+0x100>)
 8009af6:	410a      	asrs	r2, r1
 8009af8:	07d6      	lsls	r6, r2, #31
 8009afa:	d427      	bmi.n	8009b4c <__sflush_r+0xb4>
 8009afc:	2200      	movs	r2, #0
 8009afe:	6062      	str	r2, [r4, #4]
 8009b00:	6922      	ldr	r2, [r4, #16]
 8009b02:	04d9      	lsls	r1, r3, #19
 8009b04:	6022      	str	r2, [r4, #0]
 8009b06:	d504      	bpl.n	8009b12 <__sflush_r+0x7a>
 8009b08:	1c42      	adds	r2, r0, #1
 8009b0a:	d101      	bne.n	8009b10 <__sflush_r+0x78>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	b903      	cbnz	r3, 8009b12 <__sflush_r+0x7a>
 8009b10:	6560      	str	r0, [r4, #84]	; 0x54
 8009b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b14:	602f      	str	r7, [r5, #0]
 8009b16:	2900      	cmp	r1, #0
 8009b18:	d0ca      	beq.n	8009ab0 <__sflush_r+0x18>
 8009b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b1e:	4299      	cmp	r1, r3
 8009b20:	d002      	beq.n	8009b28 <__sflush_r+0x90>
 8009b22:	4628      	mov	r0, r5
 8009b24:	f7ff fa96 	bl	8009054 <_free_r>
 8009b28:	2000      	movs	r0, #0
 8009b2a:	6360      	str	r0, [r4, #52]	; 0x34
 8009b2c:	e7c1      	b.n	8009ab2 <__sflush_r+0x1a>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b0      	blx	r6
 8009b34:	1c41      	adds	r1, r0, #1
 8009b36:	d1c8      	bne.n	8009aca <__sflush_r+0x32>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d0c5      	beq.n	8009aca <__sflush_r+0x32>
 8009b3e:	2b1d      	cmp	r3, #29
 8009b40:	d001      	beq.n	8009b46 <__sflush_r+0xae>
 8009b42:	2b16      	cmp	r3, #22
 8009b44:	d101      	bne.n	8009b4a <__sflush_r+0xb2>
 8009b46:	602f      	str	r7, [r5, #0]
 8009b48:	e7b2      	b.n	8009ab0 <__sflush_r+0x18>
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b50:	81a3      	strh	r3, [r4, #12]
 8009b52:	e7ae      	b.n	8009ab2 <__sflush_r+0x1a>
 8009b54:	690f      	ldr	r7, [r1, #16]
 8009b56:	2f00      	cmp	r7, #0
 8009b58:	d0aa      	beq.n	8009ab0 <__sflush_r+0x18>
 8009b5a:	0793      	lsls	r3, r2, #30
 8009b5c:	bf18      	it	ne
 8009b5e:	2300      	movne	r3, #0
 8009b60:	680e      	ldr	r6, [r1, #0]
 8009b62:	bf08      	it	eq
 8009b64:	694b      	ldreq	r3, [r1, #20]
 8009b66:	1bf6      	subs	r6, r6, r7
 8009b68:	600f      	str	r7, [r1, #0]
 8009b6a:	608b      	str	r3, [r1, #8]
 8009b6c:	2e00      	cmp	r6, #0
 8009b6e:	dd9f      	ble.n	8009ab0 <__sflush_r+0x18>
 8009b70:	4633      	mov	r3, r6
 8009b72:	463a      	mov	r2, r7
 8009b74:	4628      	mov	r0, r5
 8009b76:	6a21      	ldr	r1, [r4, #32]
 8009b78:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009b7c:	47e0      	blx	ip
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	dc06      	bgt.n	8009b90 <__sflush_r+0xf8>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	e790      	b.n	8009ab2 <__sflush_r+0x1a>
 8009b90:	4407      	add	r7, r0
 8009b92:	1a36      	subs	r6, r6, r0
 8009b94:	e7ea      	b.n	8009b6c <__sflush_r+0xd4>
 8009b96:	bf00      	nop
 8009b98:	dfbffffe 	.word	0xdfbffffe

08009b9c <_fflush_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	690b      	ldr	r3, [r1, #16]
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	b913      	cbnz	r3, 8009bac <_fflush_r+0x10>
 8009ba6:	2500      	movs	r5, #0
 8009ba8:	4628      	mov	r0, r5
 8009baa:	bd38      	pop	{r3, r4, r5, pc}
 8009bac:	b118      	cbz	r0, 8009bb6 <_fflush_r+0x1a>
 8009bae:	6a03      	ldr	r3, [r0, #32]
 8009bb0:	b90b      	cbnz	r3, 8009bb6 <_fflush_r+0x1a>
 8009bb2:	f7ff f911 	bl	8008dd8 <__sinit>
 8009bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0f3      	beq.n	8009ba6 <_fflush_r+0xa>
 8009bbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bc0:	07d0      	lsls	r0, r2, #31
 8009bc2:	d404      	bmi.n	8009bce <_fflush_r+0x32>
 8009bc4:	0599      	lsls	r1, r3, #22
 8009bc6:	d402      	bmi.n	8009bce <_fflush_r+0x32>
 8009bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bca:	f7ff fa32 	bl	8009032 <__retarget_lock_acquire_recursive>
 8009bce:	4628      	mov	r0, r5
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	f7ff ff61 	bl	8009a98 <__sflush_r>
 8009bd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bd8:	4605      	mov	r5, r0
 8009bda:	07da      	lsls	r2, r3, #31
 8009bdc:	d4e4      	bmi.n	8009ba8 <_fflush_r+0xc>
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	059b      	lsls	r3, r3, #22
 8009be2:	d4e1      	bmi.n	8009ba8 <_fflush_r+0xc>
 8009be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009be6:	f7ff fa25 	bl	8009034 <__retarget_lock_release_recursive>
 8009bea:	e7dd      	b.n	8009ba8 <_fflush_r+0xc>

08009bec <_putc_r>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	460d      	mov	r5, r1
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	b118      	cbz	r0, 8009bfe <_putc_r+0x12>
 8009bf6:	6a03      	ldr	r3, [r0, #32]
 8009bf8:	b90b      	cbnz	r3, 8009bfe <_putc_r+0x12>
 8009bfa:	f7ff f8ed 	bl	8008dd8 <__sinit>
 8009bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c00:	07d8      	lsls	r0, r3, #31
 8009c02:	d405      	bmi.n	8009c10 <_putc_r+0x24>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	0599      	lsls	r1, r3, #22
 8009c08:	d402      	bmi.n	8009c10 <_putc_r+0x24>
 8009c0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0c:	f7ff fa11 	bl	8009032 <__retarget_lock_acquire_recursive>
 8009c10:	68a3      	ldr	r3, [r4, #8]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	60a3      	str	r3, [r4, #8]
 8009c18:	da05      	bge.n	8009c26 <_putc_r+0x3a>
 8009c1a:	69a2      	ldr	r2, [r4, #24]
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	db12      	blt.n	8009c46 <_putc_r+0x5a>
 8009c20:	b2eb      	uxtb	r3, r5
 8009c22:	2b0a      	cmp	r3, #10
 8009c24:	d00f      	beq.n	8009c46 <_putc_r+0x5a>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	6022      	str	r2, [r4, #0]
 8009c2c:	701d      	strb	r5, [r3, #0]
 8009c2e:	b2ed      	uxtb	r5, r5
 8009c30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c32:	07da      	lsls	r2, r3, #31
 8009c34:	d405      	bmi.n	8009c42 <_putc_r+0x56>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	059b      	lsls	r3, r3, #22
 8009c3a:	d402      	bmi.n	8009c42 <_putc_r+0x56>
 8009c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c3e:	f7ff f9f9 	bl	8009034 <__retarget_lock_release_recursive>
 8009c42:	4628      	mov	r0, r5
 8009c44:	bd70      	pop	{r4, r5, r6, pc}
 8009c46:	4629      	mov	r1, r5
 8009c48:	4622      	mov	r2, r4
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f000 f802 	bl	8009c54 <__swbuf_r>
 8009c50:	4605      	mov	r5, r0
 8009c52:	e7ed      	b.n	8009c30 <_putc_r+0x44>

08009c54 <__swbuf_r>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	460e      	mov	r6, r1
 8009c58:	4614      	mov	r4, r2
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	b118      	cbz	r0, 8009c66 <__swbuf_r+0x12>
 8009c5e:	6a03      	ldr	r3, [r0, #32]
 8009c60:	b90b      	cbnz	r3, 8009c66 <__swbuf_r+0x12>
 8009c62:	f7ff f8b9 	bl	8008dd8 <__sinit>
 8009c66:	69a3      	ldr	r3, [r4, #24]
 8009c68:	60a3      	str	r3, [r4, #8]
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	071a      	lsls	r2, r3, #28
 8009c6e:	d525      	bpl.n	8009cbc <__swbuf_r+0x68>
 8009c70:	6923      	ldr	r3, [r4, #16]
 8009c72:	b31b      	cbz	r3, 8009cbc <__swbuf_r+0x68>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	6922      	ldr	r2, [r4, #16]
 8009c78:	b2f6      	uxtb	r6, r6
 8009c7a:	1a98      	subs	r0, r3, r2
 8009c7c:	6963      	ldr	r3, [r4, #20]
 8009c7e:	4637      	mov	r7, r6
 8009c80:	4283      	cmp	r3, r0
 8009c82:	dc04      	bgt.n	8009c8e <__swbuf_r+0x3a>
 8009c84:	4621      	mov	r1, r4
 8009c86:	4628      	mov	r0, r5
 8009c88:	f7ff ff88 	bl	8009b9c <_fflush_r>
 8009c8c:	b9e0      	cbnz	r0, 8009cc8 <__swbuf_r+0x74>
 8009c8e:	68a3      	ldr	r3, [r4, #8]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	60a3      	str	r3, [r4, #8]
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	6022      	str	r2, [r4, #0]
 8009c9a:	701e      	strb	r6, [r3, #0]
 8009c9c:	6962      	ldr	r2, [r4, #20]
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d004      	beq.n	8009cae <__swbuf_r+0x5a>
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	07db      	lsls	r3, r3, #31
 8009ca8:	d506      	bpl.n	8009cb8 <__swbuf_r+0x64>
 8009caa:	2e0a      	cmp	r6, #10
 8009cac:	d104      	bne.n	8009cb8 <__swbuf_r+0x64>
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f7ff ff73 	bl	8009b9c <_fflush_r>
 8009cb6:	b938      	cbnz	r0, 8009cc8 <__swbuf_r+0x74>
 8009cb8:	4638      	mov	r0, r7
 8009cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f000 f806 	bl	8009cd0 <__swsetup_r>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d0d5      	beq.n	8009c74 <__swbuf_r+0x20>
 8009cc8:	f04f 37ff 	mov.w	r7, #4294967295
 8009ccc:	e7f4      	b.n	8009cb8 <__swbuf_r+0x64>
	...

08009cd0 <__swsetup_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4b2a      	ldr	r3, [pc, #168]	; (8009d7c <__swsetup_r+0xac>)
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	460c      	mov	r4, r1
 8009cda:	b118      	cbz	r0, 8009ce4 <__swsetup_r+0x14>
 8009cdc:	6a03      	ldr	r3, [r0, #32]
 8009cde:	b90b      	cbnz	r3, 8009ce4 <__swsetup_r+0x14>
 8009ce0:	f7ff f87a 	bl	8008dd8 <__sinit>
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cea:	0718      	lsls	r0, r3, #28
 8009cec:	d422      	bmi.n	8009d34 <__swsetup_r+0x64>
 8009cee:	06d9      	lsls	r1, r3, #27
 8009cf0:	d407      	bmi.n	8009d02 <__swsetup_r+0x32>
 8009cf2:	2309      	movs	r3, #9
 8009cf4:	602b      	str	r3, [r5, #0]
 8009cf6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfe:	81a3      	strh	r3, [r4, #12]
 8009d00:	e034      	b.n	8009d6c <__swsetup_r+0x9c>
 8009d02:	0758      	lsls	r0, r3, #29
 8009d04:	d512      	bpl.n	8009d2c <__swsetup_r+0x5c>
 8009d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d08:	b141      	cbz	r1, 8009d1c <__swsetup_r+0x4c>
 8009d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d0e:	4299      	cmp	r1, r3
 8009d10:	d002      	beq.n	8009d18 <__swsetup_r+0x48>
 8009d12:	4628      	mov	r0, r5
 8009d14:	f7ff f99e 	bl	8009054 <_free_r>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	6363      	str	r3, [r4, #52]	; 0x34
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	2300      	movs	r3, #0
 8009d26:	6063      	str	r3, [r4, #4]
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	f043 0308 	orr.w	r3, r3, #8
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	6923      	ldr	r3, [r4, #16]
 8009d36:	b94b      	cbnz	r3, 8009d4c <__swsetup_r+0x7c>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d42:	d003      	beq.n	8009d4c <__swsetup_r+0x7c>
 8009d44:	4621      	mov	r1, r4
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 f8a6 	bl	8009e98 <__smakebuf_r>
 8009d4c:	89a0      	ldrh	r0, [r4, #12]
 8009d4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d52:	f010 0301 	ands.w	r3, r0, #1
 8009d56:	d00a      	beq.n	8009d6e <__swsetup_r+0x9e>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	60a3      	str	r3, [r4, #8]
 8009d5c:	6963      	ldr	r3, [r4, #20]
 8009d5e:	425b      	negs	r3, r3
 8009d60:	61a3      	str	r3, [r4, #24]
 8009d62:	6923      	ldr	r3, [r4, #16]
 8009d64:	b943      	cbnz	r3, 8009d78 <__swsetup_r+0xa8>
 8009d66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d6a:	d1c4      	bne.n	8009cf6 <__swsetup_r+0x26>
 8009d6c:	bd38      	pop	{r3, r4, r5, pc}
 8009d6e:	0781      	lsls	r1, r0, #30
 8009d70:	bf58      	it	pl
 8009d72:	6963      	ldrpl	r3, [r4, #20]
 8009d74:	60a3      	str	r3, [r4, #8]
 8009d76:	e7f4      	b.n	8009d62 <__swsetup_r+0x92>
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e7f7      	b.n	8009d6c <__swsetup_r+0x9c>
 8009d7c:	200001d8 	.word	0x200001d8

08009d80 <memmove>:
 8009d80:	4288      	cmp	r0, r1
 8009d82:	b510      	push	{r4, lr}
 8009d84:	eb01 0402 	add.w	r4, r1, r2
 8009d88:	d902      	bls.n	8009d90 <memmove+0x10>
 8009d8a:	4284      	cmp	r4, r0
 8009d8c:	4623      	mov	r3, r4
 8009d8e:	d807      	bhi.n	8009da0 <memmove+0x20>
 8009d90:	1e43      	subs	r3, r0, #1
 8009d92:	42a1      	cmp	r1, r4
 8009d94:	d008      	beq.n	8009da8 <memmove+0x28>
 8009d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d9e:	e7f8      	b.n	8009d92 <memmove+0x12>
 8009da0:	4601      	mov	r1, r0
 8009da2:	4402      	add	r2, r0
 8009da4:	428a      	cmp	r2, r1
 8009da6:	d100      	bne.n	8009daa <memmove+0x2a>
 8009da8:	bd10      	pop	{r4, pc}
 8009daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009db2:	e7f7      	b.n	8009da4 <memmove+0x24>

08009db4 <_sbrk_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	2300      	movs	r3, #0
 8009db8:	4d05      	ldr	r5, [pc, #20]	; (8009dd0 <_sbrk_r+0x1c>)
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	602b      	str	r3, [r5, #0]
 8009dc0:	f7f6 ffa8 	bl	8000d14 <_sbrk>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_sbrk_r+0x1a>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_sbrk_r+0x1a>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	20001e6c 	.word	0x20001e6c

08009dd4 <memchr>:
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	b510      	push	{r4, lr}
 8009dd8:	b2c9      	uxtb	r1, r1
 8009dda:	4402      	add	r2, r0
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	d101      	bne.n	8009de6 <memchr+0x12>
 8009de2:	2000      	movs	r0, #0
 8009de4:	e003      	b.n	8009dee <memchr+0x1a>
 8009de6:	7804      	ldrb	r4, [r0, #0]
 8009de8:	3301      	adds	r3, #1
 8009dea:	428c      	cmp	r4, r1
 8009dec:	d1f6      	bne.n	8009ddc <memchr+0x8>
 8009dee:	bd10      	pop	{r4, pc}

08009df0 <_realloc_r>:
 8009df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df4:	4680      	mov	r8, r0
 8009df6:	4614      	mov	r4, r2
 8009df8:	460e      	mov	r6, r1
 8009dfa:	b921      	cbnz	r1, 8009e06 <_realloc_r+0x16>
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e02:	f7ff b98f 	b.w	8009124 <_malloc_r>
 8009e06:	b92a      	cbnz	r2, 8009e14 <_realloc_r+0x24>
 8009e08:	f7ff f924 	bl	8009054 <_free_r>
 8009e0c:	4625      	mov	r5, r4
 8009e0e:	4628      	mov	r0, r5
 8009e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e14:	f000 f89e 	bl	8009f54 <_malloc_usable_size_r>
 8009e18:	4284      	cmp	r4, r0
 8009e1a:	4607      	mov	r7, r0
 8009e1c:	d802      	bhi.n	8009e24 <_realloc_r+0x34>
 8009e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e22:	d812      	bhi.n	8009e4a <_realloc_r+0x5a>
 8009e24:	4621      	mov	r1, r4
 8009e26:	4640      	mov	r0, r8
 8009e28:	f7ff f97c 	bl	8009124 <_malloc_r>
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d0ed      	beq.n	8009e0e <_realloc_r+0x1e>
 8009e32:	42bc      	cmp	r4, r7
 8009e34:	4622      	mov	r2, r4
 8009e36:	4631      	mov	r1, r6
 8009e38:	bf28      	it	cs
 8009e3a:	463a      	movcs	r2, r7
 8009e3c:	f7ff f8fb 	bl	8009036 <memcpy>
 8009e40:	4631      	mov	r1, r6
 8009e42:	4640      	mov	r0, r8
 8009e44:	f7ff f906 	bl	8009054 <_free_r>
 8009e48:	e7e1      	b.n	8009e0e <_realloc_r+0x1e>
 8009e4a:	4635      	mov	r5, r6
 8009e4c:	e7df      	b.n	8009e0e <_realloc_r+0x1e>

08009e4e <__swhatbuf_r>:
 8009e4e:	b570      	push	{r4, r5, r6, lr}
 8009e50:	460c      	mov	r4, r1
 8009e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e56:	4615      	mov	r5, r2
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	461e      	mov	r6, r3
 8009e5c:	b096      	sub	sp, #88	; 0x58
 8009e5e:	da0c      	bge.n	8009e7a <__swhatbuf_r+0x2c>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	2100      	movs	r1, #0
 8009e64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e68:	bf0c      	ite	eq
 8009e6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e6e:	2340      	movne	r3, #64	; 0x40
 8009e70:	2000      	movs	r0, #0
 8009e72:	6031      	str	r1, [r6, #0]
 8009e74:	602b      	str	r3, [r5, #0]
 8009e76:	b016      	add	sp, #88	; 0x58
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	466a      	mov	r2, sp
 8009e7c:	f000 f848 	bl	8009f10 <_fstat_r>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	dbed      	blt.n	8009e60 <__swhatbuf_r+0x12>
 8009e84:	9901      	ldr	r1, [sp, #4]
 8009e86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e8e:	4259      	negs	r1, r3
 8009e90:	4159      	adcs	r1, r3
 8009e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e96:	e7eb      	b.n	8009e70 <__swhatbuf_r+0x22>

08009e98 <__smakebuf_r>:
 8009e98:	898b      	ldrh	r3, [r1, #12]
 8009e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e9c:	079d      	lsls	r5, r3, #30
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	d507      	bpl.n	8009eb4 <__smakebuf_r+0x1c>
 8009ea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	6123      	str	r3, [r4, #16]
 8009eac:	2301      	movs	r3, #1
 8009eae:	6163      	str	r3, [r4, #20]
 8009eb0:	b002      	add	sp, #8
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	466a      	mov	r2, sp
 8009eb6:	ab01      	add	r3, sp, #4
 8009eb8:	f7ff ffc9 	bl	8009e4e <__swhatbuf_r>
 8009ebc:	9900      	ldr	r1, [sp, #0]
 8009ebe:	4605      	mov	r5, r0
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f7ff f92f 	bl	8009124 <_malloc_r>
 8009ec6:	b948      	cbnz	r0, 8009edc <__smakebuf_r+0x44>
 8009ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ecc:	059a      	lsls	r2, r3, #22
 8009ece:	d4ef      	bmi.n	8009eb0 <__smakebuf_r+0x18>
 8009ed0:	f023 0303 	bic.w	r3, r3, #3
 8009ed4:	f043 0302 	orr.w	r3, r3, #2
 8009ed8:	81a3      	strh	r3, [r4, #12]
 8009eda:	e7e3      	b.n	8009ea4 <__smakebuf_r+0xc>
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	6020      	str	r0, [r4, #0]
 8009ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee4:	81a3      	strh	r3, [r4, #12]
 8009ee6:	9b00      	ldr	r3, [sp, #0]
 8009ee8:	6120      	str	r0, [r4, #16]
 8009eea:	6163      	str	r3, [r4, #20]
 8009eec:	9b01      	ldr	r3, [sp, #4]
 8009eee:	b15b      	cbz	r3, 8009f08 <__smakebuf_r+0x70>
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ef6:	f000 f81d 	bl	8009f34 <_isatty_r>
 8009efa:	b128      	cbz	r0, 8009f08 <__smakebuf_r+0x70>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	f023 0303 	bic.w	r3, r3, #3
 8009f02:	f043 0301 	orr.w	r3, r3, #1
 8009f06:	81a3      	strh	r3, [r4, #12]
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	431d      	orrs	r5, r3
 8009f0c:	81a5      	strh	r5, [r4, #12]
 8009f0e:	e7cf      	b.n	8009eb0 <__smakebuf_r+0x18>

08009f10 <_fstat_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	2300      	movs	r3, #0
 8009f14:	4d06      	ldr	r5, [pc, #24]	; (8009f30 <_fstat_r+0x20>)
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	602b      	str	r3, [r5, #0]
 8009f1e:	f7f6 fed3 	bl	8000cc8 <_fstat>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d102      	bne.n	8009f2c <_fstat_r+0x1c>
 8009f26:	682b      	ldr	r3, [r5, #0]
 8009f28:	b103      	cbz	r3, 8009f2c <_fstat_r+0x1c>
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	bd38      	pop	{r3, r4, r5, pc}
 8009f2e:	bf00      	nop
 8009f30:	20001e6c 	.word	0x20001e6c

08009f34 <_isatty_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	2300      	movs	r3, #0
 8009f38:	4d05      	ldr	r5, [pc, #20]	; (8009f50 <_isatty_r+0x1c>)
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	602b      	str	r3, [r5, #0]
 8009f40:	f7f6 fed1 	bl	8000ce6 <_isatty>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_isatty_r+0x1a>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_isatty_r+0x1a>
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	20001e6c 	.word	0x20001e6c

08009f54 <_malloc_usable_size_r>:
 8009f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f58:	1f18      	subs	r0, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	bfbc      	itt	lt
 8009f5e:	580b      	ldrlt	r3, [r1, r0]
 8009f60:	18c0      	addlt	r0, r0, r3
 8009f62:	4770      	bx	lr

08009f64 <_init>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	bf00      	nop
 8009f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6a:	bc08      	pop	{r3}
 8009f6c:	469e      	mov	lr, r3
 8009f6e:	4770      	bx	lr

08009f70 <_fini>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	bf00      	nop
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr
